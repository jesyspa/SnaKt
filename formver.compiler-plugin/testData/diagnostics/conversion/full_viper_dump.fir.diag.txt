/full_viper_dump.kt:(172,173): info: Generated Viper text for f:
domain d_rt  {

  unique function df_intType(): d_rt

  unique function df_boolType(): d_rt

  unique function df_charType(): d_rt

  unique function df_unitType(): d_rt

  unique function df_nothingType(): d_rt

  unique function df_anyType(): d_rt

  unique function df_functionType(): d_rt

  unique function df_stringType(): d_rt

  unique function df_c_Foo(): d_rt

  function df_nullValue(): Ref

  function df_unitValue(): Ref

  function df_isSubtype(t1: d_rt, t2: d_rt): Bool

  function df_typeOf(r: Ref): d_rt

  function df_nullable(t: d_rt): d_rt

  function df_intToRef(v: Int): Ref

  function df_intFromRef(r: Ref): Int

  function df_boolToRef(v: Bool): Ref

  function df_boolFromRef(r: Ref): Bool

  function df_charToRef(v: Int): Ref

  function df_charFromRef(r: Ref): Int

  function df_stringToRef(v: Seq[Int]): Ref

  function df_stringFromRef(r: Ref): Seq[Int]

  axiom subtype_reflexive {
    (forall t: d_rt ::df_isSubtype(t, t))
  }

  axiom subtype_transitive {
    (forall t1: d_rt, t2: d_rt, t3: d_rt ::
      { df_isSubtype(t1, t2), df_isSubtype(t2, t3) }
      { df_isSubtype(t1, t2), df_isSubtype(t1, t3) }
      { df_isSubtype(t2, t3), df_isSubtype(t1, t3) }
      df_isSubtype(t1, t2) && df_isSubtype(t2, t3) ==> df_isSubtype(t1, t3))
  }

  axiom subtype_antisymmetric {
    (forall t1: d_rt, t2: d_rt ::
      { df_isSubtype(t1, t2), df_isSubtype(t2, t1) }
      df_isSubtype(t1, t2) && df_isSubtype(t2, t1) ==> t1 == t2)
  }

  axiom nullable_idempotent {
    (forall t: d_rt ::
      { df_nullable(df_nullable(t)) }
      df_nullable(df_nullable(t)) == df_nullable(t))
  }

  axiom nullable_supertype {
    (forall t: d_rt :: { df_nullable(t) } df_isSubtype(t, df_nullable(t)))
  }

  axiom nullable_preserves_subtype {
    (forall t1: d_rt, t2: d_rt ::
      { df_isSubtype(df_nullable(t1), df_nullable(t2)) }
      df_isSubtype(t1, t2) ==>
      df_isSubtype(df_nullable(t1), df_nullable(t2)))
  }

  axiom nullable_any_supertype {
    (forall t: d_rt ::df_isSubtype(t, df_nullable(df_anyType())))
  }

  axiom {
    df_isSubtype(df_intType(), df_anyType())
  }

  axiom {
    df_isSubtype(df_boolType(), df_anyType())
  }

  axiom {
    df_isSubtype(df_charType(), df_anyType())
  }

  axiom {
    df_isSubtype(df_unitType(), df_anyType())
  }

  axiom {
    df_isSubtype(df_nothingType(), df_anyType())
  }

  axiom {
    df_isSubtype(df_anyType(), df_anyType())
  }

  axiom {
    df_isSubtype(df_functionType(), df_anyType())
  }

  axiom {
    df_isSubtype(df_stringType(), df_anyType())
  }

  axiom {
    df_isSubtype(df_c_Foo(), df_anyType())
  }

  axiom supertype_of_nothing {
    (forall t: d_rt ::df_isSubtype(df_nothingType(), t))
  }

  axiom any_not_nullable_type_level {
    (forall t: d_rt ::!df_isSubtype(df_nullable(t), df_anyType()))
  }

  axiom null_smartcast_value_level {
    (forall r: Ref, t: d_rt ::
      { df_isSubtype(df_typeOf(r), df_nullable(t)) }
      df_isSubtype(df_typeOf(r), df_nullable(t)) ==>
      r == df_nullValue() || df_isSubtype(df_typeOf(r), t))
  }

  axiom nothing_empty {
    (forall r: Ref ::!df_isSubtype(df_typeOf(r), df_nothingType()))
  }

  axiom null_smartcast_type_level {
    (forall t1: d_rt, t2: d_rt ::
      { df_isSubtype(t1, df_anyType()), df_isSubtype(t1, df_nullable(t2)) }
      df_isSubtype(t1, df_anyType()) && df_isSubtype(t1, df_nullable(t2)) ==>
      df_isSubtype(t1, t2))
  }

  axiom type_of_null {
    df_isSubtype(df_typeOf(df_nullValue()), df_nullable(df_nothingType()))
  }

  axiom any_not_nullable_value_level {
    !df_isSubtype(df_typeOf(df_nullValue()), df_anyType())
  }

  axiom type_of_unit {
    df_isSubtype(df_typeOf(df_unitValue()), df_unitType())
  }

  axiom uniqueness_of_unit {
    (forall r: Ref ::
      { df_isSubtype(df_typeOf(r), df_unitType()) }
      df_isSubtype(df_typeOf(r), df_unitType()) ==> r == df_unitValue())
  }

  axiom {
    (forall v: Int ::
      { df_isSubtype(df_typeOf(df_intToRef(v)), df_intType()) }
      df_isSubtype(df_typeOf(df_intToRef(v)), df_intType()))
  }

  axiom {
    (forall v: Int ::
      { df_intFromRef(df_intToRef(v)) }
      df_intFromRef(df_intToRef(v)) == v)
  }

  axiom {
    (forall r: Ref ::
      { df_intToRef(df_intFromRef(r)) }
      df_isSubtype(df_typeOf(r), df_intType()) ==>
      df_intToRef(df_intFromRef(r)) == r)
  }

  axiom {
    (forall v: Bool ::
      { df_isSubtype(df_typeOf(df_boolToRef(v)), df_boolType()) }
      df_isSubtype(df_typeOf(df_boolToRef(v)), df_boolType()))
  }

  axiom {
    (forall v: Bool ::
      { df_boolFromRef(df_boolToRef(v)) }
      df_boolFromRef(df_boolToRef(v)) == v)
  }

  axiom {
    (forall r: Ref ::
      { df_boolToRef(df_boolFromRef(r)) }
      df_isSubtype(df_typeOf(r), df_boolType()) ==>
      df_boolToRef(df_boolFromRef(r)) == r)
  }

  axiom {
    (forall v: Int ::
      { df_isSubtype(df_typeOf(df_charToRef(v)), df_charType()) }
      df_isSubtype(df_typeOf(df_charToRef(v)), df_charType()))
  }

  axiom {
    (forall v: Int ::
      { df_charFromRef(df_charToRef(v)) }
      df_charFromRef(df_charToRef(v)) == v)
  }

  axiom {
    (forall r: Ref ::
      { df_charToRef(df_charFromRef(r)) }
      df_isSubtype(df_typeOf(r), df_charType()) ==>
      df_charToRef(df_charFromRef(r)) == r)
  }

  axiom {
    (forall v: Seq[Int] ::
      { df_isSubtype(df_typeOf(df_stringToRef(v)), df_stringType()) }
      df_isSubtype(df_typeOf(df_stringToRef(v)), df_stringType()))
  }

  axiom {
    (forall v: Seq[Int] ::
      { df_stringFromRef(df_stringToRef(v)) }
      df_stringFromRef(df_stringToRef(v)) == v)
  }

  axiom {
    (forall r: Ref ::
      { df_stringToRef(df_stringFromRef(r)) }
      df_isSubtype(df_typeOf(r), df_stringType()) ==>
      df_stringToRef(df_stringFromRef(r)) == r)
  }
}

field bf_x: Ref

function sp_addCharInt(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_charType())
  ensures df_charFromRef(result) ==
    df_charFromRef(arg1) + df_intFromRef(arg2)


function sp_addStringChar(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_stringType())
  ensures df_stringFromRef(result) ==
    df_stringFromRef(arg1) ++ Seq(df_charFromRef(arg2))


function sp_addStrings(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_stringType())
  ensures df_stringFromRef(result) ==
    df_stringFromRef(arg1) ++ df_stringFromRef(arg2)


function sp_andBools(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    (df_boolFromRef(arg1) && df_boolFromRef(arg2))


function sp_divInts(arg1: Ref, arg2: Ref): Ref
  requires df_intFromRef(arg2) != 0
  ensures df_isSubtype(df_typeOf(result), df_intType())
  ensures df_intFromRef(result) ==
    df_intFromRef(arg1) / df_intFromRef(arg2)


function sp_geChars(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    df_charFromRef(arg1) >= df_charFromRef(arg2)


function sp_geInts(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    df_intFromRef(arg1) >= df_intFromRef(arg2)


function sp_gtChars(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    df_charFromRef(arg1) > df_charFromRef(arg2)


function sp_gtInts(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    df_intFromRef(arg1) > df_intFromRef(arg2)


function sp_impliesBools(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    (df_boolFromRef(arg1) ==> df_boolFromRef(arg2))


function sp_leChars(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    df_charFromRef(arg1) <= df_charFromRef(arg2)


function sp_leInts(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    df_intFromRef(arg1) <= df_intFromRef(arg2)


function sp_ltChars(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    df_charFromRef(arg1) < df_charFromRef(arg2)


function sp_ltInts(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    df_intFromRef(arg1) < df_intFromRef(arg2)


function sp_minusInts(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_intType())
  ensures df_intFromRef(result) ==
    df_intFromRef(arg1) - df_intFromRef(arg2)


function sp_notBool(arg1: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) == !df_boolFromRef(arg1)


function sp_orBools(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_boolType())
  ensures df_boolFromRef(result) ==
    (df_boolFromRef(arg1) || df_boolFromRef(arg2))


function sp_plusInts(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_intType())
  ensures df_intFromRef(result) ==
    df_intFromRef(arg1) + df_intFromRef(arg2)


function sp_remInts(arg1: Ref, arg2: Ref): Ref
  requires df_intFromRef(arg2) != 0
  ensures df_isSubtype(df_typeOf(result), df_intType())
  ensures df_intFromRef(result) ==
    df_intFromRef(arg1) % df_intFromRef(arg2)


function sp_stringGet(arg1: Ref, arg2: Ref): Ref
  requires df_intFromRef(arg2) >= 0 &&
    df_intFromRef(arg2) < |df_stringFromRef(arg1)|
  ensures df_isSubtype(df_typeOf(result), df_charType())
  ensures df_charFromRef(result) ==
    df_stringFromRef(arg1)[df_intFromRef(arg2)]


function sp_stringLength(arg1: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_intType())
  ensures df_intFromRef(result) == |df_stringFromRef(arg1)|


function sp_subCharInt(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_charType())
  ensures df_charFromRef(result) ==
    df_charFromRef(arg1) - df_intFromRef(arg2)


function sp_subChars(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_intType())
  ensures df_intFromRef(result) ==
    df_charFromRef(arg1) - df_charFromRef(arg2)


function sp_timesInts(arg1: Ref, arg2: Ref): Ref
  ensures df_isSubtype(df_typeOf(result), df_intType())
  ensures df_intFromRef(result) ==
    df_intFromRef(arg1) * df_intFromRef(arg2)


predicate p_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_x, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_x), df_intType())
}

predicate p_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_x, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_x), df_intType())
}

method con_T_Int(x: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_Foo())
  ensures acc(p_shared(ret), wildcard)
  ensures acc(p_unique(ret), write)
  ensures df_intFromRef((unfolding acc(p_shared(ret), wildcard) in
      ret.bf_x)) ==
    df_intFromRef(x)


method f_f_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var foo: Ref
  foo := con_T_Int(df_intToRef(0))
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/full_viper_dump.kt:(172,173): info: Generated ExpEmbedding for f_f_TF_:
Function(name = f_f_TF_, { Declare(Var(foo), T_Foo, MethodCall(callee = con_T_Int, Int(0))) }, return = lbl_0)
