/full_viper_dump.kt:(172,173): info: Generated Viper text for f:
domain d$rt  {

  unique function df$intType(): d$rt

  unique function df$boolType(): d$rt

  unique function df$charType(): d$rt

  unique function df$unitType(): d$rt

  unique function df$nothingType(): d$rt

  unique function df$anyType(): d$rt

  unique function df$functionType(): d$rt

  unique function df$stringType(): d$rt

  unique function df$c$Foo(): d$rt

  function df$nullValue(): Ref

  function df$unitValue(): Ref

  function df$isSubtype(t1: d$rt, t2: d$rt): Bool

  function df$typeOf(r: Ref): d$rt

  function df$nullable(t: d$rt): d$rt

  function df$intToRef(v: Int): Ref

  function df$intFromRef(r: Ref): Int

  function df$boolToRef(v: Bool): Ref

  function df$boolFromRef(r: Ref): Bool

  function df$charToRef(v: Int): Ref

  function df$charFromRef(r: Ref): Int

  function df$stringToRef(v: Seq[Int]): Ref

  function df$stringFromRef(r: Ref): Seq[Int]

  axiom subtype_reflexive {
    (forall t: d$rt ::df$isSubtype(t, t))
  }

  axiom subtype_transitive {
    (forall t1: d$rt, t2: d$rt, t3: d$rt ::
      { df$isSubtype(t1, t2), df$isSubtype(t2, t3) }
      { df$isSubtype(t1, t2), df$isSubtype(t1, t3) }
      { df$isSubtype(t2, t3), df$isSubtype(t1, t3) }
      df$isSubtype(t1, t2) && df$isSubtype(t2, t3) ==> df$isSubtype(t1, t3))
  }

  axiom subtype_antisymmetric {
    (forall t1: d$rt, t2: d$rt ::
      { df$isSubtype(t1, t2), df$isSubtype(t2, t1) }
      df$isSubtype(t1, t2) && df$isSubtype(t2, t1) ==> t1 == t2)
  }

  axiom nullable_idempotent {
    (forall t: d$rt ::
      { df$nullable(df$nullable(t)) }
      df$nullable(df$nullable(t)) == df$nullable(t))
  }

  axiom nullable_supertype {
    (forall t: d$rt :: { df$nullable(t) } df$isSubtype(t, df$nullable(t)))
  }

  axiom nullable_preserves_subtype {
    (forall t1: d$rt, t2: d$rt ::
      { df$isSubtype(df$nullable(t1), df$nullable(t2)) }
      df$isSubtype(t1, t2) ==>
      df$isSubtype(df$nullable(t1), df$nullable(t2)))
  }

  axiom nullable_any_supertype {
    (forall t: d$rt ::df$isSubtype(t, df$nullable(df$anyType())))
  }

  axiom {
    df$isSubtype(df$intType(), df$anyType())
  }

  axiom {
    df$isSubtype(df$boolType(), df$anyType())
  }

  axiom {
    df$isSubtype(df$charType(), df$anyType())
  }

  axiom {
    df$isSubtype(df$unitType(), df$anyType())
  }

  axiom {
    df$isSubtype(df$nothingType(), df$anyType())
  }

  axiom {
    df$isSubtype(df$anyType(), df$anyType())
  }

  axiom {
    df$isSubtype(df$functionType(), df$anyType())
  }

  axiom {
    df$isSubtype(df$stringType(), df$anyType())
  }

  axiom {
    df$isSubtype(df$c$Foo(), df$anyType())
  }

  axiom supertype_of_nothing {
    (forall t: d$rt ::df$isSubtype(df$nothingType(), t))
  }

  axiom any_not_nullable_type_level {
    (forall t: d$rt ::!df$isSubtype(df$nullable(t), df$anyType()))
  }

  axiom null_smartcast_value_level {
    (forall r: Ref, t: d$rt ::
      { df$isSubtype(df$typeOf(r), df$nullable(t)) }
      df$isSubtype(df$typeOf(r), df$nullable(t)) ==>
      r == df$nullValue() || df$isSubtype(df$typeOf(r), t))
  }

  axiom nothing_empty {
    (forall r: Ref ::!df$isSubtype(df$typeOf(r), df$nothingType()))
  }

  axiom null_smartcast_type_level {
    (forall t1: d$rt, t2: d$rt ::
      { df$isSubtype(t1, df$anyType()), df$isSubtype(t1, df$nullable(t2)) }
      df$isSubtype(t1, df$anyType()) && df$isSubtype(t1, df$nullable(t2)) ==>
      df$isSubtype(t1, t2))
  }

  axiom type_of_null {
    df$isSubtype(df$typeOf(df$nullValue()), df$nullable(df$nothingType()))
  }

  axiom any_not_nullable_value_level {
    !df$isSubtype(df$typeOf(df$nullValue()), df$anyType())
  }

  axiom type_of_unit {
    df$isSubtype(df$typeOf(df$unitValue()), df$unitType())
  }

  axiom uniqueness_of_unit {
    (forall r: Ref ::
      { df$isSubtype(df$typeOf(r), df$unitType()) }
      df$isSubtype(df$typeOf(r), df$unitType()) ==> r == df$unitValue())
  }

  axiom {
    (forall v: Int ::
      { df$isSubtype(df$typeOf(df$intToRef(v)), df$intType()) }
      df$isSubtype(df$typeOf(df$intToRef(v)), df$intType()))
  }

  axiom {
    (forall v: Int ::
      { df$intFromRef(df$intToRef(v)) }
      df$intFromRef(df$intToRef(v)) == v)
  }

  axiom {
    (forall r: Ref ::
      { df$intToRef(df$intFromRef(r)) }
      df$isSubtype(df$typeOf(r), df$intType()) ==>
      df$intToRef(df$intFromRef(r)) == r)
  }

  axiom {
    (forall v: Bool ::
      { df$isSubtype(df$typeOf(df$boolToRef(v)), df$boolType()) }
      df$isSubtype(df$typeOf(df$boolToRef(v)), df$boolType()))
  }

  axiom {
    (forall v: Bool ::
      { df$boolFromRef(df$boolToRef(v)) }
      df$boolFromRef(df$boolToRef(v)) == v)
  }

  axiom {
    (forall r: Ref ::
      { df$boolToRef(df$boolFromRef(r)) }
      df$isSubtype(df$typeOf(r), df$boolType()) ==>
      df$boolToRef(df$boolFromRef(r)) == r)
  }

  axiom {
    (forall v: Int ::
      { df$isSubtype(df$typeOf(df$charToRef(v)), df$charType()) }
      df$isSubtype(df$typeOf(df$charToRef(v)), df$charType()))
  }

  axiom {
    (forall v: Int ::
      { df$charFromRef(df$charToRef(v)) }
      df$charFromRef(df$charToRef(v)) == v)
  }

  axiom {
    (forall r: Ref ::
      { df$charToRef(df$charFromRef(r)) }
      df$isSubtype(df$typeOf(r), df$charType()) ==>
      df$charToRef(df$charFromRef(r)) == r)
  }

  axiom {
    (forall v: Seq[Int] ::
      { df$isSubtype(df$typeOf(df$stringToRef(v)), df$stringType()) }
      df$isSubtype(df$typeOf(df$stringToRef(v)), df$stringType()))
  }

  axiom {
    (forall v: Seq[Int] ::
      { df$stringFromRef(df$stringToRef(v)) }
      df$stringFromRef(df$stringToRef(v)) == v)
  }

  axiom {
    (forall r: Ref ::
      { df$stringToRef(df$stringFromRef(r)) }
      df$isSubtype(df$typeOf(r), df$stringType()) ==>
      df$stringToRef(df$stringFromRef(r)) == r)
  }
}

field bf$x: Ref

function sp$addCharInt(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$charType())
  ensures df$charFromRef(result) ==
    df$charFromRef(arg1) + df$intFromRef(arg2)


function sp$addStringChar(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$stringType())
  ensures df$stringFromRef(result) ==
    df$stringFromRef(arg1) ++ Seq(df$charFromRef(arg2))


function sp$addStrings(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$stringType())
  ensures df$stringFromRef(result) ==
    df$stringFromRef(arg1) ++ df$stringFromRef(arg2)


function sp$andBools(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    (df$boolFromRef(arg1) && df$boolFromRef(arg2))


function sp$divInts(arg1: Ref, arg2: Ref): Ref
  requires df$intFromRef(arg2) != 0
  ensures df$isSubtype(df$typeOf(result), df$intType())
  ensures df$intFromRef(result) ==
    df$intFromRef(arg1) / df$intFromRef(arg2)


function sp$geChars(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    df$charFromRef(arg1) >= df$charFromRef(arg2)


function sp$geInts(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    df$intFromRef(arg1) >= df$intFromRef(arg2)


function sp$gtChars(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    df$charFromRef(arg1) > df$charFromRef(arg2)


function sp$gtInts(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    df$intFromRef(arg1) > df$intFromRef(arg2)


function sp$impliesBools(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    (df$boolFromRef(arg1) ==> df$boolFromRef(arg2))


function sp$leChars(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    df$charFromRef(arg1) <= df$charFromRef(arg2)


function sp$leInts(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    df$intFromRef(arg1) <= df$intFromRef(arg2)


function sp$ltChars(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    df$charFromRef(arg1) < df$charFromRef(arg2)


function sp$ltInts(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    df$intFromRef(arg1) < df$intFromRef(arg2)


function sp$minusInts(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$intType())
  ensures df$intFromRef(result) ==
    df$intFromRef(arg1) - df$intFromRef(arg2)


function sp$notBool(arg1: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) == !df$boolFromRef(arg1)


function sp$orBools(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$boolType())
  ensures df$boolFromRef(result) ==
    (df$boolFromRef(arg1) || df$boolFromRef(arg2))


function sp$plusInts(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$intType())
  ensures df$intFromRef(result) ==
    df$intFromRef(arg1) + df$intFromRef(arg2)


function sp$remInts(arg1: Ref, arg2: Ref): Ref
  requires df$intFromRef(arg2) != 0
  ensures df$isSubtype(df$typeOf(result), df$intType())
  ensures df$intFromRef(result) ==
    df$intFromRef(arg1) % df$intFromRef(arg2)


function sp$stringGet(arg1: Ref, arg2: Ref): Ref
  requires df$intFromRef(arg2) >= 0 &&
    df$intFromRef(arg2) < |df$stringFromRef(arg1)|
  ensures df$isSubtype(df$typeOf(result), df$charType())
  ensures df$charFromRef(result) ==
    df$stringFromRef(arg1)[df$intFromRef(arg2)]


function sp$stringLength(arg1: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$intType())
  ensures df$intFromRef(result) == |df$stringFromRef(arg1)|


function sp$subCharInt(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$charType())
  ensures df$charFromRef(result) ==
    df$charFromRef(arg1) - df$intFromRef(arg2)


function sp$subChars(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$intType())
  ensures df$intFromRef(result) ==
    df$charFromRef(arg1) - df$charFromRef(arg2)


function sp$timesInts(arg1: Ref, arg2: Ref): Ref
  ensures df$isSubtype(df$typeOf(result), df$intType())
  ensures df$intFromRef(result) ==
    df$intFromRef(arg1) * df$intFromRef(arg2)


predicate p$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$x, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$x), df$intType())
}

predicate p$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$x, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$x), df$intType())
}

method con$T$Int(x: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Foo())
  ensures acc(p$shared(ret), wildcard)
  ensures acc(p$unique(ret), write)
  ensures df$intFromRef((unfolding acc(p$shared(ret), wildcard) in
      ret.bf$x)) ==
    df$intFromRef(x)


method f$f$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var foo: Ref
  foo := con$T$Int(df$intToRef(0))
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/full_viper_dump.kt:(172,173): info: Generated ExpEmbedding for f$f$TF$:
Function(name = f$f$TF$, { Declare(Var(foo), T$Foo, MethodCall(callee = con$T$Int, Int(0))) }, return = lbl$0)
