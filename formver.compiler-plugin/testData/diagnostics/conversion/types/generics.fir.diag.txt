/generics.kt:(52,65): info: Generated Viper text for genericMethod:
field bf$t: Ref

method f$genericMethod$TF$T$Box$NT$Any(this$dispatch: Ref, x: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$anyType()))
{
  inhale df$isSubtype(df$typeOf(this$dispatch), df$c$Box())
  inhale acc(p$shared(this$dispatch), wildcard)
  inhale df$isSubtype(df$typeOf(x), df$nullable(df$anyType()))
  ret$0 := x
  goto lbl$0
  label lbl$0
}

/generics.kt:(107,116): info: Generated Viper text for createBox:
field bf$t: Ref

method con$NT$Any(p$t: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Box())
  ensures acc(p$shared(ret), wildcard)
  ensures acc(p$unique(ret), write)


method f$createBox$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  var l0$boolBox: Ref
  var l0$b: Ref
  var anon$0: Ref
  var l0$intBox: Ref
  var anon$1: Ref
  l0$boolBox := con$NT$Any(df$boolToRef(true))
  inhale acc(l0$boolBox.bf$t, write)
  anon$0 := l0$boolBox.bf$t
  exhale acc(l0$boolBox.bf$t, write)
  inhale df$isSubtype(df$typeOf(anon$0), df$nullable(df$anyType()))
  l0$b := anon$0
  inhale df$isSubtype(df$typeOf(l0$b), df$boolType())
  l0$intBox := con$NT$Any(df$intToRef(2))
  inhale acc(l0$intBox.bf$t, write)
  anon$1 := l0$intBox.bf$t
  exhale acc(l0$intBox.bf$t, write)
  inhale df$isSubtype(df$typeOf(anon$1), df$nullable(df$anyType()))
  ret$0 := anon$1
  inhale df$isSubtype(df$typeOf(ret$0), df$intType())
  goto lbl$0
  label lbl$0
}

/generics.kt:(227,242): info: Generated Viper text for setGenericField:
field bf$t: Ref

method con$NT$Any(p$t: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Box())
  ensures acc(p$shared(ret), wildcard)
  ensures acc(p$unique(ret), write)


method f$setGenericField$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var l0$box: Ref
  l0$box := con$NT$Any(df$intToRef(3))
  inhale acc(l0$box.bf$t, write)
  l0$box.bf$t := df$intToRef(5)
  exhale acc(l0$box.bf$t, write)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/generics.kt:(293,303): info: Generated Viper text for genericFun:
method f$genericFun$TF$NT$Any(p$t: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$anyType()))
{
  inhale df$isSubtype(df$typeOf(p$t), df$nullable(df$anyType()))
  ret$0 := p$t
  goto lbl$0
  label lbl$0
}

/generics.kt:(322,337): info: Generated Viper text for callGenericFunc:
method f$callGenericFunc$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var l0$x: Ref
  var anon$0: Ref
  anon$0 := f$genericFun$TF$NT$Any(df$intToRef(3))
  l0$x := anon$0
  inhale df$isSubtype(df$typeOf(l0$x), df$intType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method f$genericFun$TF$NT$Any(p$t: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$nullable(df$anyType()))


/generics.kt:(375,395): info: Generated Viper text for genericAsIfCondition:
field bf$t: Ref

method f$genericAsIfCondition$TF$T$Box(box: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  var anon$0: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(box), df$c$Box())
  inhale acc(p$shared(box), wildcard)
  inhale acc(box.bf$t, write)
  anon$1 := box.bf$t
  exhale acc(box.bf$t, write)
  inhale df$isSubtype(df$typeOf(anon$1), df$nullable(df$anyType()))
  anon$0 := anon$1
  inhale df$isSubtype(df$typeOf(anon$0), df$boolType())
  if (df$boolFromRef(anon$0)) {
    ret$0 := df$intToRef(20)
  } else {
    ret$0 := df$intToRef(10)}
  goto lbl$0
  label lbl$0
}
