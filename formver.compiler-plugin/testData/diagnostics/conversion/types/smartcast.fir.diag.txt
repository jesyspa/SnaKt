/smartcast.kt:(23,38): info: Generated Viper text for smartcastReturn:
method f$smartcastReturn$TF$NT$Int(n: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  inhale df$isSubtype(df$typeOf(n), df$nullable(df$intType()))
  if (!(n == df$nullValue())) {
    ret$0 := n
  } else {
    ret$0 := df$intToRef(0)}
  goto lbl$0
  label lbl$0
}

/smartcast.kt:(88,106): info: Generated Viper text for isNullOrEmptyWrong:
method f$isNullOrEmptyWrong$TF$NT$CharSequence(seq: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
{
  inhale df$isSubtype(df$typeOf(seq), df$nullable(df$c$pkg$kotlin$CharSequence()))
  inhale seq != df$nullValue() ==> acc(p$shared(seq), wildcard)
  if (seq == df$nullValue()) {
    var anon$0: Ref
    if (seq != df$nullValue()) {
      var anon$1: Ref
      var anon$2: Ref
      anon$2 := pg$length(seq)
      anon$1 := anon$2
      inhale df$isSubtype(df$typeOf(anon$1), df$intType())
      anon$0 := anon$1
    } else {
      anon$0 := df$nullValue()}
    ret$0 := df$boolToRef(anon$0 == df$intToRef(0))
  } else {
    ret$0 := df$boolToRef(false)}
  goto lbl$0
  label lbl$0
}

method pg$length(this$dispatch: Ref) returns (ret: Ref)
