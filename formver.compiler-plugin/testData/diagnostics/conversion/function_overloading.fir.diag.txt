/function_overloading.kt:(49,52): info: Generated Viper text for baz:
method f$baz$TF$T$Bar$T$Foo(this$dispatch: Ref, f: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(this$dispatch), df$c$Bar())
  inhale acc(p$c$Bar$shared(this$dispatch), wildcard)
  inhale df$isSubtype(df$typeOf(f), df$c$Foo())
  inhale acc(p$c$Foo$shared(f), wildcard)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/function_overloading.kt:(74,77): info: Generated Viper text for baz:
method f$baz$TF$T$Bar$T$Bar(this$dispatch: Ref, b: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(this$dispatch), df$c$Bar())
  inhale acc(p$shared(this$dispatch), wildcard)
  inhale df$isSubtype(df$typeOf(b), df$c$Bar())
  inhale acc(p$shared(b), wildcard)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/function_overloading.kt:(98,107): info: Generated Viper text for fakePrint:
method f$fakePrint$TF$T$Bar(b: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(b), df$c$Bar())
  inhale acc(p$shared(b), wildcard)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/function_overloading.kt:(125,134): info: Generated Viper text for fakePrint:
method f$fakePrint$TF$T$Foo(f: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(f), df$c$Foo())
  inhale acc(p$shared(f), wildcard)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/function_overloading.kt:(152,161): info: Generated Viper text for fakePrint:
method f$fakePrint$TF$T$Int(value: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(value), df$intType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/function_overloading.kt:(183,192): info: Generated Viper text for fakePrint:
method f$fakePrint$TF$T$Boolean(truth: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(truth), df$boolType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/function_overloading.kt:(219,238): info: Generated Viper text for differInNullability:
method f$differInNullability$TF$T$Int(i: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(i), df$intType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/function_overloading.kt:(256,275): info: Generated Viper text for differInNullability:
method f$differInNullability$TF$NT$Int(i: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(i), df$nullable(df$intType()))
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/function_overloading.kt:(295,321): info: Generated Viper text for testGlobalScopeOverloading:
method con$c$Bar$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Bar())
  ensures acc(p$c$Bar$shared(ret), wildcard)
  ensures acc(p$c$Bar$unique(ret), write)


method con$c$Foo$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Foo())
  ensures acc(p$c$Foo$shared(ret), wildcard)
  ensures acc(p$c$Foo$unique(ret), write)


method f$fakePrint$TF$T$Bar(b: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$fakePrint$TF$T$Boolean(truth: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$fakePrint$TF$T$Foo(f: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$fakePrint$TF$T$Int(value: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$testGlobalScopeOverloading$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  var anon$4: Ref
  var anon$5: Ref
  anon$0 := f$fakePrint$TF$T$Int(df$intToRef(42))
  anon$1 := f$fakePrint$TF$T$Boolean(df$boolToRef(true))
  anon$3 := con$c$Foo$()
  anon$2 := f$fakePrint$TF$T$Foo(anon$3)
  anon$5 := con$c$Bar$()
  anon$4 := f$fakePrint$TF$T$Bar(anon$5)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/function_overloading.kt:(413,441): info: Generated Viper text for testClassFunctionOverloading:
method con$c$Bar$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Bar())
  ensures acc(p$c$Bar$shared(ret), wildcard)
  ensures acc(p$c$Bar$unique(ret), write)


method con$c$Foo$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Foo())
  ensures acc(p$c$Foo$shared(ret), wildcard)
  ensures acc(p$c$Foo$unique(ret), write)


method f$baz$TF$T$Bar$T$Bar(this$dispatch: Ref, p$b: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$baz$TF$T$Bar$T$Foo(this$dispatch: Ref, p$f: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$testClassFunctionOverloading$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var l0$b: Ref
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  l0$b := con$c$Bar$()
  anon$1 := con$c$Foo$()
  anon$0 := f$baz$TF$T$Bar$T$Foo(l0$b, anon$1)
  anon$3 := con$c$Bar$()
  anon$2 := f$baz$TF$T$Bar$T$Bar(l0$b, anon$3)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}
