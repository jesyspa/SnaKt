/inline.kt:(230,239): info: Generated Viper text for quadruple:
method f$quadruple$TF$T$Int(p$x: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  var anon$0: Ref
  var ret$1: Ref
  var l1$y: Ref
  var anon$1: Ref
  var ret$2: Ref
  var l2$y: Ref
  inhale df$isSubtype(df$typeOf(p$x), df$intType())
  l1$y := sp$plusInts(p$x, p$x)
  ret$1 := l1$y
  goto lbl$1
  label lbl$1
  anon$0 := ret$1
  l2$y := sp$plusInts(p$x, p$x)
  ret$2 := l2$y
  goto lbl$2
  label lbl$2
  anon$1 := ret$2
  ret$0 := sp$plusInts(anon$0, anon$1)
  goto lbl$0
  label lbl$0
}

/inline.kt:(469,481): info: Generated Viper text for useBranching:
method f$useBranching$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  var anon$2: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$3: Ref
  var ret$2: Ref
  var anon$1: Ref
  anon$0 := df$boolToRef(false)
  if (df$boolFromRef(anon$0)) {
    ret$1 := df$intToRef(1)
    goto lbl$1
  } else {
    ret$1 := df$intToRef(0)
    goto lbl$1
  }
  label lbl$1
  anon$2 := ret$1
  anon$1 := df$boolToRef(true)
  if (df$boolFromRef(anon$1)) {
    ret$2 := df$intToRef(1)
    goto lbl$2
  } else {
    ret$2 := df$intToRef(0)
    goto lbl$2
  }
  label lbl$2
  anon$3 := ret$2
  ret$0 := sp$plusInts(anon$2, anon$3)
  goto lbl$0
  label lbl$0
}
