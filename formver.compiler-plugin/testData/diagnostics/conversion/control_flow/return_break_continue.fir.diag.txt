/return_break_continue.kt:(23,33): info: Generated Viper text for testReturn:
method f$testReturn$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  ret$0 := df$intToRef(0)
  goto lbl$0
  ret$0 := df$intToRef(1)
  goto lbl$0
  label lbl$0
}

/return_break_continue.kt:(76,90): info: Generated Viper text for returnFromLoop:
method f$returnFromLoop$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  var anon$0: Ref
  label lbl$continue$0
  anon$0 := df$boolToRef(true)
  if (df$boolFromRef(anon$0)) {
    ret$0 := df$intToRef(0)
    goto lbl$ret$0
    goto lbl$continue$0
  }
  label lbl$break$0
  ret$0 := df$intToRef(1)
  goto lbl$ret$0
  label lbl$ret$0
}

/return_break_continue.kt:(162,172): info: Generated Viper text for whileBreak:
method f$whileBreak$TF$T$Boolean(b: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  var i: Ref
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(b), df$boolType())
  i := df$intToRef(0)
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(i), df$intType())
    invariant df$isSubtype(df$typeOf(b), df$boolType())
  anon$0 := b
  if (df$boolFromRef(anon$0)) {
    i := df$intToRef(1)
    goto lbl$break$0
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(i), df$intType())
  assert df$isSubtype(df$typeOf(b), df$boolType())
  ret$0 := i
  goto lbl$ret$0
  label lbl$ret$0
}

/return_break_continue.kt:(276,289): info: Generated Viper text for whileContinue:
method f$whileContinue$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var b: Ref
  var anon$0: Ref
  b := df$boolToRef(true)
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(b), df$boolType())
  anon$0 := b
  if (df$boolFromRef(anon$0)) {
    b := df$boolToRef(false)
    goto lbl$continue$0
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(b), df$boolType())
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/return_break_continue.kt:(375,386): info: Generated Viper text for whileNested:
method f$whileNested$TF$T$Boolean(b: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(b), df$boolType())
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(b), df$boolType())
  anon$0 := b
  if (df$boolFromRef(anon$0)) {
    var anon$1: Ref
    var anon$2: Ref
    label lbl$continue$1
      invariant df$isSubtype(df$typeOf(b), df$boolType())
    anon$1 := b
    if (df$boolFromRef(anon$1)) {
      goto lbl$break$1
      goto lbl$continue$1
    }
    label lbl$break$1
    assert df$isSubtype(df$typeOf(b), df$boolType())
    goto lbl$continue$0
    label lbl$continue$2
      invariant df$isSubtype(df$typeOf(b), df$boolType())
    anon$2 := b
    if (df$boolFromRef(anon$2)) {
      goto lbl$continue$2
      goto lbl$continue$2
    }
    label lbl$break$2
    assert df$isSubtype(df$typeOf(b), df$boolType())
    goto lbl$break$0
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(b), df$boolType())
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/return_break_continue.kt:(556,569): info: Generated Viper text for labelledBreak:
method f$labelledBreak$TF$T$Boolean(b: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(b), df$boolType())
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(b), df$boolType())
  anon$0 := b
  if (df$boolFromRef(anon$0)) {
    var anon$1: Ref
    label lbl$continue$1
      invariant df$isSubtype(df$typeOf(b), df$boolType())
    anon$1 := b
    if (df$boolFromRef(anon$1)) {
      goto lbl$break$0
      goto lbl$break$1
      goto lbl$break$1
      goto lbl$continue$1
    }
    label lbl$break$1
    assert df$isSubtype(df$typeOf(b), df$boolType())
    goto lbl$break$0
    goto lbl$break$0
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(b), df$boolType())
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/return_break_continue.kt:(754,770): info: Generated Viper text for labelledContinue:
method f$labelledContinue$TF$T$Boolean(b: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(b), df$boolType())
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(b), df$boolType())
  anon$0 := b
  if (df$boolFromRef(anon$0)) {
    var anon$1: Ref
    label lbl$continue$1
      invariant df$isSubtype(df$typeOf(b), df$boolType())
    anon$1 := b
    if (df$boolFromRef(anon$1)) {
      goto lbl$continue$0
      goto lbl$continue$1
      goto lbl$continue$1
      goto lbl$continue$1
    }
    label lbl$break$1
    assert df$isSubtype(df$typeOf(b), df$boolType())
    goto lbl$continue$0
    goto lbl$continue$0
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(b), df$boolType())
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/return_break_continue.kt:(970,992): info: Generated Viper text for labelledWhileShadowing:
method f$labelledWhileShadowing$TF$T$Boolean(b: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(b), df$boolType())
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(b), df$boolType())
  anon$0 := b
  if (df$boolFromRef(anon$0)) {
    var anon$1: Ref
    var anon$2: Ref
    label lbl$continue$1
      invariant df$isSubtype(df$typeOf(b), df$boolType())
    anon$1 := b
    if (df$boolFromRef(anon$1)) {
      goto lbl$break$1
      goto lbl$continue$1
      goto lbl$continue$1
    }
    label lbl$break$1
    assert df$isSubtype(df$typeOf(b), df$boolType())
    label lbl$continue$2
      invariant df$isSubtype(df$typeOf(b), df$boolType())
    anon$2 := b
    if (df$boolFromRef(anon$2)) {
      goto lbl$break$2
      goto lbl$continue$2
      goto lbl$continue$2
    }
    label lbl$break$2
    assert df$isSubtype(df$typeOf(b), df$boolType())
    goto lbl$break$0
    goto lbl$continue$0
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(b), df$boolType())
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}
