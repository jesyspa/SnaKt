/loop_invariants.kt:(146,168): info: Generated Viper text for dynamicLambdaInvariant:
method f_dynamicLambdaInvariant_TF_TF_(f: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(f), df_functionType())
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(f), df_functionType())
  anon_0 := f_returnsBoolean_TF_()
  if (df_boolFromRef(anon_0)) {
    var anon_1: Ref
    inhale df_isSubtype(df_typeOf(anon_1), df_intType())
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(f), df_functionType())
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method f_returnsBoolean_TF_() returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_boolType())


/loop_invariants.kt:(241,259): info: Generated Viper text for functionAssignment:
method f_functionAssignment_TF_TF_(f: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var g: Ref
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(f), df_functionType())
  g := f
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(g), df_functionType())
    invariant df_isSubtype(df_typeOf(f), df_functionType())
  anon_0 := f_returnsBoolean_TF_()
  if (df_boolFromRef(anon_0)) {
    var anon_1: Ref
    inhale df_isSubtype(df_typeOf(anon_1), df_intType())
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(g), df_functionType())
  assert df_isSubtype(df_typeOf(f), df_functionType())
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method f_returnsBoolean_TF_() returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_boolType())


/loop_invariants.kt:(346,375): info: Generated Viper text for conditionalFunctionAssignment:
method f_conditionalFunctionAssignment_TF_T_Boolean_TF__TF_(b: Ref, f: Ref,
  h: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var g: Ref
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  inhale df_isSubtype(df_typeOf(f), df_functionType())
  inhale df_isSubtype(df_typeOf(h), df_functionType())
  if (df_boolFromRef(b)) {
    g := f
  } else {
    g := h}
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(g), df_functionType())
    invariant df_isSubtype(df_typeOf(b), df_boolType())
    invariant df_isSubtype(df_typeOf(f), df_functionType())
    invariant df_isSubtype(df_typeOf(h), df_functionType())
  anon_0 := f_returnsBoolean_TF_()
  if (df_boolFromRef(anon_0)) {
    var anon_1: Ref
    inhale df_isSubtype(df_typeOf(anon_1), df_intType())
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(g), df_functionType())
  assert df_isSubtype(df_typeOf(b), df_boolType())
  assert df_isSubtype(df_typeOf(f), df_functionType())
  assert df_isSubtype(df_typeOf(h), df_functionType())
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method f_returnsBoolean_TF_() returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_boolType())
