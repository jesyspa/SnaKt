/loop_invariants.kt:(146,168): info: Generated Viper text for dynamicLambdaInvariant:
method f$dynamicLambdaInvariant$TF$TF$(f: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(f), df$functionType())
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(f), df$functionType())
  anon$0 := f$returnsBoolean$TF$()
  if (df$boolFromRef(anon$0)) {
    var anon$1: Ref
    inhale df$isSubtype(df$typeOf(anon$1), df$intType())
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(f), df$functionType())
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method f$returnsBoolean$TF$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$boolType())


/loop_invariants.kt:(241,259): info: Generated Viper text for functionAssignment:
method f$functionAssignment$TF$TF$(f: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var g: Ref
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(f), df$functionType())
  g := f
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(g), df$functionType())
    invariant df$isSubtype(df$typeOf(f), df$functionType())
  anon$0 := f$returnsBoolean$TF$()
  if (df$boolFromRef(anon$0)) {
    var anon$1: Ref
    inhale df$isSubtype(df$typeOf(anon$1), df$intType())
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(g), df$functionType())
  assert df$isSubtype(df$typeOf(f), df$functionType())
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method f$returnsBoolean$TF$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$boolType())


/loop_invariants.kt:(346,375): info: Generated Viper text for conditionalFunctionAssignment:
method f$conditionalFunctionAssignment$TF$T$Boolean$TF$$TF$(b: Ref, f: Ref,
  h: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var g: Ref
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(b), df$boolType())
  inhale df$isSubtype(df$typeOf(f), df$functionType())
  inhale df$isSubtype(df$typeOf(h), df$functionType())
  if (df$boolFromRef(b)) {
    g := f
  } else {
    g := h}
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(g), df$functionType())
    invariant df$isSubtype(df$typeOf(b), df$boolType())
    invariant df$isSubtype(df$typeOf(f), df$functionType())
    invariant df$isSubtype(df$typeOf(h), df$functionType())
  anon$0 := f$returnsBoolean$TF$()
  if (df$boolFromRef(anon$0)) {
    var anon$1: Ref
    inhale df$isSubtype(df$typeOf(anon$1), df$intType())
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(g), df$functionType())
  assert df$isSubtype(df$typeOf(b), df$boolType())
  assert df$isSubtype(df$typeOf(f), df$functionType())
  assert df$isSubtype(df$typeOf(h), df$functionType())
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method f$returnsBoolean$TF$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$boolType())
