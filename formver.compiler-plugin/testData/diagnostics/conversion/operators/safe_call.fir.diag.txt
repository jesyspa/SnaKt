/safe_call.kt:(142,154): info: Generated Viper text for testSafeCall:
field bf$x: Ref

method f$f$TF$T$Foo(this$dispatch: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$testSafeCall$TF$NT$Foo(foo: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$unitType()))
{
  inhale df$isSubtype(df$typeOf(foo), df$nullable(df$c$Foo()))
  inhale foo != df$nullValue() ==> acc(p$shared(foo), wildcard)
  if (foo != df$nullValue()) {
    var anon$0: Ref
    anon$0 := f$f$TF$T$Foo(foo)
    ret$0 := anon$0
  } else {
    ret$0 := df$nullValue()}
  goto lbl$0
  label lbl$0
}

/safe_call.kt:(217,240): info: Generated Viper text for testSafeCallNonNullable:
field bf$x: Ref

method f$f$TF$T$Foo(this$dispatch: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$testSafeCallNonNullable$TF$T$Foo(foo: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$unitType()))
{
  inhale df$isSubtype(df$typeOf(foo), df$c$Foo())
  inhale acc(p$shared(foo), wildcard)
  if (foo != df$nullValue()) {
    var anon$0: Ref
    anon$0 := f$f$TF$T$Foo(foo)
    ret$0 := anon$0
  } else {
    ret$0 := df$nullValue()}
  goto lbl$0
  label lbl$0
}

/safe_call.kt:(267,287): info: Generated Viper text for testSafeCallProperty:
field bf$x: Ref

method f$testSafeCallProperty$TF$NT$Foo(foo: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$intType()))
{
  inhale df$isSubtype(df$typeOf(foo), df$nullable(df$c$Foo()))
  inhale foo != df$nullValue() ==> acc(p$shared(foo), wildcard)
  if (foo != df$nullValue()) {
    var anon$0: Ref
    unfold acc(p$shared(foo), wildcard)
    anon$0 := foo.bf$x
    ret$0 := anon$0
  } else {
    ret$0 := df$nullValue()}
  goto lbl$0
  label lbl$0
}

/safe_call.kt:(354,385): info: Generated Viper text for testSafeCallPropertyNonNullable:
field bf$x: Ref

method f$testSafeCallPropertyNonNullable$TF$T$Foo(foo: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$intType()))
{
  inhale df$isSubtype(df$typeOf(foo), df$c$Foo())
  inhale acc(p$shared(foo), wildcard)
  if (foo != df$nullValue()) {
    var anon$0: Ref
    unfold acc(p$shared(foo), wildcard)
    anon$0 := foo.bf$x
    ret$0 := anon$0
  } else {
    ret$0 := df$nullValue()}
  goto lbl$0
  label lbl$0
}

/safe_call.kt:(493,506): info: Generated Viper text for safeCallChain:
field bf$v: Ref

method f$nullable$TF$T$Rec(this$dispatch: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$nullable(df$c$Rec()))
  ensures ret != df$nullValue() ==> acc(p$shared(ret), wildcard)


method f$safeCallChain$TF$NT$Rec(rec: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$intType()))
{
  var anon$0: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(rec), df$nullable(df$c$Rec()))
  inhale rec != df$nullValue() ==> acc(p$shared(rec), wildcard)
  if (rec != df$nullValue()) {
    anon$1 := f$nullable$TF$T$Rec(rec)
  } else {
    anon$1 := df$nullValue()}
  if (anon$1 != df$nullValue()) {
    anon$0 := f$nullable$TF$T$Rec(anon$1)
  } else {
    anon$0 := df$nullValue()}
  if (anon$0 != df$nullValue()) {
    var anon$2: Ref
    unfold acc(p$shared(anon$0), wildcard)
    anon$2 := anon$0.bf$v
    ret$0 := anon$2
  } else {
    ret$0 := df$nullValue()}
  goto lbl$0
  label lbl$0
}
