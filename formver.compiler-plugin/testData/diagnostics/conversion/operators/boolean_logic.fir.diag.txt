/boolean_logic.kt:(23,31): info: Generated Viper text for negation:
method f$negation$TF$T$Boolean(x: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
{
  inhale df$isSubtype(df$typeOf(x), df$boolType())
  ret$0 := sp$notBool(x)
  goto lbl$0
  label lbl$0
}

/boolean_logic.kt:(75,86): info: Generated Viper text for conjunction:
method f$conjunction$TF$T$Boolean$T$Boolean(x: Ref, y: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
{
  inhale df$isSubtype(df$typeOf(x), df$boolType())
  inhale df$isSubtype(df$typeOf(y), df$boolType())
  if (df$boolFromRef(x)) {
    ret$0 := y
  } else {
    ret$0 := df$boolToRef(false)}
  goto lbl$0
  label lbl$0
}

/boolean_logic.kt:(146,168): info: Generated Viper text for conjunctionSideEffects:
method f$conjunctionSideEffects$TF$T$Boolean$T$Boolean(x: Ref, y: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(x), df$boolType())
  inhale df$isSubtype(df$typeOf(y), df$boolType())
  anon$0 := f$negation$TF$T$Boolean(x)
  if (df$boolFromRef(anon$0)) {
    ret$0 := f$negation$TF$T$Boolean(y)
  } else {
    ret$0 := df$boolToRef(false)}
  goto lbl$0
  label lbl$0
}

method f$negation$TF$T$Boolean(x: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$boolType())


/boolean_logic.kt:(341,352): info: Generated Viper text for disjunction:
method f$disjunction$TF$T$Boolean$T$Boolean(x: Ref, y: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
{
  inhale df$isSubtype(df$typeOf(x), df$boolType())
  inhale df$isSubtype(df$typeOf(y), df$boolType())
  if (df$boolFromRef(x)) {
    ret$0 := df$boolToRef(true)
  } else {
    ret$0 := y}
  goto lbl$0
  label lbl$0
}
