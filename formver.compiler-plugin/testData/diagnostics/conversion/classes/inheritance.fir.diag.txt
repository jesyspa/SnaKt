/inheritance.kt:(93,97): info: Generated Viper text for getY:
field bf$b: Ref

field bf$x: Ref

field bf$y: Ref

method f$getY$TF$T$Foo(this$dispatch: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  inhale df$isSubtype(df$typeOf(this$dispatch), df$c$Foo())
  inhale acc(p$shared(this$dispatch), wildcard)
  unfold acc(p$shared(this$dispatch), wildcard)
  ret$0 := this$dispatch.bf$y
  goto lbl$0
  label lbl$0
}

/inheritance.kt:(190,193): info: Generated Viper text for sum:
field bf$b: Ref

field bf$x: Ref

field bf$y: Ref

field bf$z: Ref

method f$sum$TF$T$Bar(this$dispatch: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  var anon$0: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(this$dispatch), df$c$Bar())
  inhale acc(p$c$Bar$shared(this$dispatch), wildcard)
  unfold acc(p$c$Bar$shared(this$dispatch), wildcard)
  unfold acc(p$c$Foo$shared(this$dispatch), wildcard)
  anon$0 := this$dispatch.bf$x
  unfold acc(p$c$Bar$shared(this$dispatch), wildcard)
  anon$1 := this$dispatch.bf$z
  ret$0 := sp$plusInts(anon$0, anon$1)
  goto lbl$0
  label lbl$0
}

/inheritance.kt:(236,251): info: Generated Viper text for callSuperMethod:
field bf$b: Ref

field bf$x: Ref

field bf$y: Ref

field bf$z: Ref

method f$callSuperMethod$TF$T$Bar(bar: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  inhale df$isSubtype(df$typeOf(bar), df$c$Bar())
  inhale acc(p$c$Bar$shared(bar), wildcard)
  ret$0 := f$getY$TF$T$Foo(bar)
  goto lbl$0
  label lbl$0
}

method f$getY$TF$T$Foo(this$dispatch: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$intType())


/inheritance.kt:(298,314): info: Generated Viper text for accessSuperField:
field bf$b: Ref

field bf$x: Ref

field bf$y: Ref

field bf$z: Ref

method f$accessSuperField$TF$T$Bar(bar: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
{
  inhale df$isSubtype(df$typeOf(bar), df$c$Bar())
  inhale acc(p$c$Bar$shared(bar), wildcard)
  inhale acc(bar.bf$b, write)
  ret$0 := bar.bf$b
  exhale acc(bar.bf$b, write)
  inhale df$isSubtype(df$typeOf(ret$0), df$boolType())
  goto lbl$0
  label lbl$0
}

/inheritance.kt:(360,374): info: Generated Viper text for accessNewField:
field bf$b: Ref

field bf$x: Ref

field bf$y: Ref

field bf$z: Ref

method f$accessNewField$TF$T$Bar(bar: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  inhale df$isSubtype(df$typeOf(bar), df$c$Bar())
  inhale acc(p$c$Bar$shared(bar), wildcard)
  unfold acc(p$c$Bar$shared(bar), wildcard)
  ret$0 := bar.bf$z
  goto lbl$0
  label lbl$0
}

/inheritance.kt:(416,429): info: Generated Viper text for callNewMethod:
field bf$b: Ref

field bf$x: Ref

field bf$y: Ref

field bf$z: Ref

method f$callNewMethod$TF$T$Bar(bar: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  inhale df$isSubtype(df$typeOf(bar), df$c$Bar())
  inhale acc(p$c$Bar$shared(bar), wildcard)
  ret$0 := f$sum$TF$T$Bar(bar)
  goto lbl$0
  label lbl$0
}

method f$sum$TF$T$Bar(this$dispatch: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$intType())


/inheritance.kt:(475,488): info: Generated Viper text for setSuperField:
field bf$b: Ref

field bf$x: Ref

field bf$y: Ref

field bf$z: Ref

method f$setSuperField$TF$T$Bar(bar: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(bar), df$c$Bar())
  inhale acc(p$c$Bar$shared(bar), wildcard)
  inhale acc(bar.bf$b, write)
  bar.bf$b := df$boolToRef(true)
  exhale acc(bar.bf$b, write)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/inheritance.kt:(525,546): info: Generated Viper text for accessSuperSuperField:
field bf$b: Ref

field bf$x: Ref

field bf$y: Ref

field bf$z: Ref

method f$accessSuperSuperField$TF$T$Baz(baz: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  inhale df$isSubtype(df$typeOf(baz), df$c$Baz())
  inhale acc(p$c$Baz$shared(baz), wildcard)
  unfold acc(p$c$Baz$shared(baz), wildcard)
  unfold acc(p$c$Bar$shared(baz), wildcard)
  unfold acc(p$c$Foo$shared(baz), wildcard)
  ret$0 := baz.bf$x
  goto lbl$0
  label lbl$0
}
