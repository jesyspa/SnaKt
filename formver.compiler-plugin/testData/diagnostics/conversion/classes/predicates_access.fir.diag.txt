/predicates_access.kt:(249,272): info: Generated Viper text for accessSuperTypeProperty:
field bf_a: Ref

field bf_b: Ref

field bf_x: Ref

field bf_y: Ref

predicate p_c_A_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_A_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_B_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_b, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType()) &&
  acc(p_c_A_shared(this$dispatch), wildcard)
}

predicate p_c_B_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_b, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType()) &&
  acc(p_c_A_unique(this$dispatch), write)
}

predicate p_c_C_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_x, wildcard) &&
  acc(p_c_A_shared(this$dispatch.bf_x), wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_x), df_c_A()) &&
  acc(p_c_D_shared(this$dispatch), wildcard) &&
  acc(p_c_B_shared(this$dispatch), wildcard)
}

predicate p_c_C_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_x, wildcard) &&
  acc(p_c_A_shared(this$dispatch.bf_x), wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_x), df_c_A()) &&
  acc(this$dispatch.bf_y, write) &&
  acc(p_c_A_shared(this$dispatch.bf_y), wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_y), df_c_A()) &&
  acc(p_c_D_unique(this$dispatch), write) &&
  acc(p_c_B_unique(this$dispatch), write)
}

predicate p_c_D_shared(this$dispatch: Ref) {
  true
}

predicate p_c_D_unique(this$dispatch: Ref) {
  true
}

method f_accessSuperTypeProperty_TF_T_C(c: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var temp: Ref
  inhale df_isSubtype(df_typeOf(c), df_c_C())
  inhale acc(p_c_C_shared(c), wildcard)
  unfold acc(p_c_C_shared(c), wildcard)
  unfold acc(p_c_B_shared(c), wildcard)
  unfold acc(p_c_A_shared(c), wildcard)
  temp := c.bf_a
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_d(this$dispatch: Ref) returns (ret: Ref)


/predicates_access.kt:(306,318): info: Generated Viper text for accessNested:
field bf_a: Ref

field bf_b: Ref

field bf_x: Ref

field bf_y: Ref

predicate p_c_A_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_A_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_B_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_b, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType()) &&
  acc(p_c_A_shared(this$dispatch), wildcard)
}

predicate p_c_B_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_b, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType()) &&
  acc(p_c_A_unique(this$dispatch), write)
}

predicate p_c_C_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_x, wildcard) &&
  acc(p_c_A_shared(this$dispatch.bf_x), wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_x), df_c_A()) &&
  acc(p_c_D_shared(this$dispatch), wildcard) &&
  acc(p_c_B_shared(this$dispatch), wildcard)
}

predicate p_c_C_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_x, wildcard) &&
  acc(p_c_A_shared(this$dispatch.bf_x), wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_x), df_c_A()) &&
  acc(this$dispatch.bf_y, write) &&
  acc(p_c_A_shared(this$dispatch.bf_y), wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_y), df_c_A()) &&
  acc(p_c_D_unique(this$dispatch), write) &&
  acc(p_c_B_unique(this$dispatch), write)
}

predicate p_c_D_shared(this$dispatch: Ref) {
  true
}

predicate p_c_D_unique(this$dispatch: Ref) {
  true
}

method f_accessNested_TF_T_C(c: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var temp: Ref
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(c), df_c_C())
  inhale acc(p_c_C_shared(c), wildcard)
  unfold acc(p_c_C_shared(c), wildcard)
  anon_0 := c.bf_x
  unfold acc(p_c_A_shared(anon_0), wildcard)
  temp := anon_0.bf_a
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_d(this$dispatch: Ref) returns (ret: Ref)


/predicates_access.kt:(354,368): info: Generated Viper text for accessNullable:
field bf_a: Ref

predicate p_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

method f_accessNullable_TF_NT_A(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var n: Ref
  inhale df_isSubtype(df_typeOf(x), df_nullable(df_c_A()))
  inhale x != df_nullValue() ==> acc(p_shared(x), wildcard)
  if (!(x == df_nullValue())) {
    unfold acc(p_shared(x), wildcard)
    n := x.bf_a
  }
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/predicates_access.kt:(442,452): info: Generated Viper text for accessCast:
field bf_a: Ref

field bf_b: Ref

predicate p_c_A_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_A_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_B_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_b, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType()) &&
  acc(p_c_A_shared(this$dispatch), wildcard)
}

predicate p_c_B_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_b, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType()) &&
  acc(p_c_A_unique(this$dispatch), write)
}

method f_accessCast_TF_T_A(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var n: Ref
  inhale df_isSubtype(df_typeOf(x), df_c_A())
  inhale acc(p_c_A_shared(x), wildcard)
  inhale df_isSubtype(df_typeOf(x), df_c_B())
  inhale acc(p_c_B_shared(x), wildcard)
  unfold acc(p_c_B_shared(x), wildcard)
  n := x.bf_b
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/predicates_access.kt:(501,515): info: Generated Viper text for accessSafeCast:
field bf_a: Ref

field bf_b: Ref

predicate p_c_A_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_A_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_B_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_b, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType()) &&
  acc(p_c_A_shared(this$dispatch), wildcard)
}

predicate p_c_B_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_b, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType()) &&
  acc(p_c_A_unique(this$dispatch), write)
}

method f_accessSafeCast_TF_T_A(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var n: Ref
  var y: Ref
  inhale df_isSubtype(df_typeOf(x), df_c_A())
  inhale acc(p_c_A_shared(x), wildcard)
  n := df_intToRef(0)
  if (df_isSubtype(df_typeOf(x), df_c_B())) {
    y := x
  } else {
    y := df_nullValue()}
  inhale df_isSubtype(df_typeOf(y), df_nullable(df_c_B()))
  inhale y != df_nullValue() ==> acc(p_c_B_shared(y), wildcard)
  if (!(y == df_nullValue())) {
    unfold acc(p_c_B_shared(y), wildcard)
    n := y.bf_b
  }
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/predicates_access.kt:(612,627): info: Generated Viper text for accessSmartCast:
field bf_a: Ref

field bf_b: Ref

predicate p_c_A_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_A_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_B_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_b, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType()) &&
  acc(p_c_A_shared(this$dispatch), wildcard)
}

predicate p_c_B_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_b, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType()) &&
  acc(p_c_A_unique(this$dispatch), write)
}

method f_accessSmartCast_TF_T_A(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var n: Ref
  inhale df_isSubtype(df_typeOf(x), df_c_A())
  inhale acc(p_c_A_shared(x), wildcard)
  n := df_intToRef(0)
  if (df_isSubtype(df_typeOf(x), df_c_B())) {
    inhale acc(p_c_B_shared(x), wildcard)
    unfold acc(p_c_B_shared(x), wildcard)
    n := x.bf_b
  }
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
