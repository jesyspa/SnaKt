/predicates_access.kt:(249,272): info: Generated Viper text for accessSuperTypeProperty:
field bf$a: Ref

field bf$b: Ref

field bf$x: Ref

field bf$y: Ref

predicate p$c$A$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$A$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$B$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$b, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType()) &&
  acc(p$c$A$shared(this$dispatch), wildcard)
}

predicate p$c$B$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$b, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType()) &&
  acc(p$c$A$unique(this$dispatch), write)
}

predicate p$c$C$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$x, wildcard) &&
  acc(p$c$A$shared(this$dispatch.bf$x), wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$x), df$c$A()) &&
  acc(p$c$D$shared(this$dispatch), wildcard) &&
  acc(p$c$B$shared(this$dispatch), wildcard)
}

predicate p$c$C$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$x, wildcard) &&
  acc(p$c$A$shared(this$dispatch.bf$x), wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$x), df$c$A()) &&
  acc(this$dispatch.bf$y, write) &&
  acc(p$c$A$shared(this$dispatch.bf$y), wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$y), df$c$A()) &&
  acc(p$c$D$unique(this$dispatch), write) &&
  acc(p$c$B$unique(this$dispatch), write)
}

predicate p$c$D$shared(this$dispatch: Ref) {
  true
}

predicate p$c$D$unique(this$dispatch: Ref) {
  true
}

method f$accessSuperTypeProperty$TF$T$C(c: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var temp: Ref
  inhale df$isSubtype(df$typeOf(c), df$c$C())
  inhale acc(p$c$C$shared(c), wildcard)
  unfold acc(p$c$C$shared(c), wildcard)
  unfold acc(p$c$B$shared(c), wildcard)
  unfold acc(p$c$A$shared(c), wildcard)
  temp := c.bf$a
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$d(this$dispatch: Ref) returns (ret: Ref)


/predicates_access.kt:(306,318): info: Generated Viper text for accessNested:
field bf$a: Ref

field bf$b: Ref

field bf$x: Ref

field bf$y: Ref

predicate p$c$A$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$A$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$B$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$b, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType()) &&
  acc(p$c$A$shared(this$dispatch), wildcard)
}

predicate p$c$B$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$b, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType()) &&
  acc(p$c$A$unique(this$dispatch), write)
}

predicate p$c$C$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$x, wildcard) &&
  acc(p$c$A$shared(this$dispatch.bf$x), wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$x), df$c$A()) &&
  acc(p$c$D$shared(this$dispatch), wildcard) &&
  acc(p$c$B$shared(this$dispatch), wildcard)
}

predicate p$c$C$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$x, wildcard) &&
  acc(p$c$A$shared(this$dispatch.bf$x), wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$x), df$c$A()) &&
  acc(this$dispatch.bf$y, write) &&
  acc(p$c$A$shared(this$dispatch.bf$y), wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$y), df$c$A()) &&
  acc(p$c$D$unique(this$dispatch), write) &&
  acc(p$c$B$unique(this$dispatch), write)
}

predicate p$c$D$shared(this$dispatch: Ref) {
  true
}

predicate p$c$D$unique(this$dispatch: Ref) {
  true
}

method f$accessNested$TF$T$C(c: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var temp: Ref
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(c), df$c$C())
  inhale acc(p$c$C$shared(c), wildcard)
  unfold acc(p$c$C$shared(c), wildcard)
  anon$0 := c.bf$x
  unfold acc(p$c$A$shared(anon$0), wildcard)
  temp := anon$0.bf$a
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$d(this$dispatch: Ref) returns (ret: Ref)


/predicates_access.kt:(354,368): info: Generated Viper text for accessNullable:
field bf$a: Ref

predicate p$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

method f$accessNullable$TF$NT$A(x: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var n: Ref
  inhale df$isSubtype(df$typeOf(x), df$nullable(df$c$A()))
  inhale x != df$nullValue() ==> acc(p$shared(x), wildcard)
  if (!(x == df$nullValue())) {
    unfold acc(p$shared(x), wildcard)
    n := x.bf$a
  }
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/predicates_access.kt:(442,452): info: Generated Viper text for accessCast:
field bf$a: Ref

field bf$b: Ref

predicate p$c$A$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$A$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$B$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$b, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType()) &&
  acc(p$c$A$shared(this$dispatch), wildcard)
}

predicate p$c$B$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$b, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType()) &&
  acc(p$c$A$unique(this$dispatch), write)
}

method f$accessCast$TF$T$A(x: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var n: Ref
  inhale df$isSubtype(df$typeOf(x), df$c$A())
  inhale acc(p$c$A$shared(x), wildcard)
  inhale df$isSubtype(df$typeOf(x), df$c$B())
  inhale acc(p$c$B$shared(x), wildcard)
  unfold acc(p$c$B$shared(x), wildcard)
  n := x.bf$b
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/predicates_access.kt:(501,515): info: Generated Viper text for accessSafeCast:
field bf$a: Ref

field bf$b: Ref

predicate p$c$A$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$A$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$B$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$b, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType()) &&
  acc(p$c$A$shared(this$dispatch), wildcard)
}

predicate p$c$B$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$b, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType()) &&
  acc(p$c$A$unique(this$dispatch), write)
}

method f$accessSafeCast$TF$T$A(x: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var n: Ref
  var y: Ref
  inhale df$isSubtype(df$typeOf(x), df$c$A())
  inhale acc(p$c$A$shared(x), wildcard)
  n := df$intToRef(0)
  if (df$isSubtype(df$typeOf(x), df$c$B())) {
    y := x
  } else {
    y := df$nullValue()}
  inhale df$isSubtype(df$typeOf(y), df$nullable(df$c$B()))
  inhale y != df$nullValue() ==> acc(p$c$B$shared(y), wildcard)
  if (!(y == df$nullValue())) {
    unfold acc(p$c$B$shared(y), wildcard)
    n := y.bf$b
  }
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/predicates_access.kt:(612,627): info: Generated Viper text for accessSmartCast:
field bf$a: Ref

field bf$b: Ref

predicate p$c$A$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$A$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$B$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$b, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType()) &&
  acc(p$c$A$shared(this$dispatch), wildcard)
}

predicate p$c$B$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$b, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType()) &&
  acc(p$c$A$unique(this$dispatch), write)
}

method f$accessSmartCast$TF$T$A(x: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var n: Ref
  inhale df$isSubtype(df$typeOf(x), df$c$A())
  inhale acc(p$c$A$shared(x), wildcard)
  n := df$intToRef(0)
  if (df$isSubtype(df$typeOf(x), df$c$B())) {
    inhale acc(p$c$B$shared(x), wildcard)
    unfold acc(p$c$B$shared(x), wildcard)
    n := x.bf$b
  }
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}
