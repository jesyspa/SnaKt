/multiple_interfaces.kt:(162,173): info: Generated Viper text for testDiamond:
method con_() returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_D())
  ensures acc(p_c_D_shared(ret), wildcard)
  ensures acc(p_c_D_unique(ret), write)


method f_testDiamond_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var anon_0: Ref
  var anon_1: Ref
  anon_1 := con_()
  anon_0 := pg_public_field(anon_1)
  ret_0 := anon_0
  inhale df_isSubtype(df_typeOf(ret_0), df_intType())
  goto lbl_0
  label lbl_0
}

method pg_public_field(this$dispatch: Ref) returns (ret: Ref)


/multiple_interfaces.kt:(405,415): info: Generated Viper text for testVarVal:
method con_c_G_() returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_G())
  ensures acc(p_c_G_shared(ret), wildcard)
  ensures acc(p_c_G_unique(ret), write)


method con_c_I_() returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_I())
  ensures acc(p_c_I_shared(ret), wildcard)
  ensures acc(p_c_I_unique(ret), write)


method f_testVarVal_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var g: Ref
  var anon_0: Ref
  var anon_1: Ref
  var anon_2: Ref
  var i: Ref
  var anon_3: Ref
  var anon_4: Ref
  var anon_5: Ref
  g := con_c_G_()
  anon_1 := pg_public_field(g)
  anon_0 := anon_1
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  anon_2 := ps_public_field(g, df_intToRef(1))
  i := con_c_I_()
  anon_4 := pg_public_field(i)
  anon_3 := anon_4
  inhale df_isSubtype(df_typeOf(anon_3), df_intType())
  anon_5 := ps_public_field(i, df_intToRef(1))
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_public_field(this$dispatch: Ref) returns (ret: Ref)


method ps_public_field(this$dispatch: Ref, anon_0: Ref) returns (ret: Ref)
