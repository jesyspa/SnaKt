/field_getters.kt:(70,94): info: Generated Viper text for testPrimitiveFieldGetter:
field bf$a: Ref

field bf$b: Ref

method f$testPrimitiveFieldGetter$TF$T$PrimitiveFields(pf: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var a: Ref
  var b: Ref
  inhale df$isSubtype(df$typeOf(pf), df$c$PrimitiveFields())
  inhale acc(p$shared(pf), wildcard)
  unfold acc(p$shared(pf), wildcard)
  a := pf.bf$a
  inhale acc(pf.bf$b, write)
  b := pf.bf$b
  exhale acc(pf.bf$b, write)
  inhale df$isSubtype(df$typeOf(b), df$intType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/field_getters.kt:(230,254): info: Generated Viper text for testReferenceFieldGetter:
field bf$a: Ref

field bf$b: Ref

field bf$f: Ref

field bf$g: Ref

method f$testReferenceFieldGetter$TF$T$ReferenceFields(rf: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var f: Ref
  var g: Ref
  var fa: Ref
  var fb: Ref
  var ga: Ref
  var gb: Ref
  inhale df$isSubtype(df$typeOf(rf), df$c$ReferenceFields())
  inhale acc(p$c$ReferenceFields$shared(rf), wildcard)
  unfold acc(p$c$ReferenceFields$shared(rf), wildcard)
  f := rf.bf$f
  inhale acc(rf.bf$g, write)
  g := rf.bf$g
  exhale acc(rf.bf$g, write)
  inhale df$isSubtype(df$typeOf(g), df$c$PrimitiveFields())
  inhale acc(p$c$PrimitiveFields$shared(g), wildcard)
  unfold acc(p$c$PrimitiveFields$shared(f), wildcard)
  fa := f.bf$a
  inhale acc(f.bf$b, write)
  fb := f.bf$b
  exhale acc(f.bf$b, write)
  inhale df$isSubtype(df$typeOf(fb), df$intType())
  unfold acc(p$c$PrimitiveFields$shared(g), wildcard)
  ga := g.bf$a
  inhale acc(g.bf$b, write)
  gb := g.bf$b
  exhale acc(g.bf$b, write)
  inhale df$isSubtype(df$typeOf(gb), df$intType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/field_getters.kt:(387,411): info: Generated Viper text for testCascadingFieldGetter:
field bf$a: Ref

field bf$b: Ref

field bf$f: Ref

field bf$g: Ref

method f$testCascadingFieldGetter$TF$T$ReferenceFields(rf: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var fa: Ref
  var anon$0: Ref
  var fb: Ref
  var anon$1: Ref
  var ga: Ref
  var anon$2: Ref
  var gb: Ref
  var anon$3: Ref
  inhale df$isSubtype(df$typeOf(rf), df$c$ReferenceFields())
  inhale acc(p$c$ReferenceFields$shared(rf), wildcard)
  unfold acc(p$c$ReferenceFields$shared(rf), wildcard)
  anon$0 := rf.bf$f
  unfold acc(p$c$PrimitiveFields$shared(anon$0), wildcard)
  fa := anon$0.bf$a
  unfold acc(p$c$ReferenceFields$shared(rf), wildcard)
  anon$1 := rf.bf$f
  inhale acc(anon$1.bf$b, write)
  fb := anon$1.bf$b
  exhale acc(anon$1.bf$b, write)
  inhale df$isSubtype(df$typeOf(fb), df$intType())
  inhale acc(rf.bf$g, write)
  anon$2 := rf.bf$g
  exhale acc(rf.bf$g, write)
  inhale df$isSubtype(df$typeOf(anon$2), df$c$PrimitiveFields())
  inhale acc(p$c$PrimitiveFields$shared(anon$2), wildcard)
  unfold acc(p$c$PrimitiveFields$shared(anon$2), wildcard)
  ga := anon$2.bf$a
  inhale acc(rf.bf$g, write)
  anon$3 := rf.bf$g
  exhale acc(rf.bf$g, write)
  inhale df$isSubtype(df$typeOf(anon$3), df$c$PrimitiveFields())
  inhale acc(p$c$PrimitiveFields$shared(anon$3), wildcard)
  inhale acc(anon$3.bf$b, write)
  gb := anon$3.bf$b
  exhale acc(anon$3.bf$b, write)
  inhale df$isSubtype(df$typeOf(gb), df$intType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}
