/interface.kt:(84,98): info: Generated Viper text for testProperties:
method f_testProperties_TF_T_Foo(foo: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  var x: Ref
  var anon_1: Ref
  var anon_2: Ref
  var anon_3: Ref
  var anon_4: Ref
  inhale df_isSubtype(df_typeOf(foo), df_c_Foo())
  inhale acc(p_shared(foo), wildcard)
  anon_0 := ps_varProp(foo, df_intToRef(0))
  anon_2 := pg_varProp(foo)
  anon_1 := anon_2
  inhale df_isSubtype(df_typeOf(anon_1), df_intType())
  anon_4 := pg_valProp(foo)
  anon_3 := anon_4
  inhale df_isSubtype(df_typeOf(anon_3), df_intType())
  x := sp_plusInts(anon_1, anon_3)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_valProp(this$dispatch: Ref) returns (ret: Ref)


method pg_varProp(this$dispatch: Ref) returns (ret: Ref)


method ps_varProp(this$dispatch: Ref, anon_0: Ref) returns (ret: Ref)


/interface.kt:(348,358): info: Generated Viper text for createImpl:
field bf_number: Ref

method con_T_Int(number: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_Impl())
  ensures acc(p_c_Impl_shared(ret), wildcard)
  ensures acc(p_c_Impl_unique(ret), write)
  ensures df_intFromRef((unfolding acc(p_c_Impl_shared(ret), wildcard) in
      ret.bf_number)) ==
    df_intFromRef(number)


method f_createImpl_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var impl: Ref
  var implField: Ref
  impl := con_T_Int(df_intToRef(-1))
  unfold acc(p_c_Impl_shared(impl), wildcard)
  implField := impl.bf_number
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_number(this$dispatch: Ref) returns (ret: Ref)
