/interface.kt:(84,98): info: Generated Viper text for testProperties:
method f$testProperties$TF$T$Foo(foo: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  var x: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  var anon$4: Ref
  inhale df$isSubtype(df$typeOf(foo), df$c$Foo())
  inhale acc(p$shared(foo), wildcard)
  anon$0 := ps$varProp(foo, df$intToRef(0))
  anon$2 := pg$varProp(foo)
  anon$1 := anon$2
  inhale df$isSubtype(df$typeOf(anon$1), df$intType())
  anon$4 := pg$valProp(foo)
  anon$3 := anon$4
  inhale df$isSubtype(df$typeOf(anon$3), df$intType())
  x := sp$plusInts(anon$1, anon$3)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$valProp(this$dispatch: Ref) returns (ret: Ref)


method pg$varProp(this$dispatch: Ref) returns (ret: Ref)


method ps$varProp(this$dispatch: Ref, anon$0: Ref) returns (ret: Ref)


/interface.kt:(348,358): info: Generated Viper text for createImpl:
field bf$number: Ref

method con$T$Int(number: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Impl())
  ensures acc(p$c$Impl$shared(ret), wildcard)
  ensures acc(p$c$Impl$unique(ret), write)
  ensures df$intFromRef((unfolding acc(p$c$Impl$shared(ret), wildcard) in
      ret.bf$number)) ==
    df$intFromRef(number)


method f$createImpl$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var impl: Ref
  var implField: Ref
  impl := con$T$Int(df$intToRef(-1))
  unfold acc(p$c$Impl$shared(impl), wildcard)
  implField := impl.bf$number
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$number(this$dispatch: Ref) returns (ret: Ref)
