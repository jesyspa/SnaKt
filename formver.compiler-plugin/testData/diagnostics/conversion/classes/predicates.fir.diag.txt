/predicates.kt:(203,213): info: Generated Viper text for useClasses:
field bf$a: Ref

field bf$b: Ref

field bf$next: Ref

field bf$pf: Ref

predicate p$c$Baz$shared(this$dispatch: Ref) {
  true
}

predicate p$c$Baz$unique(this$dispatch: Ref) {
  true
}

predicate p$c$PrimitiveFields$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType())
}

predicate p$c$PrimitiveFields$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$a, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$a), df$intType()) &&
  acc(this$dispatch.bf$b, write) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$b), df$intType())
}

predicate p$c$Recursive$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$next, wildcard) &&
  (this$dispatch.bf$next != df$nullValue() ==>
  acc(p$c$Recursive$shared(this$dispatch.bf$next), wildcard)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$next), df$nullable(df$c$Recursive()))
}

predicate p$c$Recursive$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$next, wildcard) &&
  (this$dispatch.bf$next != df$nullValue() ==>
  acc(p$c$Recursive$shared(this$dispatch.bf$next), wildcard)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$next), df$nullable(df$c$Recursive()))
}

predicate p$c$ReferenceField$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$pf, wildcard) &&
  acc(p$c$PrimitiveFields$shared(this$dispatch.bf$pf), wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$pf), df$c$PrimitiveFields()) &&
  acc(p$c$Baz$shared(this$dispatch), wildcard)
}

predicate p$c$ReferenceField$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$pf, wildcard) &&
  acc(p$c$PrimitiveFields$shared(this$dispatch.bf$pf), wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$pf), df$c$PrimitiveFields()) &&
  acc(p$c$Baz$unique(this$dispatch), write)
}

method f$useClasses$TF$T$ReferenceField$T$Recursive(rf: Ref, rec: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(rf), df$c$ReferenceField())
  inhale acc(p$c$ReferenceField$shared(rf), wildcard)
  inhale df$isSubtype(df$typeOf(rec), df$c$Recursive())
  inhale acc(p$c$Recursive$shared(rec), wildcard)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/predicates.kt:(354,374): info: Generated Viper text for threeLayersHierarchy:
field bf$x: Ref

field bf$y: Ref

predicate p$c$A$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$x, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$x), df$intType())
}

predicate p$c$A$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$x, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$x), df$intType()) &&
  acc(this$dispatch.bf$y, write) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$y), df$intType())
}

predicate p$c$B$shared(this$dispatch: Ref) {
  acc(p$c$A$shared(this$dispatch), wildcard)
}

predicate p$c$B$unique(this$dispatch: Ref) {
  acc(p$c$A$unique(this$dispatch), write)
}

predicate p$c$C$shared(this$dispatch: Ref) {
  acc(p$c$B$shared(this$dispatch), wildcard)
}

predicate p$c$C$unique(this$dispatch: Ref) {
  acc(p$c$B$unique(this$dispatch), write)
}

method f$threeLayersHierarchy$TF$T$C(c: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(c), df$c$C())
  inhale acc(p$c$C$shared(c), wildcard)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/predicates.kt:(390,403): info: Generated Viper text for listHierarchy:
field sp$size: Ref

predicate p$pkg$kotlin_collections$c$Collection$shared(this$dispatch: Ref) {
  acc(p$pkg$kotlin_collections$c$Iterable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin_collections$c$Collection$unique(this$dispatch: Ref) {
  acc(p$pkg$kotlin_collections$c$Iterable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin_collections$c$Iterable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin_collections$c$Iterable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin_collections$c$List$shared(this$dispatch: Ref) {
  acc(p$pkg$kotlin_collections$c$Collection$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin_collections$c$List$unique(this$dispatch: Ref) {
  acc(p$pkg$kotlin_collections$c$Collection$unique(this$dispatch), write)
}

predicate p$pkg$kotlin_collections$c$MutableCollection$shared(this$dispatch: Ref) {
  acc(p$pkg$kotlin_collections$c$Collection$shared(this$dispatch), wildcard) &&
  acc(p$pkg$kotlin_collections$c$MutableIterable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin_collections$c$MutableCollection$unique(this$dispatch: Ref) {
  acc(p$pkg$kotlin_collections$c$Collection$unique(this$dispatch), write) &&
  acc(p$pkg$kotlin_collections$c$MutableIterable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin_collections$c$MutableIterable$shared(this$dispatch: Ref) {
  acc(p$pkg$kotlin_collections$c$Iterable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin_collections$c$MutableIterable$unique(this$dispatch: Ref) {
  acc(p$pkg$kotlin_collections$c$Iterable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin_collections$c$MutableList$shared(this$dispatch: Ref) {
  acc(p$pkg$kotlin_collections$c$List$shared(this$dispatch), wildcard) &&
  acc(p$pkg$kotlin_collections$c$MutableCollection$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin_collections$c$MutableList$unique(this$dispatch: Ref) {
  acc(p$pkg$kotlin_collections$c$List$unique(this$dispatch), write) &&
  acc(p$pkg$kotlin_collections$c$MutableCollection$unique(this$dispatch), write)
}

method f$listHierarchy$TF$T$MutableList(xs: Ref) returns (ret$0: Ref)
  requires acc(xs.sp$size, write)
  requires df$intFromRef(xs.sp$size) >= 0
  ensures acc(xs.sp$size, write)
  ensures df$intFromRef(xs.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(xs), df$c$pkg$kotlin_collections$MutableList())
  inhale acc(p$pkg$kotlin_collections$c$MutableList$shared(xs), wildcard)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}
