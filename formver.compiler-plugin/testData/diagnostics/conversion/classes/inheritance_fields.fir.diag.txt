/inheritance_fields.kt:(227,234): info: Generated Viper text for createB:
field bf$fieldNotOverride: Ref

method con$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$FieldB())
  ensures acc(p$c$FieldB$shared(ret), wildcard)
  ensures acc(p$c$FieldB$unique(ret), write)


method con$T$FieldB(p$fieldOverride: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$B())
  ensures acc(p$c$B$shared(ret), wildcard)
  ensures acc(p$c$B$unique(ret), write)


method f$createB$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var l0$fieldB: Ref
  var l0$b: Ref
  var l0$fieldOverride: Ref
  var anon$0: Ref
  var l0$fieldNotOverride: Ref
  l0$fieldB := con$()
  l0$b := con$T$FieldB(l0$fieldB)
  anon$0 := pg$public$fieldOverride(l0$b)
  l0$fieldOverride := anon$0
  inhale df$isSubtype(df$typeOf(l0$fieldOverride), df$c$FieldB())
  inhale acc(p$c$FieldB$shared(l0$fieldOverride), wildcard)
  unfold acc(p$c$B$shared(l0$b), wildcard)
  unfold acc(p$c$A$shared(l0$b), wildcard)
  l0$fieldNotOverride := l0$b.bf$fieldNotOverride
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$public$fieldOverride(this$dispatch: Ref) returns (ret: Ref)


/inheritance_fields.kt:(699,715): info: Generated Viper text for createBFsAndNoBF:
field bf$x: Ref

method con$c$FirstBackingFieldClass$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$FirstBackingFieldClass())
  ensures acc(p$c$FirstBackingFieldClass$shared(ret), wildcard)
  ensures acc(p$c$FirstBackingFieldClass$unique(ret), write)


method con$c$NoBackingFieldClass$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$NoBackingFieldClass())
  ensures acc(p$c$NoBackingFieldClass$shared(ret), wildcard)
  ensures acc(p$c$NoBackingFieldClass$unique(ret), write)


method con$c$SecondBackingFieldClass$T$Int(x: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$SecondBackingFieldClass())
  ensures acc(p$c$SecondBackingFieldClass$shared(ret), wildcard)
  ensures acc(p$c$SecondBackingFieldClass$unique(ret), write)
  ensures df$intFromRef((unfolding acc(p$c$SecondBackingFieldClass$shared(ret), wildcard) in
      ret.bf$x)) ==
    df$intFromRef(x)


method f$createBFsAndNoBF$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var fbf: Ref
  var fbfx: Ref
  var anon$0: Ref
  var nbf: Ref
  var nbfx: Ref
  var anon$1: Ref
  var sbf: Ref
  var sbfx: Ref
  fbf := con$c$FirstBackingFieldClass$()
  anon$0 := pg$public$x(fbf)
  fbfx := anon$0
  inhale df$isSubtype(df$typeOf(fbfx), df$intType())
  nbf := con$c$NoBackingFieldClass$()
  anon$1 := pg$public$x(nbf)
  nbfx := anon$1
  inhale df$isSubtype(df$typeOf(nbfx), df$intType())
  sbf := con$c$SecondBackingFieldClass$T$Int(df$intToRef(10))
  unfold acc(p$c$SecondBackingFieldClass$shared(sbf), wildcard)
  sbfx := sbf.bf$x
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$public$x(this$dispatch: Ref) returns (ret: Ref)


/inheritance_fields.kt:(1038,1045): info: Generated Viper text for createY:
field bf$a: Ref

method con$T$Int(a: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Y())
  ensures acc(p$c$Y$shared(ret), wildcard)
  ensures acc(p$c$Y$unique(ret), write)


method f$createY$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var y: Ref
  var ya: Ref
  y := con$T$Int(df$intToRef(10))
  unfold acc(p$c$Y$shared(y), wildcard)
  unfold acc(p$c$X$shared(y), wildcard)
  ya := y.bf$a
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}
