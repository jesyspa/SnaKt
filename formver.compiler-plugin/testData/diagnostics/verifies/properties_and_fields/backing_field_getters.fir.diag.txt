/backing_field_getters.kt:(270,280): info: Generated Viper text for cascadeGet:
field bf_y: Ref

field bf_z: Ref

method f_cascadeGet_TF_T_X(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_c_Z())
  ensures acc(p_c_Z_shared(ret_0), wildcard)
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(x), df_c_X())
  inhale acc(p_c_X_shared(x), wildcard)
  unfold acc(p_c_X_shared(x), wildcard)
  anon_0 := x.bf_y
  unfold acc(p_c_Y_shared(anon_0), wildcard)
  ret_0 := anon_0.bf_z
  goto lbl_0
  label lbl_0
}

/backing_field_getters.kt:(353,374): info: Generated Viper text for receiverNotNullProved:
field bf_y: Ref

field bf_z: Ref

method f_receiverNotNullProved_TF_NT_X(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
  ensures df_boolFromRef(ret_0) == true ==> x != df_nullValue()
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(x), df_nullable(df_c_X()))
  inhale x != df_nullValue() ==> acc(p_c_X_shared(x), wildcard)
  if (x != df_nullValue()) {
    var anon_1: Ref
    unfold acc(p_c_X_shared(x), wildcard)
    anon_1 := x.bf_y
    anon_0 := anon_1
  } else {
    anon_0 := df_nullValue()}
  ret_0 := sp_notBool(df_boolToRef(anon_0 == df_nullValue()))
  goto lbl_0
  label lbl_0
}

/backing_field_getters.kt:(622,640): info: Generated Viper text for cascadeNullableGet:
field bf_y: Ref

field bf_z: Ref

method f_cascadeNullableGet_TF_NT_NullableX(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_nullable(df_c_Z()))
  ensures ret_0 != df_nullValue() ==> acc(p_c_Z_shared(ret_0), wildcard)
  ensures ret_0 != df_nullValue() ==> x != df_nullValue()
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(x), df_nullable(df_c_NullableX()))
  inhale x != df_nullValue() ==> acc(p_c_NullableX_shared(x), wildcard)
  if (x != df_nullValue()) {
    unfold acc(p_c_NullableX_shared(x), wildcard)
    anon_0 := x.bf_y
  } else {
    anon_0 := df_nullValue()}
  if (anon_0 != df_nullValue()) {
    unfold acc(p_c_NullableY_shared(anon_0), wildcard)
    ret_0 := anon_0.bf_z
  } else {
    ret_0 := df_nullValue()}
  goto lbl_0
  label lbl_0
}

/backing_field_getters.kt:(791,818): info: Generated Viper text for cascadeNullableSmartcastGet:
field bf_y: Ref

field bf_z: Ref

method f_cascadeNullableSmartcastGet_TF_NT_NullableX(x: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_nullable(df_c_Z()))
  ensures ret_0 != df_nullValue() ==> acc(p_c_Z_shared(ret_0), wildcard)
  ensures ret_0 != df_nullValue() ==> x != df_nullValue()
{
  inhale df_isSubtype(df_typeOf(x), df_nullable(df_c_NullableX()))
  inhale x != df_nullValue() ==> acc(p_c_NullableX_shared(x), wildcard)
  if (x == df_nullValue()) {
    var anon_0: Ref
    anon_0 := df_nullValue()
    ret_0 := anon_0
  } else {
    var anon_1: Ref
    unfold acc(p_c_NullableX_shared(x), wildcard)
    anon_1 := x.bf_y
    if (anon_1 == df_nullValue()) {
      var anon_2: Ref
      anon_2 := df_nullValue()
      ret_0 := anon_2
    } else {
      var anon_3: Ref
      unfold acc(p_c_NullableX_shared(x), wildcard)
      anon_3 := x.bf_y
      unfold acc(p_c_NullableY_shared(anon_3), wildcard)
      ret_0 := anon_3.bf_z
    }
  }
  goto lbl_0
  label lbl_0
}

/backing_field_getters.kt:(1030,1060): info: Generated Viper text for nullableReceiverNotNullSafeGet:
field bf_size: Ref

field bf_x: Ref

method con_() returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_Baz())
  ensures acc(p_c_Baz_shared(ret), wildcard)
  ensures acc(p_c_Baz_unique(ret), write)


method f_nullableReceiverNotNullSafeGet_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var f: Ref
  var anon_0: Ref
  var cond1: Ref
  var anon_1: Ref
  anon_0 := con_()
  f := anon_0
  if (f != df_nullValue()) {
    var anon_2: Ref
    unfold acc(p_c_Baz_shared(f), wildcard)
    anon_2 := f.bf_x
    anon_1 := anon_2
  } else {
    anon_1 := df_nullValue()}
  cond1 := sp_notBool(df_boolToRef(anon_1 == df_nullValue()))
  assert df_boolFromRef(cond1)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/backing_field_getters.kt:(1157,1184): info: Generated Viper text for nullableReceiverNullSafeGet:
field bf_size: Ref

field bf_x: Ref

method f_nullableReceiverNullSafeGet_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var f: Ref
  var cond1: Ref
  var anon_0: Ref
  f := df_nullValue()
  if (f != df_nullValue()) {
    var anon_1: Ref
    unfold acc(p_c_Baz_shared(f), wildcard)
    anon_1 := f.bf_x
    anon_0 := anon_1
  } else {
    anon_0 := df_nullValue()}
  cond1 := df_boolToRef(anon_0 == df_nullValue())
  assert df_boolFromRef(cond1)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/backing_field_getters.kt:(1315,1341): info: Generated Viper text for nonNullableReceiverSafeGet:
field bf_size: Ref

field bf_x: Ref

method con_() returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_Baz())
  ensures acc(p_c_Baz_shared(ret), wildcard)
  ensures acc(p_c_Baz_unique(ret), write)


method f_nonNullableReceiverSafeGet_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var f: Ref
  var cond1: Ref
  var anon_0: Ref
  f := con_()
  if (f != df_nullValue()) {
    var anon_1: Ref
    unfold acc(p_c_Baz_shared(f), wildcard)
    anon_1 := f.bf_x
    anon_0 := anon_1
  } else {
    anon_0 := df_nullValue()}
  cond1 := sp_notBool(df_boolToRef(anon_0 == df_nullValue()))
  assert df_boolFromRef(cond1)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/backing_field_getters.kt:(1565,1577): info: Generated Viper text for checkPrimary:
field bf_size: Ref

field bf_x: Ref

field bf_y: Ref

field bf_z: Ref

method con_() returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_Z())
  ensures acc(p_c_Z_shared(ret), wildcard)
  ensures acc(p_c_Z_unique(ret), write)


method con_T_Int$T_Int(p_x: Ref, p_y: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_ClassI())
  ensures acc(p_c_ClassI_shared(ret), wildcard)
  ensures acc(p_c_ClassI_unique(ret), write)
  ensures df_intFromRef((unfolding acc(p_c_ClassI_shared(ret), wildcard) in
      ret.bf_x)) ==
    df_intFromRef(p_x) &&
    df_intFromRef((unfolding acc(p_c_ClassI_shared(ret), wildcard) in
      ret.bf_y)) ==
    df_intFromRef(p_y)


method con_T_Z(p_z: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_ClassII())
  ensures acc(p_c_ClassII_shared(ret), wildcard)
  ensures acc(p_c_ClassII_unique(ret), write)
  ensures (unfolding acc(p_c_ClassII_shared(ret), wildcard) in ret.bf_z) ==
    p_z


method f_checkPrimary_TF_T_Int$T_Int(p_x: Ref, p_y: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var l0_classI: Ref
  var l0_z: Ref
  var l0_cond1: Ref
  var l0_cond2: Ref
  var anon_2: Ref
  var anon_3: Ref
  inhale df_isSubtype(df_typeOf(p_x), df_intType())
  inhale df_isSubtype(df_typeOf(p_y), df_intType())
  l0_classI := con_T_Int$T_Int(p_x, p_y)
  l0_z := con_()
  if (!(df_intFromRef(p_x) == df_intFromRef(p_y))) {
    l0_cond1 := df_boolToRef(true)
  } else {
    var anon_0: Ref
    var anon_1: Ref
    unfold acc(p_c_ClassI_shared(l0_classI), wildcard)
    anon_0 := l0_classI.bf_x
    unfold acc(p_c_ClassI_shared(l0_classI), wildcard)
    anon_1 := l0_classI.bf_y
    l0_cond1 := df_boolToRef(df_intFromRef(anon_0) == df_intFromRef(anon_1))
  }
  anon_3 := con_T_Z(l0_z)
  unfold acc(p_c_ClassII_shared(anon_3), wildcard)
  anon_2 := anon_3.bf_z
  l0_cond2 := df_boolToRef(anon_2 == l0_z)
  assert df_boolFromRef(l0_cond1)
  assert df_boolFromRef(l0_cond2)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_z(this$dispatch: Ref) returns (ret: Ref)
