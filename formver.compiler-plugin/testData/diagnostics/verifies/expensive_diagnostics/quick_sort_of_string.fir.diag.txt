/quick_sort_of_string.kt:(282,294): info: Generated Viper text for minOrMaxChar:
method f_minOrMaxChar_TF_T_String$T_Boolean(this$extension: Ref, calcMin: Ref)
  returns (ret_0: Ref)
  requires |df_stringFromRef(this$extension)| >= 1
  ensures df_isSubtype(df_typeOf(ret_0), df_charType())
  ensures df_boolFromRef(calcMin) ==>
    (forall anon$builtin_4: Int ::0 <= anon$builtin_4 &&
      anon$builtin_4 < |df_stringFromRef(this$extension)| ==>
      df_charFromRef(ret_0) <=
      df_stringFromRef(this$extension)[anon$builtin_4])
  ensures !df_boolFromRef(calcMin) ==>
    (forall anon$builtin_5: Int ::0 <= anon$builtin_5 &&
      anon$builtin_5 < |df_stringFromRef(this$extension)| ==>
      df_charFromRef(ret_0) >=
      df_stringFromRef(this$extension)[anon$builtin_5])
{
  var res: Ref
  var i: Ref
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(this$extension), df_stringType())
  inhale df_isSubtype(df_typeOf(calcMin), df_boolType())
  res := sp_stringGet(this$extension, df_intToRef(0))
  i := df_intToRef(1)
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(res), df_charType())
    invariant df_isSubtype(df_typeOf(i), df_intType())
    invariant df_isSubtype(df_typeOf(calcMin), df_boolType())
    invariant 0 <= df_intFromRef(i) &&
      df_intFromRef(i) <= |df_stringFromRef(this$extension)|
    invariant df_boolFromRef(calcMin) ==>
      (forall anon$builtin_2: Int ::0 <= anon$builtin_2 &&
        anon$builtin_2 < df_intFromRef(i) ==>
        df_charFromRef(res) <=
        df_stringFromRef(this$extension)[anon$builtin_2])
    invariant !df_boolFromRef(calcMin) ==>
      (forall anon$builtin_3: Int ::0 <= anon$builtin_3 &&
        anon$builtin_3 < df_intFromRef(i) ==>
        df_charFromRef(res) >=
        df_stringFromRef(this$extension)[anon$builtin_3])
  anon_0 := sp_ltInts(i, sp_stringLength(this$extension))
  if (df_boolFromRef(anon_0)) {
    var anon_1: Ref
    var anon_2: Ref
    if (df_boolFromRef(calcMin)) {
      anon_2 := sp_ltChars(sp_stringGet(this$extension, i), res)
    } else {
      anon_2 := df_boolToRef(false)}
    if (df_boolFromRef(anon_2)) {
      anon_1 := df_boolToRef(true)
    } elseif (!df_boolFromRef(calcMin)) {
      anon_1 := sp_gtChars(sp_stringGet(this$extension, i), res)
    } else {
      anon_1 := df_boolToRef(false)}
    if (df_boolFromRef(anon_1)) {
      res := sp_stringGet(this$extension, i)
    }
    i := sp_plusInts(i, df_intToRef(1))
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(res), df_charType())
  assert df_isSubtype(df_typeOf(i), df_intType())
  assert df_isSubtype(df_typeOf(calcMin), df_boolType())
  assert 0 <= df_intFromRef(i) &&
    df_intFromRef(i) <= |df_stringFromRef(this$extension)|
  assert df_boolFromRef(calcMin) ==>
    (forall anon$builtin_2: Int ::0 <= anon$builtin_2 &&
      anon$builtin_2 < df_intFromRef(i) ==>
      df_charFromRef(res) <=
      df_stringFromRef(this$extension)[anon$builtin_2])
  assert !df_boolFromRef(calcMin) ==>
    (forall anon$builtin_3: Int ::0 <= anon$builtin_3 &&
      anon$builtin_3 < df_intFromRef(i) ==>
      df_charFromRef(res) >=
      df_stringFromRef(this$extension)[anon$builtin_3])
  ret_0 := res
  goto lbl_ret_0
  label lbl_ret_0
}

/quick_sort_of_string.kt:(1135,1144): info: Generated Viper text for quickSort:
method f_minOrMaxChar_TF_T_String$T_Boolean(this$extension: Ref, p_calcMin: Ref)
  returns (ret: Ref)
  requires |df_stringFromRef(this$extension)| >= 1
  ensures df_isSubtype(df_typeOf(ret), df_charType())
  ensures df_boolFromRef(p_calcMin) ==>
    (forall anon$builtin_7: Int ::0 <= anon$builtin_7 &&
      anon$builtin_7 < |df_stringFromRef(this$extension)| ==>
      df_charFromRef(ret) <=
      df_stringFromRef(this$extension)[anon$builtin_7])
  ensures !df_boolFromRef(p_calcMin) ==>
    (forall anon$builtin_8: Int ::0 <= anon$builtin_8 &&
      anon$builtin_8 < |df_stringFromRef(this$extension)| ==>
      df_charFromRef(ret) >=
      df_stringFromRef(this$extension)[anon$builtin_8])


method f_quickSortRec_TF_T_String$T_Char$T_Char(this$extension: Ref, p_minVal: Ref,
  p_maxVal: Ref)
  returns (ret: Ref)
  requires (forall anon$builtin_9: Int ::0 <= anon$builtin_9 &&
      anon$builtin_9 < |df_stringFromRef(this$extension)| ==>
      df_charFromRef(p_minVal) <=
      df_stringFromRef(this$extension)[anon$builtin_9] &&
      df_stringFromRef(this$extension)[anon$builtin_9] <=
      df_charFromRef(p_maxVal))
  ensures df_isSubtype(df_typeOf(ret), df_stringType())
  ensures |df_stringFromRef(ret)| == |df_stringFromRef(this$extension)|
  ensures (forall anon$builtin_10: Int ::0 <= anon$builtin_10 &&
      anon$builtin_10 < |df_stringFromRef(this$extension)| ==>
      df_charFromRef(p_minVal) <= df_stringFromRef(ret)[anon$builtin_10] &&
      df_stringFromRef(ret)[anon$builtin_10] <= df_charFromRef(p_maxVal))
  ensures (forall anon$builtin_11: Int ::1 <= anon$builtin_11 &&
      anon$builtin_11 < |df_stringFromRef(this$extension)| ==>
      df_stringFromRef(ret)[anon$builtin_11 - 1] <=
      df_stringFromRef(ret)[anon$builtin_11])


method f_quickSort_TF_T_String(this$extension: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_stringType())
  ensures |df_stringFromRef(ret_0)| == |df_stringFromRef(this$extension)|
  ensures (forall anon$builtin_6: Int ::1 <= anon$builtin_6 &&
      anon$builtin_6 < |df_stringFromRef(this$extension)| ==>
      df_stringFromRef(ret_0)[anon$builtin_6 - 1] <=
      df_stringFromRef(ret_0)[anon$builtin_6])
{
  var l0_minVal: Ref
  var l0_maxVal: Ref
  inhale df_isSubtype(df_typeOf(this$extension), df_stringType())
  if (|df_stringFromRef(this$extension)| <= 1) {
    ret_0 := this$extension
    goto lbl_0
  }
  l0_minVal := f_minOrMaxChar_TF_T_String$T_Boolean(this$extension, df_boolToRef(true))
  l0_maxVal := f_minOrMaxChar_TF_T_String$T_Boolean(this$extension, df_boolToRef(false))
  ret_0 := f_quickSortRec_TF_T_String$T_Char$T_Char(this$extension, l0_minVal,
    l0_maxVal)
  goto lbl_0
  label lbl_0
}

/quick_sort_of_string.kt:(1507,1519): info: Generated Viper text for quickSortRec:
method f_chooseIndex_TF_T_String(this$extension: Ref) returns (ret: Ref)
  requires |df_stringFromRef(this$extension)| >= 1
  ensures df_isSubtype(df_typeOf(ret), df_intType())
  ensures 0 <= df_intFromRef(ret) &&
    df_intFromRef(ret) < |df_stringFromRef(this$extension)|


method f_plus_TF_T_String$NT_Any(this$dispatch: Ref, other: Ref)
  returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_stringType())


method f_quickSortRec_TF_T_String$T_Char$T_Char(this$extension: Ref, minVal: Ref,
  maxVal: Ref)
  returns (ret_0: Ref)
  requires (forall anon$builtin_6: Int ::0 <= anon$builtin_6 &&
      anon$builtin_6 < |df_stringFromRef(this$extension)| ==>
      df_charFromRef(minVal) <=
      df_stringFromRef(this$extension)[anon$builtin_6] &&
      df_stringFromRef(this$extension)[anon$builtin_6] <=
      df_charFromRef(maxVal))
  ensures df_isSubtype(df_typeOf(ret_0), df_stringType())
  ensures |df_stringFromRef(ret_0)| == |df_stringFromRef(this$extension)|
  ensures (forall anon$builtin_7: Int ::0 <= anon$builtin_7 &&
      anon$builtin_7 < |df_stringFromRef(this$extension)| ==>
      df_charFromRef(minVal) <= df_stringFromRef(ret_0)[anon$builtin_7] &&
      df_stringFromRef(ret_0)[anon$builtin_7] <= df_charFromRef(maxVal))
  ensures (forall anon$builtin_8: Int ::1 <= anon$builtin_8 &&
      anon$builtin_8 < |df_stringFromRef(this$extension)| ==>
      df_stringFromRef(ret_0)[anon$builtin_8 - 1] <=
      df_stringFromRef(ret_0)[anon$builtin_8])
{
  var medVal: Ref
  var anon_1: Ref
  var i: Ref
  var lessString: Ref
  var greaterString: Ref
  var eqString: Ref
  var anon_2: Ref
  var anon_4: Ref
  var anon_5: Ref
  inhale df_isSubtype(df_typeOf(this$extension), df_stringType())
  inhale df_isSubtype(df_typeOf(minVal), df_charType())
  inhale df_isSubtype(df_typeOf(maxVal), df_charType())
  if (|df_stringFromRef(this$extension)| <= 1) {
    ret_0 := this$extension
    goto lbl_ret_0
  }
  anon_1 := f_chooseIndex_TF_T_String(this$extension)
  medVal := sp_stringGet(this$extension, anon_1)
  i := df_intToRef(0)
  lessString := df_stringToRef(Seq[Int]())
  greaterString := df_stringToRef(Seq[Int]())
  eqString := df_stringToRef(Seq[Int]())
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(medVal), df_charType())
    invariant df_isSubtype(df_typeOf(i), df_intType())
    invariant df_isSubtype(df_typeOf(lessString), df_stringType())
    invariant df_isSubtype(df_typeOf(greaterString), df_stringType())
    invariant df_isSubtype(df_typeOf(eqString), df_stringType())
    invariant df_isSubtype(df_typeOf(minVal), df_charType())
    invariant df_isSubtype(df_typeOf(maxVal), df_charType())
    invariant 0 <= df_intFromRef(i) &&
      df_intFromRef(i) <= |df_stringFromRef(this$extension)|
    invariant |df_stringFromRef(lessString)| +
      |df_stringFromRef(greaterString)| +
      |df_stringFromRef(eqString)| ==
      df_intFromRef(i)
    invariant (forall anon$builtin_3: Int ::0 <= anon$builtin_3 &&
        anon$builtin_3 < |df_stringFromRef(lessString)| ==>
        df_charFromRef(minVal) <=
        df_stringFromRef(lessString)[anon$builtin_3] &&
        df_stringFromRef(lessString)[anon$builtin_3] <=
        df_charFromRef(medVal))
    invariant (forall anon$builtin_4: Int ::0 <= anon$builtin_4 &&
        anon$builtin_4 < |df_stringFromRef(greaterString)| ==>
        df_charFromRef(medVal) <=
        df_stringFromRef(greaterString)[anon$builtin_4] &&
        df_stringFromRef(greaterString)[anon$builtin_4] <=
        df_charFromRef(maxVal))
    invariant (forall anon$builtin_5: Int ::0 <= anon$builtin_5 &&
        anon$builtin_5 < |df_stringFromRef(eqString)| ==>
        df_stringFromRef(eqString)[anon$builtin_5] ==
        df_charFromRef(medVal))
  anon_2 := sp_ltInts(i, sp_stringLength(this$extension))
  if (df_boolFromRef(anon_2)) {
    var curChar: Ref
    var anon_3: Ref
    var anon_0: Ref
    anon_0 := i
    i := sp_plusInts(anon_0, df_intToRef(1))
    anon_3 := anon_0
    curChar := sp_stringGet(this$extension, anon_3)
    if (df_charFromRef(curChar) < df_charFromRef(medVal)) {
      lessString := sp_addStringChar(lessString, curChar)
    } elseif (df_charFromRef(curChar) > df_charFromRef(medVal)) {
      greaterString := sp_addStringChar(greaterString, curChar)
    } else {
      eqString := sp_addStringChar(eqString, curChar)}
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(medVal), df_charType())
  assert df_isSubtype(df_typeOf(i), df_intType())
  assert df_isSubtype(df_typeOf(lessString), df_stringType())
  assert df_isSubtype(df_typeOf(greaterString), df_stringType())
  assert df_isSubtype(df_typeOf(eqString), df_stringType())
  assert df_isSubtype(df_typeOf(minVal), df_charType())
  assert df_isSubtype(df_typeOf(maxVal), df_charType())
  assert 0 <= df_intFromRef(i) &&
    df_intFromRef(i) <= |df_stringFromRef(this$extension)|
  assert |df_stringFromRef(lessString)| + |df_stringFromRef(greaterString)| +
    |df_stringFromRef(eqString)| ==
    df_intFromRef(i)
  assert (forall anon$builtin_3: Int ::0 <= anon$builtin_3 &&
      anon$builtin_3 < |df_stringFromRef(lessString)| ==>
      df_charFromRef(minVal) <=
      df_stringFromRef(lessString)[anon$builtin_3] &&
      df_stringFromRef(lessString)[anon$builtin_3] <=
      df_charFromRef(medVal))
  assert (forall anon$builtin_4: Int ::0 <= anon$builtin_4 &&
      anon$builtin_4 < |df_stringFromRef(greaterString)| ==>
      df_charFromRef(medVal) <=
      df_stringFromRef(greaterString)[anon$builtin_4] &&
      df_stringFromRef(greaterString)[anon$builtin_4] <=
      df_charFromRef(maxVal))
  assert (forall anon$builtin_5: Int ::0 <= anon$builtin_5 &&
      anon$builtin_5 < |df_stringFromRef(eqString)| ==>
      df_stringFromRef(eqString)[anon$builtin_5] == df_charFromRef(medVal))
  anon_4 := f_quickSortRec_TF_T_String$T_Char$T_Char(lessString, minVal, medVal)
  anon_5 := f_quickSortRec_TF_T_String$T_Char$T_Char(greaterString, medVal,
    maxVal)
  ret_0 := sp_addStrings(sp_addStrings(anon_4, eqString), anon_5)
  goto lbl_ret_0
  label lbl_ret_0
}
