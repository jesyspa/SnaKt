/quick_sort_of_string.kt:(282,294): info: Generated Viper text for minOrMaxChar:
method f$minOrMaxChar$TF$T$String$T$Boolean(this$extension: Ref, p$calcMin: Ref)
  returns (ret$0: Ref)
  requires |df$rt$stringFromRef(this$extension)| >= 1
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$charType())
  ensures df$rt$boolFromRef(p$calcMin) ==>
    (forall anon$builtin$4: Int ::0 <= anon$builtin$4 &&
      anon$builtin$4 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$charFromRef(ret$0) <=
      df$rt$stringFromRef(this$extension)[anon$builtin$4])
  ensures !df$rt$boolFromRef(p$calcMin) ==>
    (forall anon$builtin$5: Int ::0 <= anon$builtin$5 &&
      anon$builtin$5 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$charFromRef(ret$0) >=
      df$rt$stringFromRef(this$extension)[anon$builtin$5])
{
  var l0$res: Ref
  var l0$i: Ref
  var anon$0: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(this$extension), df$rt$stringType())
  inhale df$rt$isSubtype(df$rt$typeOf(p$calcMin), df$rt$boolType())
  l0$res := sp$stringGet(this$extension, df$rt$intToRef(0))
  l0$i := df$rt$intToRef(1)
  label lbl$continue$0
    invariant df$rt$isSubtype(df$rt$typeOf(l0$res), df$rt$charType())
    invariant df$rt$isSubtype(df$rt$typeOf(l0$i), df$rt$intType())
    invariant df$rt$isSubtype(df$rt$typeOf(p$calcMin), df$rt$boolType())
    invariant 0 <= df$rt$intFromRef(l0$i) &&
      df$rt$intFromRef(l0$i) <= |df$rt$stringFromRef(this$extension)|
    invariant df$rt$boolFromRef(p$calcMin) ==>
      (forall anon$builtin$2: Int ::0 <= anon$builtin$2 &&
        anon$builtin$2 < df$rt$intFromRef(l0$i) ==>
        df$rt$charFromRef(l0$res) <=
        df$rt$stringFromRef(this$extension)[anon$builtin$2])
    invariant !df$rt$boolFromRef(p$calcMin) ==>
      (forall anon$builtin$3: Int ::0 <= anon$builtin$3 &&
        anon$builtin$3 < df$rt$intFromRef(l0$i) ==>
        df$rt$charFromRef(l0$res) >=
        df$rt$stringFromRef(this$extension)[anon$builtin$3])
  anon$0 := sp$ltInts(l0$i, sp$stringLength(this$extension))
  if (df$rt$boolFromRef(anon$0)) {
    var anon$1: Ref
    var anon$2: Ref
    if (df$rt$boolFromRef(p$calcMin)) {
      anon$2 := sp$ltChars(sp$stringGet(this$extension, l0$i), l0$res)
    } else {
      anon$2 := df$rt$boolToRef(false)}
    if (df$rt$boolFromRef(anon$2)) {
      anon$1 := df$rt$boolToRef(true)
    } elseif (!df$rt$boolFromRef(p$calcMin)) {
      anon$1 := sp$gtChars(sp$stringGet(this$extension, l0$i), l0$res)
    } else {
      anon$1 := df$rt$boolToRef(false)}
    if (df$rt$boolFromRef(anon$1)) {
      l0$res := sp$stringGet(this$extension, l0$i)
    }
    l0$i := sp$plusInts(l0$i, df$rt$intToRef(1))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$rt$isSubtype(df$rt$typeOf(l0$res), df$rt$charType())
  assert df$rt$isSubtype(df$rt$typeOf(l0$i), df$rt$intType())
  assert df$rt$isSubtype(df$rt$typeOf(p$calcMin), df$rt$boolType())
  assert 0 <= df$rt$intFromRef(l0$i) &&
    df$rt$intFromRef(l0$i) <= |df$rt$stringFromRef(this$extension)|
  assert df$rt$boolFromRef(p$calcMin) ==>
    (forall anon$builtin$2: Int ::0 <= anon$builtin$2 &&
      anon$builtin$2 < df$rt$intFromRef(l0$i) ==>
      df$rt$charFromRef(l0$res) <=
      df$rt$stringFromRef(this$extension)[anon$builtin$2])
  assert !df$rt$boolFromRef(p$calcMin) ==>
    (forall anon$builtin$3: Int ::0 <= anon$builtin$3 &&
      anon$builtin$3 < df$rt$intFromRef(l0$i) ==>
      df$rt$charFromRef(l0$res) >=
      df$rt$stringFromRef(this$extension)[anon$builtin$3])
  ret$0 := l0$res
  goto lbl$ret$0
  label lbl$ret$0
}

/quick_sort_of_string.kt:(1135,1144): info: Generated Viper text for quickSort:
method f$minOrMaxChar$TF$T$String$T$Boolean(this$extension: Ref, p$calcMin: Ref)
  returns (ret: Ref)
  requires |df$rt$stringFromRef(this$extension)| >= 1
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$charType())
  ensures df$rt$boolFromRef(p$calcMin) ==>
    (forall anon$builtin$7: Int ::0 <= anon$builtin$7 &&
      anon$builtin$7 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$charFromRef(ret) <=
      df$rt$stringFromRef(this$extension)[anon$builtin$7])
  ensures !df$rt$boolFromRef(p$calcMin) ==>
    (forall anon$builtin$8: Int ::0 <= anon$builtin$8 &&
      anon$builtin$8 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$charFromRef(ret) >=
      df$rt$stringFromRef(this$extension)[anon$builtin$8])


method f$quickSort$TF$T$String(this$extension: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$stringType())
  ensures |df$rt$stringFromRef(ret$0)| ==
    |df$rt$stringFromRef(this$extension)|
  ensures (forall anon$builtin$6: Int ::1 <= anon$builtin$6 &&
      anon$builtin$6 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$stringFromRef(ret$0)[anon$builtin$6 - 1] <=
      df$rt$stringFromRef(ret$0)[anon$builtin$6])
{
  var l0$minVal: Ref
  var l0$maxVal: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(this$extension), df$rt$stringType())
  if (|df$rt$stringFromRef(this$extension)| <= 1) {
    ret$0 := this$extension
    goto lbl$ret$0
  }
  l0$minVal := f$minOrMaxChar$TF$T$String$T$Boolean(this$extension, df$rt$boolToRef(true))
  l0$maxVal := f$minOrMaxChar$TF$T$String$T$Boolean(this$extension, df$rt$boolToRef(false))
  ret$0 := f$quickSortRec$TF$T$String$T$Char$T$Char(this$extension, l0$minVal,
    l0$maxVal)
  goto lbl$ret$0
  label lbl$ret$0
}

method f$quickSortRec$TF$T$String$T$Char$T$Char(this$extension: Ref, p$minVal: Ref,
  p$maxVal: Ref)
  returns (ret: Ref)
  requires (forall anon$builtin$9: Int ::0 <= anon$builtin$9 &&
      anon$builtin$9 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$charFromRef(p$minVal) <=
      df$rt$stringFromRef(this$extension)[anon$builtin$9] &&
      df$rt$stringFromRef(this$extension)[anon$builtin$9] <=
      df$rt$charFromRef(p$maxVal))
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$stringType())
  ensures |df$rt$stringFromRef(ret)| ==
    |df$rt$stringFromRef(this$extension)|
  ensures (forall anon$builtin$10: Int ::0 <= anon$builtin$10 &&
      anon$builtin$10 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$charFromRef(p$minVal) <=
      df$rt$stringFromRef(ret)[anon$builtin$10] &&
      df$rt$stringFromRef(ret)[anon$builtin$10] <=
      df$rt$charFromRef(p$maxVal))
  ensures (forall anon$builtin$11: Int ::1 <= anon$builtin$11 &&
      anon$builtin$11 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$stringFromRef(ret)[anon$builtin$11 - 1] <=
      df$rt$stringFromRef(ret)[anon$builtin$11])


/quick_sort_of_string.kt:(1507,1519): info: Generated Viper text for quickSortRec:
method f$chooseIndex$TF$T$String(this$extension: Ref) returns (ret: Ref)
  requires |df$rt$stringFromRef(this$extension)| >= 1
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())
  ensures 0 <= df$rt$intFromRef(ret) &&
    df$rt$intFromRef(ret) < |df$rt$stringFromRef(this$extension)|


method f$pkg$kotlin$c$String$plus$TF$T$String$NT$Any(this$dispatch: Ref, p$other: Ref)
  returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$stringType())


method f$quickSortRec$TF$T$String$T$Char$T$Char(this$extension: Ref, p$minVal: Ref,
  p$maxVal: Ref)
  returns (ret$0: Ref)
  requires (forall anon$builtin$6: Int ::0 <= anon$builtin$6 &&
      anon$builtin$6 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$charFromRef(p$minVal) <=
      df$rt$stringFromRef(this$extension)[anon$builtin$6] &&
      df$rt$stringFromRef(this$extension)[anon$builtin$6] <=
      df$rt$charFromRef(p$maxVal))
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$stringType())
  ensures |df$rt$stringFromRef(ret$0)| ==
    |df$rt$stringFromRef(this$extension)|
  ensures (forall anon$builtin$7: Int ::0 <= anon$builtin$7 &&
      anon$builtin$7 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$charFromRef(p$minVal) <=
      df$rt$stringFromRef(ret$0)[anon$builtin$7] &&
      df$rt$stringFromRef(ret$0)[anon$builtin$7] <=
      df$rt$charFromRef(p$maxVal))
  ensures (forall anon$builtin$8: Int ::1 <= anon$builtin$8 &&
      anon$builtin$8 < |df$rt$stringFromRef(this$extension)| ==>
      df$rt$stringFromRef(ret$0)[anon$builtin$8 - 1] <=
      df$rt$stringFromRef(ret$0)[anon$builtin$8])
{
  var l0$medVal: Ref
  var anon$1: Ref
  var l0$i: Ref
  var l0$lessString: Ref
  var l0$greaterString: Ref
  var l0$eqString: Ref
  var anon$2: Ref
  var anon$4: Ref
  var anon$5: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(this$extension), df$rt$stringType())
  inhale df$rt$isSubtype(df$rt$typeOf(p$minVal), df$rt$charType())
  inhale df$rt$isSubtype(df$rt$typeOf(p$maxVal), df$rt$charType())
  if (|df$rt$stringFromRef(this$extension)| <= 1) {
    ret$0 := this$extension
    goto lbl$ret$0
  }
  anon$1 := f$chooseIndex$TF$T$String(this$extension)
  l0$medVal := sp$stringGet(this$extension, anon$1)
  l0$i := df$rt$intToRef(0)
  l0$lessString := df$rt$stringToRef(Seq[Int]())
  l0$greaterString := df$rt$stringToRef(Seq[Int]())
  l0$eqString := df$rt$stringToRef(Seq[Int]())
  label lbl$continue$0
    invariant df$rt$isSubtype(df$rt$typeOf(l0$medVal), df$rt$charType())
    invariant df$rt$isSubtype(df$rt$typeOf(l0$i), df$rt$intType())
    invariant df$rt$isSubtype(df$rt$typeOf(l0$lessString), df$rt$stringType())
    invariant df$rt$isSubtype(df$rt$typeOf(l0$greaterString), df$rt$stringType())
    invariant df$rt$isSubtype(df$rt$typeOf(l0$eqString), df$rt$stringType())
    invariant df$rt$isSubtype(df$rt$typeOf(p$minVal), df$rt$charType())
    invariant df$rt$isSubtype(df$rt$typeOf(p$maxVal), df$rt$charType())
    invariant 0 <= df$rt$intFromRef(l0$i) &&
      df$rt$intFromRef(l0$i) <= |df$rt$stringFromRef(this$extension)|
    invariant |df$rt$stringFromRef(l0$lessString)| +
      |df$rt$stringFromRef(l0$greaterString)| +
      |df$rt$stringFromRef(l0$eqString)| ==
      df$rt$intFromRef(l0$i)
    invariant (forall anon$builtin$3: Int ::0 <= anon$builtin$3 &&
        anon$builtin$3 < |df$rt$stringFromRef(l0$lessString)| ==>
        df$rt$charFromRef(p$minVal) <=
        df$rt$stringFromRef(l0$lessString)[anon$builtin$3] &&
        df$rt$stringFromRef(l0$lessString)[anon$builtin$3] <=
        df$rt$charFromRef(l0$medVal))
    invariant (forall anon$builtin$4: Int ::0 <= anon$builtin$4 &&
        anon$builtin$4 < |df$rt$stringFromRef(l0$greaterString)| ==>
        df$rt$charFromRef(l0$medVal) <=
        df$rt$stringFromRef(l0$greaterString)[anon$builtin$4] &&
        df$rt$stringFromRef(l0$greaterString)[anon$builtin$4] <=
        df$rt$charFromRef(p$maxVal))
    invariant (forall anon$builtin$5: Int ::0 <= anon$builtin$5 &&
        anon$builtin$5 < |df$rt$stringFromRef(l0$eqString)| ==>
        df$rt$stringFromRef(l0$eqString)[anon$builtin$5] ==
        df$rt$charFromRef(l0$medVal))
  anon$2 := sp$ltInts(l0$i, sp$stringLength(this$extension))
  if (df$rt$boolFromRef(anon$2)) {
    var l3$curChar: Ref
    var anon$3: Ref
    var anon$0: Ref
    anon$0 := l0$i
    l0$i := sp$plusInts(anon$0, df$rt$intToRef(1))
    anon$3 := anon$0
    l3$curChar := sp$stringGet(this$extension, anon$3)
    if (df$rt$charFromRef(l3$curChar) < df$rt$charFromRef(l0$medVal)) {
      l0$lessString := sp$addStringChar(l0$lessString, l3$curChar)
    } elseif (df$rt$charFromRef(l3$curChar) > df$rt$charFromRef(l0$medVal)) {
      l0$greaterString := sp$addStringChar(l0$greaterString, l3$curChar)
    } else {
      l0$eqString := sp$addStringChar(l0$eqString, l3$curChar)}
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$rt$isSubtype(df$rt$typeOf(l0$medVal), df$rt$charType())
  assert df$rt$isSubtype(df$rt$typeOf(l0$i), df$rt$intType())
  assert df$rt$isSubtype(df$rt$typeOf(l0$lessString), df$rt$stringType())
  assert df$rt$isSubtype(df$rt$typeOf(l0$greaterString), df$rt$stringType())
  assert df$rt$isSubtype(df$rt$typeOf(l0$eqString), df$rt$stringType())
  assert df$rt$isSubtype(df$rt$typeOf(p$minVal), df$rt$charType())
  assert df$rt$isSubtype(df$rt$typeOf(p$maxVal), df$rt$charType())
  assert 0 <= df$rt$intFromRef(l0$i) &&
    df$rt$intFromRef(l0$i) <= |df$rt$stringFromRef(this$extension)|
  assert |df$rt$stringFromRef(l0$lessString)| +
    |df$rt$stringFromRef(l0$greaterString)| +
    |df$rt$stringFromRef(l0$eqString)| ==
    df$rt$intFromRef(l0$i)
  assert (forall anon$builtin$3: Int ::0 <= anon$builtin$3 &&
      anon$builtin$3 < |df$rt$stringFromRef(l0$lessString)| ==>
      df$rt$charFromRef(p$minVal) <=
      df$rt$stringFromRef(l0$lessString)[anon$builtin$3] &&
      df$rt$stringFromRef(l0$lessString)[anon$builtin$3] <=
      df$rt$charFromRef(l0$medVal))
  assert (forall anon$builtin$4: Int ::0 <= anon$builtin$4 &&
      anon$builtin$4 < |df$rt$stringFromRef(l0$greaterString)| ==>
      df$rt$charFromRef(l0$medVal) <=
      df$rt$stringFromRef(l0$greaterString)[anon$builtin$4] &&
      df$rt$stringFromRef(l0$greaterString)[anon$builtin$4] <=
      df$rt$charFromRef(p$maxVal))
  assert (forall anon$builtin$5: Int ::0 <= anon$builtin$5 &&
      anon$builtin$5 < |df$rt$stringFromRef(l0$eqString)| ==>
      df$rt$stringFromRef(l0$eqString)[anon$builtin$5] ==
      df$rt$charFromRef(l0$medVal))
  anon$4 := f$quickSortRec$TF$T$String$T$Char$T$Char(l0$lessString, p$minVal,
    l0$medVal)
  anon$5 := f$quickSortRec$TF$T$String$T$Char$T$Char(l0$greaterString, l0$medVal,
    p$maxVal)
  ret$0 := sp$addStrings(sp$addStrings(anon$4, l0$eqString), anon$5)
  goto lbl$ret$0
  label lbl$ret$0
}
