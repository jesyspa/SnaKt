/merge_sort_of_string.kt:(72,76): info: Generated Viper text for subs:
method f_plus_TF_T_String$NT_Any(this$dispatch: Ref, other: Ref)
  returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_stringType())


method f_subs_TF_T_String$T_Int$T_Int(this$extension: Ref, lo: Ref, hi: Ref)
  returns (ret_0: Ref)
  requires 0 <= df_intFromRef(lo) && df_intFromRef(lo) <= df_intFromRef(hi) &&
    df_intFromRef(hi) <= |df_stringFromRef(this$extension)|
  ensures df_isSubtype(df_typeOf(ret_0), df_stringType())
  ensures |df_stringFromRef(ret_0)| ==
    df_intFromRef(hi) - df_intFromRef(lo)
  ensures (forall anon$builtin_2: Int ::0 <= anon$builtin_2 &&
      anon$builtin_2 < |df_stringFromRef(ret_0)| ==>
      df_stringFromRef(ret_0)[anon$builtin_2] ==
      df_stringFromRef(this$extension)[anon$builtin_2 + df_intFromRef(lo)])
{
  var res: Ref
  var i: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(this$extension), df_stringType())
  inhale df_isSubtype(df_typeOf(lo), df_intType())
  inhale df_isSubtype(df_typeOf(hi), df_intType())
  res := df_stringToRef(Seq[Int]())
  i := lo
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(res), df_stringType())
    invariant df_isSubtype(df_typeOf(i), df_intType())
    invariant df_isSubtype(df_typeOf(lo), df_intType())
    invariant df_isSubtype(df_typeOf(hi), df_intType())
    invariant 0 <= df_intFromRef(i) &&
      df_intFromRef(i) <= df_intFromRef(hi)
    invariant |df_stringFromRef(res)| ==
      df_intFromRef(i) - df_intFromRef(lo)
    invariant (forall anon$builtin_1: Int ::0 <= anon$builtin_1 &&
        anon$builtin_1 < |df_stringFromRef(res)| ==>
        df_stringFromRef(res)[anon$builtin_1] ==
        df_stringFromRef(this$extension)[anon$builtin_1 + df_intFromRef(lo)])
  anon_1 := sp_ltInts(i, hi)
  if (df_boolFromRef(anon_1)) {
    var anon_2: Ref
    var anon_0: Ref
    anon_0 := i
    i := sp_plusInts(anon_0, df_intToRef(1))
    anon_2 := anon_0
    res := sp_addStringChar(res, sp_stringGet(this$extension, anon_2))
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(res), df_stringType())
  assert df_isSubtype(df_typeOf(i), df_intType())
  assert df_isSubtype(df_typeOf(lo), df_intType())
  assert df_isSubtype(df_typeOf(hi), df_intType())
  assert 0 <= df_intFromRef(i) && df_intFromRef(i) <= df_intFromRef(hi)
  assert |df_stringFromRef(res)| == df_intFromRef(i) - df_intFromRef(lo)
  assert (forall anon$builtin_1: Int ::0 <= anon$builtin_1 &&
      anon$builtin_1 < |df_stringFromRef(res)| ==>
      df_stringFromRef(res)[anon$builtin_1] ==
      df_stringFromRef(this$extension)[anon$builtin_1 + df_intFromRef(lo)])
  ret_0 := res
  goto lbl_ret_0
  label lbl_ret_0
}

/merge_sort_of_string.kt:(705,717): info: Generated Viper text for mergeStrings:
method f_mergeStrings_TF_T_String$T_String(a: Ref, b: Ref)
  returns (ret_0: Ref)
  requires (forall anon$builtin_3: Int ::(1 <= anon$builtin_3 &&
      anon$builtin_3 < |df_stringFromRef(a)| ==>
      df_stringFromRef(a)[anon$builtin_3 - 1] <=
      df_stringFromRef(a)[anon$builtin_3]) &&
      (1 <= anon$builtin_3 && anon$builtin_3 < |df_stringFromRef(b)| ==>
      df_stringFromRef(b)[anon$builtin_3 - 1] <=
      df_stringFromRef(b)[anon$builtin_3]))
  ensures df_isSubtype(df_typeOf(ret_0), df_stringType())
  ensures |df_stringFromRef(ret_0)| ==
    |df_stringFromRef(a)| + |df_stringFromRef(b)|
  ensures (forall anon$builtin_4: Int ::1 <= anon$builtin_4 &&
      anon$builtin_4 < |df_stringFromRef(ret_0)| ==>
      df_stringFromRef(ret_0)[anon$builtin_4 - 1] <=
      df_stringFromRef(ret_0)[anon$builtin_4])
{
  var pa: Ref
  var pb: Ref
  var res: Ref
  var n: Ref
  var anon_4: Ref
  inhale df_isSubtype(df_typeOf(a), df_stringType())
  inhale df_isSubtype(df_typeOf(b), df_stringType())
  pa := df_intToRef(0)
  pb := df_intToRef(0)
  res := df_stringToRef(Seq[Int]())
  n := sp_plusInts(sp_stringLength(a), sp_stringLength(b))
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(pa), df_intType())
    invariant df_isSubtype(df_typeOf(pb), df_intType())
    invariant df_isSubtype(df_typeOf(res), df_stringType())
    invariant df_isSubtype(df_typeOf(n), df_intType())
    invariant df_isSubtype(df_typeOf(a), df_stringType())
    invariant df_isSubtype(df_typeOf(b), df_stringType())
    invariant 0 <= df_intFromRef(pa) &&
      df_intFromRef(pa) <= |df_stringFromRef(a)|
    invariant 0 <= df_intFromRef(pb) &&
      df_intFromRef(pb) <= |df_stringFromRef(b)|
    invariant |df_stringFromRef(res)| ==
      df_intFromRef(pa) + df_intFromRef(pb)
    invariant (forall anon$builtin_2: Int ::1 <= anon$builtin_2 &&
        anon$builtin_2 < |df_stringFromRef(res)| ==>
        df_stringFromRef(res)[anon$builtin_2 - 1] <=
        df_stringFromRef(res)[anon$builtin_2])
    invariant |df_stringFromRef(res)| == 0 ||
      df_intFromRef(pa) == |df_stringFromRef(a)| ||
      df_stringFromRef(res)[|df_stringFromRef(res)| - 1] <=
      df_stringFromRef(a)[df_intFromRef(pa)]
    invariant |df_stringFromRef(res)| == 0 ||
      df_intFromRef(pb) == |df_stringFromRef(b)| ||
      df_stringFromRef(res)[|df_stringFromRef(res)| - 1] <=
      df_stringFromRef(b)[df_intFromRef(pb)]
  anon_4 := sp_ltInts(sp_plusInts(pa, pb), n)
  if (df_boolFromRef(anon_4)) {
    var anon_5: Ref
    if (df_intFromRef(pa) == |df_stringFromRef(a)|) {
      var anon_6: Ref
      var anon_0: Ref
      anon_0 := pb
      pb := sp_plusInts(anon_0, df_intToRef(1))
      anon_6 := anon_0
      anon_5 := sp_stringGet(b, anon_6)
    } elseif (df_intFromRef(pb) == |df_stringFromRef(b)|) {
      var anon_7: Ref
      var anon_1: Ref
      anon_1 := pa
      pa := sp_plusInts(anon_1, df_intToRef(1))
      anon_7 := anon_1
      anon_5 := sp_stringGet(a, anon_7)
    } elseif (df_stringFromRef(a)[df_intFromRef(pa)] <
    df_stringFromRef(b)[df_intFromRef(pb)]) {
      var anon_8: Ref
      var anon_2: Ref
      anon_2 := pa
      pa := sp_plusInts(anon_2, df_intToRef(1))
      anon_8 := anon_2
      anon_5 := sp_stringGet(a, anon_8)
    } else {
      var anon_9: Ref
      var anon_3: Ref
      anon_3 := pb
      pb := sp_plusInts(anon_3, df_intToRef(1))
      anon_9 := anon_3
      anon_5 := sp_stringGet(b, anon_9)
    }
    res := sp_addStringChar(res, anon_5)
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(pa), df_intType())
  assert df_isSubtype(df_typeOf(pb), df_intType())
  assert df_isSubtype(df_typeOf(res), df_stringType())
  assert df_isSubtype(df_typeOf(n), df_intType())
  assert df_isSubtype(df_typeOf(a), df_stringType())
  assert df_isSubtype(df_typeOf(b), df_stringType())
  assert 0 <= df_intFromRef(pa) &&
    df_intFromRef(pa) <= |df_stringFromRef(a)|
  assert 0 <= df_intFromRef(pb) &&
    df_intFromRef(pb) <= |df_stringFromRef(b)|
  assert |df_stringFromRef(res)| == df_intFromRef(pa) + df_intFromRef(pb)
  assert (forall anon$builtin_2: Int ::1 <= anon$builtin_2 &&
      anon$builtin_2 < |df_stringFromRef(res)| ==>
      df_stringFromRef(res)[anon$builtin_2 - 1] <=
      df_stringFromRef(res)[anon$builtin_2])
  assert |df_stringFromRef(res)| == 0 ||
    df_intFromRef(pa) == |df_stringFromRef(a)| ||
    df_stringFromRef(res)[|df_stringFromRef(res)| - 1] <=
    df_stringFromRef(a)[df_intFromRef(pa)]
  assert |df_stringFromRef(res)| == 0 ||
    df_intFromRef(pb) == |df_stringFromRef(b)| ||
    df_stringFromRef(res)[|df_stringFromRef(res)| - 1] <=
    df_stringFromRef(b)[df_intFromRef(pb)]
  ret_0 := res
  goto lbl_ret_0
  label lbl_ret_0
}

method f_plus_TF_T_String$NT_Any(this$dispatch: Ref, other: Ref)
  returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_stringType())


/merge_sort_of_string.kt:(1883,1894): info: Generated Viper text for mergeSorted:
method f_mergeSorted_TF_T_String(this$extension: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_stringType())
  ensures |df_stringFromRef(ret_0)| == |df_stringFromRef(this$extension)|
  ensures (forall anon$builtin_4: Int ::1 <= anon$builtin_4 &&
      anon$builtin_4 < |df_stringFromRef(ret_0)| ==>
      df_stringFromRef(ret_0)[anon$builtin_4 - 1] <=
      df_stringFromRef(ret_0)[anon$builtin_4])
{
  inhale df_isSubtype(df_typeOf(this$extension), df_stringType())
  if (|df_stringFromRef(this$extension)| <= 1) {
    ret_0 := this$extension
  } else {
    var anon_0: Ref
    var anon_1: Ref
    var anon_2: Ref
    var anon_3: Ref
    anon_1 := f_subs_TF_T_String$T_Int$T_Int(this$extension, df_intToRef(0),
      sp_divInts(sp_stringLength(this$extension), df_intToRef(2)))
    anon_0 := f_mergeSorted_TF_T_String(anon_1)
    anon_3 := f_subs_TF_T_String$T_Int$T_Int(this$extension, sp_divInts(sp_stringLength(this$extension),
      df_intToRef(2)), sp_stringLength(this$extension))
    anon_2 := f_mergeSorted_TF_T_String(anon_3)
    ret_0 := f_mergeStrings_TF_T_String$T_String(anon_0, anon_2)
  }
  goto lbl_0
  label lbl_0
}

method f_mergeStrings_TF_T_String$T_String(a: Ref, b: Ref)
  returns (ret: Ref)
  requires (forall anon$builtin_5: Int ::(1 <= anon$builtin_5 &&
      anon$builtin_5 < |df_stringFromRef(a)| ==>
      df_stringFromRef(a)[anon$builtin_5 - 1] <=
      df_stringFromRef(a)[anon$builtin_5]) &&
      (1 <= anon$builtin_5 && anon$builtin_5 < |df_stringFromRef(b)| ==>
      df_stringFromRef(b)[anon$builtin_5 - 1] <=
      df_stringFromRef(b)[anon$builtin_5]))
  ensures df_isSubtype(df_typeOf(ret), df_stringType())
  ensures |df_stringFromRef(ret)| ==
    |df_stringFromRef(a)| + |df_stringFromRef(b)|
  ensures (forall anon$builtin_6: Int ::1 <= anon$builtin_6 &&
      anon$builtin_6 < |df_stringFromRef(ret)| ==>
      df_stringFromRef(ret)[anon$builtin_6 - 1] <=
      df_stringFromRef(ret)[anon$builtin_6])


method f_subs_TF_T_String$T_Int$T_Int(this$extension: Ref, lo: Ref, hi: Ref)
  returns (ret: Ref)
  requires 0 <= df_intFromRef(lo) && df_intFromRef(lo) <= df_intFromRef(hi) &&
    df_intFromRef(hi) <= |df_stringFromRef(this$extension)|
  ensures df_isSubtype(df_typeOf(ret), df_stringType())
  ensures |df_stringFromRef(ret)| == df_intFromRef(hi) - df_intFromRef(lo)
  ensures (forall anon$builtin_7: Int ::0 <= anon$builtin_7 &&
      anon$builtin_7 < |df_stringFromRef(ret)| ==>
      df_stringFromRef(ret)[anon$builtin_7] ==
      df_stringFromRef(this$extension)[anon$builtin_7 + df_intFromRef(lo)])
