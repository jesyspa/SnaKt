/simple_precondition.kt:(238,242): info: Generated Viper text for test:
field bf_size: Ref

method f_test_TF_T_Int(idx: Ref) returns (ret_0: Ref)
  requires 0 <= df_intFromRef(idx)
  requires df_intFromRef(idx) < 3
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  inhale df_isSubtype(df_typeOf(idx), df_intType())
  assert 0 <= df_intFromRef(idx)
  assert df_intFromRef(idx) < 3
  assert !(df_intFromRef(idx) == 100)
  assert Seq(97, 97, 97)[df_intFromRef(idx)] == 97
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/simple_precondition.kt:(446,469): info: Generated Viper text for inlineWithSpecification:
method f_inlineWithSpecification_TF_T_Boolean(bool: Ref)
  returns (ret_0: Ref)
  requires true
  requires df_boolFromRef(bool)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  inhale df_isSubtype(df_typeOf(bool), df_boolType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/simple_precondition.kt:(560,569): info: Generated Viper text for good_call:
method f_good_call_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_2: Ref
  var ret_1: Ref
  var anon_0: Ref
  var ret_2: Ref
  var anon_1: Ref
  anon_2 := f_test_TF_T_Int(df_intToRef(2))
  anon_0 := df_boolToRef(true)
  label lbl_1
  inhale df_isSubtype(df_typeOf(ret_1), df_unitType())
  anon_1 := df_boolToRef(false)
  label lbl_2
  inhale df_isSubtype(df_typeOf(ret_2), df_unitType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method f_test_TF_T_Int(idx: Ref) returns (ret: Ref)
  requires 0 <= df_intFromRef(idx)
  requires df_intFromRef(idx) < 3
  ensures df_isSubtype(df_typeOf(ret), df_unitType())
