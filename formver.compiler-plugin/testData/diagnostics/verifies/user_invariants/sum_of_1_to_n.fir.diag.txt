/sum_of_1_to_n.kt:(64,91): info: Generated Viper text for recursiveSumOfIntegersUpToN:
method f_recursiveSumOfIntegersUpToN_TF_T_Int(n: Ref) returns (ret_0: Ref)
  requires df_intFromRef(n) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
  ensures df_intFromRef(ret_0) ==
    df_intFromRef(n) * (df_intFromRef(n) + 1) / 2
{
  inhale df_isSubtype(df_typeOf(n), df_intType())
  if (df_intFromRef(n) == 0) {
    ret_0 := df_intToRef(0)
    goto lbl_0
  } else {
    var anon_0: Ref
    anon_0 := f_recursiveSumOfIntegersUpToN_TF_T_Int(sp_minusInts(n, df_intToRef(1)))
    ret_0 := sp_plusInts(n, anon_0)
    goto lbl_0
  }
  label lbl_0
}

/sum_of_1_to_n.kt:(296,314): info: Generated Viper text for sumOfIntegersUpToN:
method f_sumOfIntegersUpToN_TF_T_Int(n: Ref) returns (ret_0: Ref)
  requires df_intFromRef(n) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
  ensures df_intFromRef(ret_0) ==
    df_intFromRef(n) * (df_intFromRef(n) + 1) / 2
{
  var sum: Ref
  var i: Ref
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(n), df_intType())
  sum := df_intToRef(0)
  i := df_intToRef(0)
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(sum), df_intType())
    invariant df_isSubtype(df_typeOf(i), df_intType())
    invariant df_isSubtype(df_typeOf(n), df_intType())
    invariant df_intFromRef(i) <= df_intFromRef(n)
    invariant df_intFromRef(sum) ==
      df_intFromRef(i) * (df_intFromRef(i) + 1) / 2
  anon_0 := sp_ltInts(i, n)
  if (df_boolFromRef(anon_0)) {
    sum := sp_plusInts(sum, sp_plusInts(i, df_intToRef(1)))
    i := sp_plusInts(i, df_intToRef(1))
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(sum), df_intType())
  assert df_isSubtype(df_typeOf(i), df_intType())
  assert df_isSubtype(df_typeOf(n), df_intType())
  assert df_intFromRef(i) <= df_intFromRef(n)
  assert df_intFromRef(sum) ==
    df_intFromRef(i) * (df_intFromRef(i) + 1) / 2
  ret_0 := sum
  goto lbl_ret_0
  label lbl_ret_0
}
