/simple_loop.kt:(239,243): info: Generated Viper text for test:
field bf_size: Ref

method f_test_TF_T_Int(n: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var it: Ref
  var holds: Ref
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(n), df_intType())
  it := df_intToRef(0)
  holds := df_boolToRef(true)
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(it), df_intType())
    invariant df_isSubtype(df_typeOf(holds), df_boolType())
    invariant df_isSubtype(df_typeOf(n), df_intType())
    invariant df_intFromRef(it) <= 10
    invariant df_boolFromRef(holds)
  anon_0 := sp_ltInts(it, df_intToRef(10))
  if (df_boolFromRef(anon_0)) {
    it := sp_plusInts(it, df_intToRef(1))
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(it), df_intType())
  assert df_isSubtype(df_typeOf(holds), df_boolType())
  assert df_isSubtype(df_typeOf(n), df_intType())
  assert df_intFromRef(it) <= 10
  assert df_boolFromRef(holds)
  assert df_intFromRef(it) == 10
  if (df_intFromRef(it) <= df_intFromRef(n)) {
    var anon_1: Ref
    label lbl_continue_1
      invariant df_isSubtype(df_typeOf(it), df_intType())
      invariant df_isSubtype(df_typeOf(holds), df_boolType())
      invariant df_isSubtype(df_typeOf(n), df_intType())
      invariant df_intFromRef(it) <= df_intFromRef(n)
      invariant df_boolFromRef(holds)
    anon_1 := sp_ltInts(it, n)
    if (df_boolFromRef(anon_1)) {
      it := sp_plusInts(it, df_intToRef(1))
      goto lbl_continue_1
    }
    label lbl_break_1
    assert df_isSubtype(df_typeOf(it), df_intType())
    assert df_isSubtype(df_typeOf(holds), df_boolType())
    assert df_isSubtype(df_typeOf(n), df_intType())
    assert df_intFromRef(it) <= df_intFromRef(n)
    assert df_boolFromRef(holds)
    assert df_intFromRef(it) == df_intFromRef(n)
  }
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/simple_loop.kt:(652,666): info: Generated Viper text for loopInsideLoop:
method f_loopInsideLoop_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var i: Ref
  var anon_0: Ref
  i := df_intToRef(0)
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(i), df_intType())
    invariant df_intFromRef(i) <= 10
  anon_0 := sp_ltInts(i, df_intToRef(10))
  if (df_boolFromRef(anon_0)) {
    var j: Ref
    var anon_1: Ref
    j := sp_plusInts(i, df_intToRef(1))
    label lbl_continue_1
      invariant df_isSubtype(df_typeOf(j), df_intType())
      invariant df_isSubtype(df_typeOf(i), df_intType())
      invariant df_intFromRef(i) < df_intFromRef(j)
      invariant df_intFromRef(j) <= 10
    anon_1 := sp_ltInts(j, df_intToRef(10))
    if (df_boolFromRef(anon_1)) {
      j := sp_plusInts(j, df_intToRef(1))
      goto lbl_continue_1
    }
    label lbl_break_1
    assert df_isSubtype(df_typeOf(j), df_intType())
    assert df_isSubtype(df_typeOf(i), df_intType())
    assert df_intFromRef(i) < df_intFromRef(j)
    assert df_intFromRef(j) <= 10
    i := sp_plusInts(i, df_intToRef(1))
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(i), df_intType())
  assert df_intFromRef(i) <= 10
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/simple_loop.kt:(974,983): info: Generated Viper text for withBreak:
field bf_size: Ref

method f_withBreak_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var i: Ref
  var anon_0: Ref
  i := df_intToRef(0)
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(i), df_intType())
    invariant df_intFromRef(i) <= 10
  anon_0 := df_boolToRef(true)
  if (df_boolFromRef(anon_0)) {
    if (df_intFromRef(i) >= 10) {
      goto lbl_break_0
    }
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(i), df_intType())
  assert df_intFromRef(i) <= 10
  assert df_intFromRef(i) == 10
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/simple_loop.kt:(1230,1256): info: Generated Viper text for test_boolean_postcondition:
field bf_e: Ref

field bf_size: Ref

method con_T_Int(e: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_WithVar())
  ensures acc(p_c_WithVar_shared(ret), wildcard)
  ensures acc(p_c_WithVar_unique(ret), write)


method f_doSomething_TF_T_WithVar(this$dispatch: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_boolType())


method f_test_boolean_postcondition_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var withVar: Ref
  var boolean: Ref
  var anon_0: Ref
  withVar := con_T_Int(df_intToRef(42))
  boolean := df_boolToRef(true)
  label lbl_continue_0
    invariant acc(p_c_WithVar_shared(withVar), wildcard)
    invariant df_isSubtype(df_typeOf(withVar), df_c_WithVar())
    invariant df_isSubtype(df_typeOf(boolean), df_boolType())
  anon_0 := boolean
  if (df_boolFromRef(anon_0)) {
    boolean := f_doSomething_TF_T_WithVar(withVar)
    goto lbl_continue_0
  }
  label lbl_break_0
  assert acc(p_c_WithVar_shared(withVar), wildcard)
  assert df_isSubtype(df_typeOf(withVar), df_c_WithVar())
  assert df_isSubtype(df_typeOf(boolean), df_boolType())
  assert !df_boolFromRef(boolean)
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
