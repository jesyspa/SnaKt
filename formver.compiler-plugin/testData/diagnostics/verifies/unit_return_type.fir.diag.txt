/unit_return_type.kt:(171,176): info: Generated Viper text for idFun:
method f_idFun_TF_NT_Any(p_t: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_nullable(df_anyType()))
{
  inhale df_isSubtype(df_typeOf(p_t), df_nullable(df_anyType()))
  ret_0 := p_t
  goto lbl_0
  label lbl_0
}

/unit_return_type.kt:(195,208): info: Generated Viper text for directReturns:
method f_directReturns_TF_T_Boolean(p_b: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  inhale df_isSubtype(df_typeOf(p_b), df_boolType())
  if (df_boolFromRef(p_b)) {
    ret_0 := df_unitValue()
    goto lbl_0
  } else {
    var anon_0: Ref
    var anon_1: Ref
    anon_1 := f_idFun_TF_NT_Any(p_b)
    anon_0 := anon_1
    inhale df_isSubtype(df_typeOf(anon_0), df_boolType())
    if (df_boolFromRef(anon_0)) {
      ret_0 := df_unitValue()
      goto lbl_0
    }
  }
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method f_idFun_TF_NT_Any(p_t: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_nullable(df_anyType()))


/unit_return_type.kt:(374,387): info: Generated Viper text for useInlineUnit:
field bf_size: Ref

method f_idFun_TF_NT_Any(p_t: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_nullable(df_anyType()))


method f_useInlineUnit_TF_T_Boolean(p_b: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var l0_unitRes: Ref
  var ret_1: Ref
  var anon_0: Ref
  var ret_2: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(p_b), df_boolType())
  inhale df_isSubtype(df_typeOf(p_b), df_nullable(df_anyType()))
  anon_0 := p_b
  inhale df_isSubtype(df_typeOf(anon_0), df_boolType())
  anon_1 := anon_0
  if (df_boolFromRef(anon_1)) {
    var l4_tmp: Ref
    var anon_2: Ref
    var anon_3: Ref
    l4_tmp := df_intToRef(42)
    anon_3 := f_idFun_TF_NT_Any(l4_tmp)
    anon_2 := anon_3
    inhale df_isSubtype(df_typeOf(anon_2), df_intType())
  }
  label lbl_2
  inhale df_isSubtype(df_typeOf(ret_2), df_unitType())
  label lbl_1
  inhale df_isSubtype(df_typeOf(ret_1), df_unitType())
  l0_unitRes := ret_1
  assert l0_unitRes == df_unitValue()
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
