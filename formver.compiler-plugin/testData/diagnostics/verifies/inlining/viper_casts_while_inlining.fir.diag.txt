/viper_casts_while_inlining.kt:(250,255): info: Generated Viper text for idFun:
method f_idFun_TF_NT_Any(arg: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_nullable(df_anyType()))
{
  inhale df_isSubtype(df_typeOf(arg), df_nullable(df_anyType()))
  ret_0 := arg
  goto lbl_0
  label lbl_0
}

/viper_casts_while_inlining.kt:(609,626): info: Generated Viper text for checkMemberAccess:
field bf_member: Ref

method con_T_Int(member: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_ClassWithMember())
  ensures acc(p_c_ClassWithMember_shared(ret), wildcard)
  ensures acc(p_c_ClassWithMember_unique(ret), write)
  ensures df_intFromRef((unfolding acc(p_c_ClassWithMember_shared(ret), wildcard) in
      ret.bf_member)) ==
    df_intFromRef(member)


method f_checkMemberAccess_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
  ensures df_boolFromRef(ret_0) == true
{
  var obj: Ref
  var anon_4: Ref
  var anon_5: Ref
  var ret_1: Ref
  var anon_0: Ref
  var anon_6: Ref
  var ret_2: Ref
  var anon_1: Ref
  var anon_7: Ref
  var anon_8: Ref
  var anon_9: Ref
  var ret_3: Ref
  var anon_2: Ref
  var anon_10: Ref
  var ret_4: Ref
  var anon_3: Ref
  var anon_11: Ref
  obj := con_T_Int(df_intToRef(42))
  inhale df_isSubtype(df_typeOf(obj), df_nullable(df_anyType()))
  anon_0 := obj
  anon_7 := f_idFun_TF_NT_Any(anon_0)
  anon_1 := anon_7
  inhale df_isSubtype(df_typeOf(anon_1), df_c_ClassWithMember())
  inhale acc(p_c_ClassWithMember_shared(anon_1), wildcard)
  unfold acc(p_c_ClassWithMember_shared(anon_1), wildcard)
  ret_2 := anon_1.bf_member
  goto lbl_2
  label lbl_2
  anon_6 := ret_2
  ret_1 := anon_6
  inhale df_isSubtype(df_typeOf(ret_1), df_nullable(df_anyType()))
  goto lbl_1
  label lbl_1
  anon_5 := ret_1
  anon_4 := anon_5
  inhale df_isSubtype(df_typeOf(anon_4), df_intType())
  inhale df_isSubtype(df_typeOf(obj), df_nullable(df_anyType()))
  anon_2 := obj
  inhale df_isSubtype(df_typeOf(anon_2), df_c_ClassWithMember())
  inhale acc(p_c_ClassWithMember_shared(anon_2), wildcard)
  anon_3 := anon_2
  unfold acc(p_c_ClassWithMember_shared(obj), wildcard)
  anon_11 := obj.bf_member
  ret_0 := df_boolToRef(df_intFromRef(anon_11) == 42)
  goto lbl_0
  label lbl_4
  anon_10 := ret_4
  ret_3 := anon_10
  inhale df_isSubtype(df_typeOf(ret_3), df_nullable(df_anyType()))
  goto lbl_3
  label lbl_3
  anon_9 := ret_3
  anon_8 := anon_9
  inhale df_isSubtype(df_typeOf(anon_8), df_nothingType())
  label lbl_0
}

method f_idFun_TF_NT_Any(arg: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_nullable(df_anyType()))


/viper_casts_while_inlining.kt:(895,919): info: Generated Viper text for checkGenericMemberAccess:
field bf_wrapped: Ref

method con_NT_Any(wrapped: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_Box())
  ensures acc(p_c_Box_shared(ret), wildcard)
  ensures acc(p_c_Box_unique(ret), write)
  ensures (unfolding acc(p_c_Box_shared(ret), wildcard) in ret.bf_wrapped) ==
    wrapped


method f_checkGenericMemberAccess_TF_T_Box(box: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
  ensures df_boolFromRef(ret_0) == true
{
  var ret_1: Ref
  var anon_0: Ref
  var ret_2: Ref
  var anon_1: Ref
  var anon_4: Ref
  var anon_5: Ref
  var anon_6: Ref
  var ret_3: Ref
  var anon_2: Ref
  var anon_7: Ref
  var anon_8: Ref
  var anon_9: Ref
  var ret_4: Ref
  var anon_3: Ref
  var anon_10: Ref
  var anon_11: Ref
  inhale df_isSubtype(df_typeOf(box), df_c_Box())
  inhale acc(p_c_Box_shared(box), wildcard)
  inhale df_isSubtype(df_typeOf(box), df_nullable(df_anyType()))
  anon_0 := box
  anon_4 := f_idFun_TF_NT_Any(anon_0)
  anon_1 := anon_4
  inhale df_isSubtype(df_typeOf(anon_1), df_c_Box())
  inhale acc(p_c_Box_shared(anon_1), wildcard)
  unfold acc(p_c_Box_shared(anon_1), wildcard)
  ret_2 := anon_1.bf_wrapped
  goto lbl_2
  label lbl_2
  ret_1 := ret_2
  goto lbl_1
  label lbl_1
  unfold acc(p_c_Box_shared(box), wildcard)
  anon_8 := box.bf_wrapped
  anon_7 := con_NT_Any(anon_8)
  anon_2 := anon_7
  inhale df_isSubtype(df_typeOf(anon_2), df_nullable(df_anyType()))
  inhale df_isSubtype(df_typeOf(anon_2), df_c_Box())
  inhale acc(p_c_Box_shared(anon_2), wildcard)
  anon_3 := anon_2
  unfold acc(p_c_Box_shared(anon_3), wildcard)
  anon_10 := anon_3.bf_wrapped
  unfold acc(p_c_Box_shared(box), wildcard)
  anon_11 := box.bf_wrapped
  ret_0 := df_boolToRef(anon_10 == anon_11)
  goto lbl_0
  label lbl_4
  anon_9 := ret_4
  ret_3 := anon_9
  inhale df_isSubtype(df_typeOf(ret_3), df_nullable(df_anyType()))
  goto lbl_3
  label lbl_3
  anon_6 := ret_3
  anon_5 := anon_6
  inhale df_isSubtype(df_typeOf(anon_5), df_nothingType())
  label lbl_0
}

method f_idFun_TF_NT_Any(arg: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_nullable(df_anyType()))


/viper_casts_while_inlining.kt:(1161,1182): info: Generated Viper text for checkArgumentIsCopied:
field bf_a: Ref

method f_checkArgumentIsCopied_TF_T_ClassWithVar(x: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_2: Ref
  var anon_3: Ref
  var ret_1: Ref
  var anon_0: Ref
  var anon_4: Ref
  var anon_5: Ref
  var ret_2: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(x), df_c_ClassWithVar())
  inhale acc(p_shared(x), wildcard)
  inhale acc(x.bf_a, write)
  anon_4 := x.bf_a
  exhale acc(x.bf_a, write)
  inhale df_isSubtype(df_typeOf(anon_4), df_intType())
  anon_0 := anon_4
  inhale df_isSubtype(df_typeOf(anon_0), df_nullable(df_anyType()))
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  anon_1 := anon_0
  inhale acc(x.bf_a, write)
  x.bf_a := df_intToRef(42)
  exhale acc(x.bf_a, write)
  ret_2 := anon_1
  goto lbl_2
  label lbl_2
  anon_5 := ret_2
  ret_1 := anon_5
  inhale df_isSubtype(df_typeOf(ret_1), df_nullable(df_anyType()))
  goto lbl_1
  label lbl_1
  anon_3 := ret_1
  anon_2 := anon_3
  inhale df_isSubtype(df_typeOf(anon_2), df_intType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/viper_casts_while_inlining.kt:(1347,1364): info: Generated Viper text for accessManyMembers:
field bf_a: Ref

field bf_b: Ref

field bf_c: Ref

field bf_i: Ref

method f_accessManyMembers_TF_T_ManyMembers(m: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_4: Ref
  var anon_5: Ref
  var ret_1: Ref
  var anon_0: Ref
  var anon_6: Ref
  var ret_2: Ref
  var anon_1: Ref
  var anon_7: Ref
  var anon_8: Ref
  var anon_9: Ref
  var anon_10: Ref
  var anon_11: Ref
  var anon_12: Ref
  var anon_13: Ref
  var anon_14: Ref
  var ret_3: Ref
  var anon_2: Ref
  var anon_15: Ref
  var ret_4: Ref
  var anon_3: Ref
  var anon_16: Ref
  var anon_17: Ref
  var anon_18: Ref
  var anon_19: Ref
  var anon_20: Ref
  var anon_21: Ref
  var anon_22: Ref
  inhale df_isSubtype(df_typeOf(m), df_c_ManyMembers())
  inhale acc(p_c_ManyMembers_shared(m), wildcard)
  inhale df_isSubtype(df_typeOf(m), df_nullable(df_anyType()))
  anon_0 := m
  inhale df_isSubtype(df_typeOf(anon_0), df_c_ManyMembers())
  inhale acc(p_c_ManyMembers_shared(anon_0), wildcard)
  anon_1 := anon_0
  unfold acc(p_c_ManyMembers_shared(anon_1), wildcard)
  anon_9 := anon_1.bf_i
  anon_8 := f_idFun_TF_NT_Any(anon_9)
  anon_7 := anon_8
  inhale df_isSubtype(df_typeOf(anon_7), df_intType())
  inhale acc(anon_1.bf_b, write)
  anon_12 := anon_1.bf_b
  exhale acc(anon_1.bf_b, write)
  inhale df_isSubtype(df_typeOf(anon_12), df_boolType())
  anon_11 := f_idFun_TF_NT_Any(anon_12)
  anon_10 := anon_11
  inhale df_isSubtype(df_typeOf(anon_10), df_boolType())
  unfold acc(p_c_ManyMembers_shared(anon_1), wildcard)
  ret_2 := anon_1.bf_c
  goto lbl_2
  label lbl_2
  anon_6 := ret_2
  ret_1 := anon_6
  inhale df_isSubtype(df_typeOf(ret_1), df_nullable(df_anyType()))
  goto lbl_1
  label lbl_1
  anon_5 := ret_1
  anon_4 := anon_5
  inhale df_isSubtype(df_typeOf(anon_4), df_c_ClassWithVar())
  inhale acc(p_c_ClassWithVar_shared(anon_4), wildcard)
  inhale df_isSubtype(df_typeOf(m), df_nullable(df_anyType()))
  anon_2 := m
  anon_16 := f_idFun_TF_NT_Any(anon_2)
  anon_3 := anon_16
  inhale df_isSubtype(df_typeOf(anon_3), df_c_ManyMembers())
  inhale acc(p_c_ManyMembers_shared(anon_3), wildcard)
  unfold acc(p_c_ManyMembers_shared(anon_3), wildcard)
  anon_19 := anon_3.bf_i
  anon_18 := f_idFun_TF_NT_Any(anon_19)
  anon_17 := anon_18
  inhale df_isSubtype(df_typeOf(anon_17), df_intType())
  inhale acc(anon_3.bf_b, write)
  anon_22 := anon_3.bf_b
  exhale acc(anon_3.bf_b, write)
  inhale df_isSubtype(df_typeOf(anon_22), df_boolType())
  anon_21 := f_idFun_TF_NT_Any(anon_22)
  anon_20 := anon_21
  inhale df_isSubtype(df_typeOf(anon_20), df_boolType())
  unfold acc(p_c_ManyMembers_shared(anon_3), wildcard)
  ret_4 := anon_3.bf_c
  goto lbl_4
  label lbl_4
  anon_15 := ret_4
  ret_3 := anon_15
  inhale df_isSubtype(df_typeOf(ret_3), df_nullable(df_anyType()))
  goto lbl_3
  label lbl_3
  anon_14 := ret_3
  anon_13 := anon_14
  inhale df_isSubtype(df_typeOf(anon_13), df_c_ClassWithVar())
  inhale acc(p_c_ClassWithVar_shared(anon_13), wildcard)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method f_idFun_TF_NT_Any(arg: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_nullable(df_anyType()))


/viper_casts_while_inlining.kt:(1540,1558): info: Generated Viper text for checkEvaluatedOnce:
field bf_a: Ref

field bf_b: Ref

field bf_c: Ref

field bf_i: Ref

field bf_size: Ref

method f_checkEvaluatedOnce_TF_T_Int$T_ManyMembers(i: Ref, mm: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_2: Ref
  var anon_3: Ref
  var ret_1: Ref
  var anon_0: Ref
  var anon_4: Ref
  var anon_5: Ref
  var anon_6: Ref
  var ret_2: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(i), df_intType())
  inhale df_isSubtype(df_typeOf(mm), df_c_ManyMembers())
  inhale acc(p_c_ManyMembers_shared(mm), wildcard)
  inhale acc(mm.bf_b, write)
  anon_5 := mm.bf_b
  exhale acc(mm.bf_b, write)
  inhale df_isSubtype(df_typeOf(anon_5), df_boolType())
  if (df_boolFromRef(anon_5)) {
    anon_4 := df_intToRef(1)
  } else {
    anon_4 := df_intToRef(-1)}
  anon_0 := sp_plusInts(i, anon_4)
  inhale df_isSubtype(df_typeOf(anon_0), df_nullable(df_anyType()))
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  anon_1 := anon_0
  assert df_intFromRef(anon_1) == df_intFromRef(anon_1)
  label lbl_2
  inhale df_isSubtype(df_typeOf(ret_2), df_unitType())
  anon_6 := ret_2
  ret_1 := anon_6
  inhale df_isSubtype(df_typeOf(ret_1), df_nullable(df_anyType()))
  goto lbl_1
  label lbl_1
  anon_3 := ret_1
  anon_2 := anon_3
  inhale df_isSubtype(df_typeOf(anon_2), df_unitType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
