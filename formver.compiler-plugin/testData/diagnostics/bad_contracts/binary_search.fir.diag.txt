/binary_search.kt:(90,110): info: Generated Viper text for mid_increased_by_one:
field sp_size: Ref

method f_get_TF_T_List$T_Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(index) >= 0
  requires df_intFromRef(this$dispatch.sp_size) > df_intFromRef(index)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_intType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))


method f_isEmpty_TF_T_List(this$dispatch: Ref) returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_boolType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))
  ensures df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) == 0
  ensures !df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) > 0


method f_mid_increased_by_one_TF_T_List$T_Int(arr: Ref, target: Ref)
  returns (ret_0: Ref)
  requires acc(arr.sp_size, write)
  requires df_intFromRef(arr.sp_size) >= 0
  ensures acc(arr.sp_size, write)
  ensures df_intFromRef(arr.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  var size: Ref
  var mid: Ref
  var anon_0: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(arr), df_c_pkg$kotlin_collections_List())
  inhale acc(p_pkg$kotlin_collections$c_List_shared(arr), wildcard)
  inhale df_isSubtype(df_typeOf(target), df_intType())
  size := arr.sp_size
  inhale df_isSubtype(df_typeOf(size), df_intType())
  anon_0 := arr.sp_size
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  mid := sp_plusInts(sp_divInts(anon_0, df_intToRef(2)), df_intToRef(1))
  anon_1 := f_isEmpty_TF_T_List(arr)
  if (df_boolFromRef(anon_1)) {
    ret_0 := df_boolToRef(false)
  } else {
    var anon_2: Ref
    anon_2 := f_get_TF_T_List$T_Int(arr, mid)
    if (df_intFromRef(anon_2) == df_intFromRef(target)) {
      ret_0 := df_boolToRef(true)
    } else {
      var anon_3: Ref
      anon_3 := f_get_TF_T_List$T_Int(arr, mid)
      if (df_intFromRef(anon_3) < df_intFromRef(target)) {
        var anon_4: Ref
        anon_4 := f_subList_TF_T_List$T_Int$T_Int(arr, sp_plusInts(mid, df_intToRef(1)),
          size)
        ret_0 := f_mid_increased_by_one_TF_T_List$T_Int(anon_4, target)
      } else {
        var anon_5: Ref
        anon_5 := f_subList_TF_T_List$T_Int$T_Int(arr, df_intToRef(0), mid)
        ret_0 := f_mid_increased_by_one_TF_T_List$T_Int(anon_5, target)
      }
    }
  }
  goto lbl_0
  label lbl_0
}

method f_subList_TF_T_List$T_Int$T_Int(this$dispatch: Ref, fromIndex: Ref, toIndex: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(fromIndex) <= df_intFromRef(toIndex)
  requires df_intFromRef(fromIndex) >= 0
  requires df_intFromRef(toIndex) <= df_intFromRef(this$dispatch.sp_size)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_c_pkg$kotlin_collections_List())
  ensures acc(ret.sp_size, write)
  ensures df_intFromRef(ret.sp_size) >= 0
  ensures acc(p_pkg$kotlin_collections$c_List_shared(ret), wildcard)
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))
  ensures df_intFromRef(ret.sp_size) ==
    df_intFromRef(toIndex) - df_intFromRef(fromIndex)


/binary_search.kt:(305,313): warning: Invalid index for list 'arr', the index may be greater than the list's size.

/binary_search.kt:(511,531): info: Generated Viper text for mid_decreased_by_one:
field sp_size: Ref

method f_get_TF_T_List$T_Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(index) >= 0
  requires df_intFromRef(this$dispatch.sp_size) > df_intFromRef(index)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_intType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))


method f_isEmpty_TF_T_List(this$dispatch: Ref) returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_boolType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))
  ensures df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) == 0
  ensures !df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) > 0


method f_mid_decreased_by_one_TF_T_List$T_Int(arr: Ref, target: Ref)
  returns (ret_0: Ref)
  requires acc(arr.sp_size, write)
  requires df_intFromRef(arr.sp_size) >= 0
  ensures acc(arr.sp_size, write)
  ensures df_intFromRef(arr.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  var size: Ref
  var mid: Ref
  var anon_0: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(arr), df_c_pkg$kotlin_collections_List())
  inhale acc(p_pkg$kotlin_collections$c_List_shared(arr), wildcard)
  inhale df_isSubtype(df_typeOf(target), df_intType())
  size := arr.sp_size
  inhale df_isSubtype(df_typeOf(size), df_intType())
  anon_0 := arr.sp_size
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  mid := sp_minusInts(sp_divInts(anon_0, df_intToRef(2)), df_intToRef(1))
  anon_1 := f_isEmpty_TF_T_List(arr)
  if (df_boolFromRef(anon_1)) {
    ret_0 := df_boolToRef(false)
  } else {
    var anon_2: Ref
    anon_2 := f_get_TF_T_List$T_Int(arr, mid)
    if (df_intFromRef(anon_2) == df_intFromRef(target)) {
      ret_0 := df_boolToRef(true)
    } else {
      var anon_3: Ref
      anon_3 := f_get_TF_T_List$T_Int(arr, mid)
      if (df_intFromRef(anon_3) < df_intFromRef(target)) {
        var anon_4: Ref
        anon_4 := f_subList_TF_T_List$T_Int$T_Int(arr, sp_plusInts(mid, df_intToRef(1)),
          size)
        ret_0 := f_mid_decreased_by_one_TF_T_List$T_Int(anon_4, target)
      } else {
        var anon_5: Ref
        anon_5 := f_subList_TF_T_List$T_Int$T_Int(arr, df_intToRef(0), mid)
        ret_0 := f_mid_decreased_by_one_TF_T_List$T_Int(anon_5, target)
      }
    }
  }
  goto lbl_0
  label lbl_0
}

method f_subList_TF_T_List$T_Int$T_Int(this$dispatch: Ref, fromIndex: Ref, toIndex: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(fromIndex) <= df_intFromRef(toIndex)
  requires df_intFromRef(fromIndex) >= 0
  requires df_intFromRef(toIndex) <= df_intFromRef(this$dispatch.sp_size)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_c_pkg$kotlin_collections_List())
  ensures acc(ret.sp_size, write)
  ensures df_intFromRef(ret.sp_size) >= 0
  ensures acc(p_pkg$kotlin_collections$c_List_shared(ret), wildcard)
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))
  ensures df_intFromRef(ret.sp_size) ==
    df_intFromRef(toIndex) - df_intFromRef(fromIndex)


/binary_search.kt:(726,734): warning: Invalid index for list 'arr', the index may be less than zero.

/binary_search.kt:(932,964): info: Generated Viper text for mid_decreased_by_one_in_rec_call:
field sp_size: Ref

method f_get_TF_T_List$T_Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(index) >= 0
  requires df_intFromRef(this$dispatch.sp_size) > df_intFromRef(index)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_intType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))


method f_isEmpty_TF_T_List(this$dispatch: Ref) returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_boolType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))
  ensures df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) == 0
  ensures !df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) > 0


method f_mid_decreased_by_one_in_rec_call_TF_T_List$T_Int(arr: Ref, target: Ref)
  returns (ret_0: Ref)
  requires acc(arr.sp_size, write)
  requires df_intFromRef(arr.sp_size) >= 0
  ensures acc(arr.sp_size, write)
  ensures df_intFromRef(arr.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  var size: Ref
  var mid: Ref
  var anon_0: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(arr), df_c_pkg$kotlin_collections_List())
  inhale acc(p_pkg$kotlin_collections$c_List_shared(arr), wildcard)
  inhale df_isSubtype(df_typeOf(target), df_intType())
  size := arr.sp_size
  inhale df_isSubtype(df_typeOf(size), df_intType())
  anon_0 := arr.sp_size
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  mid := sp_divInts(anon_0, df_intToRef(2))
  anon_1 := f_isEmpty_TF_T_List(arr)
  if (df_boolFromRef(anon_1)) {
    ret_0 := df_boolToRef(false)
  } else {
    var anon_2: Ref
    anon_2 := f_get_TF_T_List$T_Int(arr, mid)
    if (df_intFromRef(anon_2) == df_intFromRef(target)) {
      ret_0 := df_boolToRef(true)
    } else {
      var anon_3: Ref
      anon_3 := f_get_TF_T_List$T_Int(arr, mid)
      if (df_intFromRef(anon_3) < df_intFromRef(target)) {
        var anon_4: Ref
        anon_4 := f_subList_TF_T_List$T_Int$T_Int(arr, sp_plusInts(mid, df_intToRef(1)),
          size)
        ret_0 := f_mid_decreased_by_one_in_rec_call_TF_T_List$T_Int(anon_4,
          target)
      } else {
        var anon_5: Ref
        anon_5 := f_subList_TF_T_List$T_Int$T_Int(arr, df_intToRef(0), sp_minusInts(mid,
          df_intToRef(1)))
        ret_0 := f_mid_decreased_by_one_in_rec_call_TF_T_List$T_Int(anon_5,
          target)
      }
    }
  }
  goto lbl_0
  label lbl_0
}

method f_subList_TF_T_List$T_Int$T_Int(this$dispatch: Ref, fromIndex: Ref, toIndex: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(fromIndex) <= df_intFromRef(toIndex)
  requires df_intFromRef(fromIndex) >= 0
  requires df_intFromRef(toIndex) <= df_intFromRef(this$dispatch.sp_size)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_c_pkg$kotlin_collections_List())
  ensures acc(ret.sp_size, write)
  ensures df_intFromRef(ret.sp_size) >= 0
  ensures acc(p_pkg$kotlin_collections$c_List_shared(ret), wildcard)
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))
  ensures df_intFromRef(ret.sp_size) ==
    df_intFromRef(toIndex) - df_intFromRef(fromIndex)


/binary_search.kt:(1345,1368): warning: Invalid sub-list range for list 'arr', the range may be greater than the list's size.

/binary_search.kt:(1405,1425): info: Generated Viper text for unsafe_binary_search:
field sp_size: Ref

method f_get_TF_T_List$T_Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(index) >= 0
  requires df_intFromRef(this$dispatch.sp_size) > df_intFromRef(index)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_intType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))


method f_unsafe_binary_search_TF_T_List$T_Int$T_Int$T_Int(arr: Ref, target: Ref,
  left: Ref, right: Ref)
  returns (ret_0: Ref)
  requires acc(arr.sp_size, write)
  requires df_intFromRef(arr.sp_size) >= 0
  ensures acc(arr.sp_size, write)
  ensures df_intFromRef(arr.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  var mid: Ref
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(arr), df_c_pkg$kotlin_collections_List())
  inhale acc(p_pkg$kotlin_collections$c_List_shared(arr), wildcard)
  inhale df_isSubtype(df_typeOf(target), df_intType())
  inhale df_isSubtype(df_typeOf(left), df_intType())
  inhale df_isSubtype(df_typeOf(right), df_intType())
  if (df_intFromRef(left) > df_intFromRef(right)) {
    ret_0 := df_boolToRef(false)
    goto lbl_0
  }
  mid := sp_plusInts(left, sp_divInts(sp_minusInts(right, left), df_intToRef(2)))
  anon_0 := f_get_TF_T_List$T_Int(arr, mid)
  if (df_intFromRef(anon_0) == df_intFromRef(target)) {
    ret_0 := df_boolToRef(true)
  } else {
    var anon_1: Ref
    anon_1 := f_get_TF_T_List$T_Int(arr, mid)
    if (df_intFromRef(anon_1) < df_intFromRef(target)) {
      ret_0 := f_unsafe_binary_search_TF_T_List$T_Int$T_Int$T_Int(arr, target,
        sp_plusInts(mid, df_intToRef(1)), right)
    } else {
      ret_0 := f_unsafe_binary_search_TF_T_List$T_Int$T_Int$T_Int(arr, target,
        left, sp_minusInts(mid, df_intToRef(1)))}
  }
  goto lbl_0
  label lbl_0
}

/binary_search.kt:(1608,1616): warning: Invalid index for list 'arr', the index may be less than zero.
