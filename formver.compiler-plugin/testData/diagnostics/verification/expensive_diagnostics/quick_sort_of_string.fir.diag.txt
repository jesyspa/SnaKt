/quick_sort_of_string.kt:(282,294): info: Generated Viper text for minOrMaxChar:
method f$minOrMaxChar$TF$T$String$T$Boolean(this$extension: Ref, calcMin: Ref)
  returns (ret$0: Ref)
  requires |df$stringFromRef(this$extension)| >= 1
  ensures df$isSubtype(df$typeOf(ret$0), df$charType())
  ensures df$boolFromRef(calcMin) ==>
    (forall anon$builtin$4: Int ::0 <= anon$builtin$4 &&
      anon$builtin$4 < |df$stringFromRef(this$extension)| ==>
      df$charFromRef(ret$0) <=
      df$stringFromRef(this$extension)[anon$builtin$4])
  ensures !df$boolFromRef(calcMin) ==>
    (forall anon$builtin$5: Int ::0 <= anon$builtin$5 &&
      anon$builtin$5 < |df$stringFromRef(this$extension)| ==>
      df$charFromRef(ret$0) >=
      df$stringFromRef(this$extension)[anon$builtin$5])
{
  var res: Ref
  var i: Ref
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(this$extension), df$stringType())
  inhale df$isSubtype(df$typeOf(calcMin), df$boolType())
  res := sp$stringGet(this$extension, df$intToRef(0))
  i := df$intToRef(1)
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(res), df$charType())
    invariant df$isSubtype(df$typeOf(i), df$intType())
    invariant df$isSubtype(df$typeOf(calcMin), df$boolType())
    invariant 0 <= df$intFromRef(i) &&
      df$intFromRef(i) <= |df$stringFromRef(this$extension)|
    invariant df$boolFromRef(calcMin) ==>
      (forall anon$builtin$2: Int ::0 <= anon$builtin$2 &&
        anon$builtin$2 < df$intFromRef(i) ==>
        df$charFromRef(res) <=
        df$stringFromRef(this$extension)[anon$builtin$2])
    invariant !df$boolFromRef(calcMin) ==>
      (forall anon$builtin$3: Int ::0 <= anon$builtin$3 &&
        anon$builtin$3 < df$intFromRef(i) ==>
        df$charFromRef(res) >=
        df$stringFromRef(this$extension)[anon$builtin$3])
  anon$0 := sp$ltInts(i, sp$stringLength(this$extension))
  if (df$boolFromRef(anon$0)) {
    var anon$1: Ref
    var anon$2: Ref
    if (df$boolFromRef(calcMin)) {
      anon$2 := sp$ltChars(sp$stringGet(this$extension, i), res)
    } else {
      anon$2 := df$boolToRef(false)}
    if (df$boolFromRef(anon$2)) {
      anon$1 := df$boolToRef(true)
    } elseif (!df$boolFromRef(calcMin)) {
      anon$1 := sp$gtChars(sp$stringGet(this$extension, i), res)
    } else {
      anon$1 := df$boolToRef(false)}
    if (df$boolFromRef(anon$1)) {
      res := sp$stringGet(this$extension, i)
    }
    i := sp$plusInts(i, df$intToRef(1))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(res), df$charType())
  assert df$isSubtype(df$typeOf(i), df$intType())
  assert df$isSubtype(df$typeOf(calcMin), df$boolType())
  assert 0 <= df$intFromRef(i) &&
    df$intFromRef(i) <= |df$stringFromRef(this$extension)|
  assert df$boolFromRef(calcMin) ==>
    (forall anon$builtin$2: Int ::0 <= anon$builtin$2 &&
      anon$builtin$2 < df$intFromRef(i) ==>
      df$charFromRef(res) <=
      df$stringFromRef(this$extension)[anon$builtin$2])
  assert !df$boolFromRef(calcMin) ==>
    (forall anon$builtin$3: Int ::0 <= anon$builtin$3 &&
      anon$builtin$3 < df$intFromRef(i) ==>
      df$charFromRef(res) >=
      df$stringFromRef(this$extension)[anon$builtin$3])
  ret$0 := res
  goto lbl$ret$0
  label lbl$ret$0
}

/quick_sort_of_string.kt:(1135,1144): info: Generated Viper text for quickSort:
method f$minOrMaxChar$TF$T$String$T$Boolean(this$extension: Ref, p$calcMin: Ref)
  returns (ret: Ref)
  requires |df$stringFromRef(this$extension)| >= 1
  ensures df$isSubtype(df$typeOf(ret), df$charType())
  ensures df$boolFromRef(p$calcMin) ==>
    (forall anon$builtin$7: Int ::0 <= anon$builtin$7 &&
      anon$builtin$7 < |df$stringFromRef(this$extension)| ==>
      df$charFromRef(ret) <=
      df$stringFromRef(this$extension)[anon$builtin$7])
  ensures !df$boolFromRef(p$calcMin) ==>
    (forall anon$builtin$8: Int ::0 <= anon$builtin$8 &&
      anon$builtin$8 < |df$stringFromRef(this$extension)| ==>
      df$charFromRef(ret) >=
      df$stringFromRef(this$extension)[anon$builtin$8])


method f$quickSort$TF$T$String(this$extension: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$stringType())
  ensures |df$stringFromRef(ret$0)| == |df$stringFromRef(this$extension)|
  ensures (forall anon$builtin$6: Int ::1 <= anon$builtin$6 &&
      anon$builtin$6 < |df$stringFromRef(this$extension)| ==>
      df$stringFromRef(ret$0)[anon$builtin$6 - 1] <=
      df$stringFromRef(ret$0)[anon$builtin$6])
{
  var l0$minVal: Ref
  var l0$maxVal: Ref
  inhale df$isSubtype(df$typeOf(this$extension), df$stringType())
  if (|df$stringFromRef(this$extension)| <= 1) {
    ret$0 := this$extension
    goto lbl$0
  }
  l0$minVal := f$minOrMaxChar$TF$T$String$T$Boolean(this$extension, df$boolToRef(true))
  l0$maxVal := f$minOrMaxChar$TF$T$String$T$Boolean(this$extension, df$boolToRef(false))
  ret$0 := f$quickSortRec$TF$T$String$T$Char$T$Char(this$extension, l0$minVal,
    l0$maxVal)
  goto lbl$0
  label lbl$0
}

method f$quickSortRec$TF$T$String$T$Char$T$Char(this$extension: Ref, p$minVal: Ref,
  p$maxVal: Ref)
  returns (ret: Ref)
  requires (forall anon$builtin$9: Int ::0 <= anon$builtin$9 &&
      anon$builtin$9 < |df$stringFromRef(this$extension)| ==>
      df$charFromRef(p$minVal) <=
      df$stringFromRef(this$extension)[anon$builtin$9] &&
      df$stringFromRef(this$extension)[anon$builtin$9] <=
      df$charFromRef(p$maxVal))
  ensures df$isSubtype(df$typeOf(ret), df$stringType())
  ensures |df$stringFromRef(ret)| == |df$stringFromRef(this$extension)|
  ensures (forall anon$builtin$10: Int ::0 <= anon$builtin$10 &&
      anon$builtin$10 < |df$stringFromRef(this$extension)| ==>
      df$charFromRef(p$minVal) <= df$stringFromRef(ret)[anon$builtin$10] &&
      df$stringFromRef(ret)[anon$builtin$10] <= df$charFromRef(p$maxVal))
  ensures (forall anon$builtin$11: Int ::1 <= anon$builtin$11 &&
      anon$builtin$11 < |df$stringFromRef(this$extension)| ==>
      df$stringFromRef(ret)[anon$builtin$11 - 1] <=
      df$stringFromRef(ret)[anon$builtin$11])


/quick_sort_of_string.kt:(1507,1519): info: Generated Viper text for quickSortRec:
method f$chooseIndex$TF$T$String(this$extension: Ref) returns (ret: Ref)
  requires |df$stringFromRef(this$extension)| >= 1
  ensures df$isSubtype(df$typeOf(ret), df$intType())
  ensures 0 <= df$intFromRef(ret) &&
    df$intFromRef(ret) < |df$stringFromRef(this$extension)|


method f$plus$TF$T$String$NT$Any(this$dispatch: Ref, other: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$stringType())


method f$quickSortRec$TF$T$String$T$Char$T$Char(this$extension: Ref, minVal: Ref,
  maxVal: Ref)
  returns (ret$0: Ref)
  requires (forall anon$builtin$6: Int ::0 <= anon$builtin$6 &&
      anon$builtin$6 < |df$stringFromRef(this$extension)| ==>
      df$charFromRef(minVal) <=
      df$stringFromRef(this$extension)[anon$builtin$6] &&
      df$stringFromRef(this$extension)[anon$builtin$6] <=
      df$charFromRef(maxVal))
  ensures df$isSubtype(df$typeOf(ret$0), df$stringType())
  ensures |df$stringFromRef(ret$0)| == |df$stringFromRef(this$extension)|
  ensures (forall anon$builtin$7: Int ::0 <= anon$builtin$7 &&
      anon$builtin$7 < |df$stringFromRef(this$extension)| ==>
      df$charFromRef(minVal) <= df$stringFromRef(ret$0)[anon$builtin$7] &&
      df$stringFromRef(ret$0)[anon$builtin$7] <= df$charFromRef(maxVal))
  ensures (forall anon$builtin$8: Int ::1 <= anon$builtin$8 &&
      anon$builtin$8 < |df$stringFromRef(this$extension)| ==>
      df$stringFromRef(ret$0)[anon$builtin$8 - 1] <=
      df$stringFromRef(ret$0)[anon$builtin$8])
{
  var medVal: Ref
  var anon$1: Ref
  var i: Ref
  var lessString: Ref
  var greaterString: Ref
  var eqString: Ref
  var anon$2: Ref
  var anon$4: Ref
  var anon$5: Ref
  inhale df$isSubtype(df$typeOf(this$extension), df$stringType())
  inhale df$isSubtype(df$typeOf(minVal), df$charType())
  inhale df$isSubtype(df$typeOf(maxVal), df$charType())
  if (|df$stringFromRef(this$extension)| <= 1) {
    ret$0 := this$extension
    goto lbl$ret$0
  }
  anon$1 := f$chooseIndex$TF$T$String(this$extension)
  medVal := sp$stringGet(this$extension, anon$1)
  i := df$intToRef(0)
  lessString := df$stringToRef(Seq[Int]())
  greaterString := df$stringToRef(Seq[Int]())
  eqString := df$stringToRef(Seq[Int]())
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(medVal), df$charType())
    invariant df$isSubtype(df$typeOf(i), df$intType())
    invariant df$isSubtype(df$typeOf(lessString), df$stringType())
    invariant df$isSubtype(df$typeOf(greaterString), df$stringType())
    invariant df$isSubtype(df$typeOf(eqString), df$stringType())
    invariant df$isSubtype(df$typeOf(minVal), df$charType())
    invariant df$isSubtype(df$typeOf(maxVal), df$charType())
    invariant 0 <= df$intFromRef(i) &&
      df$intFromRef(i) <= |df$stringFromRef(this$extension)|
    invariant |df$stringFromRef(lessString)| +
      |df$stringFromRef(greaterString)| +
      |df$stringFromRef(eqString)| ==
      df$intFromRef(i)
    invariant (forall anon$builtin$3: Int ::0 <= anon$builtin$3 &&
        anon$builtin$3 < |df$stringFromRef(lessString)| ==>
        df$charFromRef(minVal) <=
        df$stringFromRef(lessString)[anon$builtin$3] &&
        df$stringFromRef(lessString)[anon$builtin$3] <=
        df$charFromRef(medVal))
    invariant (forall anon$builtin$4: Int ::0 <= anon$builtin$4 &&
        anon$builtin$4 < |df$stringFromRef(greaterString)| ==>
        df$charFromRef(medVal) <=
        df$stringFromRef(greaterString)[anon$builtin$4] &&
        df$stringFromRef(greaterString)[anon$builtin$4] <=
        df$charFromRef(maxVal))
    invariant (forall anon$builtin$5: Int ::0 <= anon$builtin$5 &&
        anon$builtin$5 < |df$stringFromRef(eqString)| ==>
        df$stringFromRef(eqString)[anon$builtin$5] ==
        df$charFromRef(medVal))
  anon$2 := sp$ltInts(i, sp$stringLength(this$extension))
  if (df$boolFromRef(anon$2)) {
    var curChar: Ref
    var anon$3: Ref
    var anon$0: Ref
    anon$0 := i
    i := sp$plusInts(anon$0, df$intToRef(1))
    anon$3 := anon$0
    curChar := sp$stringGet(this$extension, anon$3)
    if (df$charFromRef(curChar) < df$charFromRef(medVal)) {
      lessString := sp$addStringChar(lessString, curChar)
    } elseif (df$charFromRef(curChar) > df$charFromRef(medVal)) {
      greaterString := sp$addStringChar(greaterString, curChar)
    } else {
      eqString := sp$addStringChar(eqString, curChar)}
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(medVal), df$charType())
  assert df$isSubtype(df$typeOf(i), df$intType())
  assert df$isSubtype(df$typeOf(lessString), df$stringType())
  assert df$isSubtype(df$typeOf(greaterString), df$stringType())
  assert df$isSubtype(df$typeOf(eqString), df$stringType())
  assert df$isSubtype(df$typeOf(minVal), df$charType())
  assert df$isSubtype(df$typeOf(maxVal), df$charType())
  assert 0 <= df$intFromRef(i) &&
    df$intFromRef(i) <= |df$stringFromRef(this$extension)|
  assert |df$stringFromRef(lessString)| + |df$stringFromRef(greaterString)| +
    |df$stringFromRef(eqString)| ==
    df$intFromRef(i)
  assert (forall anon$builtin$3: Int ::0 <= anon$builtin$3 &&
      anon$builtin$3 < |df$stringFromRef(lessString)| ==>
      df$charFromRef(minVal) <=
      df$stringFromRef(lessString)[anon$builtin$3] &&
      df$stringFromRef(lessString)[anon$builtin$3] <=
      df$charFromRef(medVal))
  assert (forall anon$builtin$4: Int ::0 <= anon$builtin$4 &&
      anon$builtin$4 < |df$stringFromRef(greaterString)| ==>
      df$charFromRef(medVal) <=
      df$stringFromRef(greaterString)[anon$builtin$4] &&
      df$stringFromRef(greaterString)[anon$builtin$4] <=
      df$charFromRef(maxVal))
  assert (forall anon$builtin$5: Int ::0 <= anon$builtin$5 &&
      anon$builtin$5 < |df$stringFromRef(eqString)| ==>
      df$stringFromRef(eqString)[anon$builtin$5] == df$charFromRef(medVal))
  anon$4 := f$quickSortRec$TF$T$String$T$Char$T$Char(lessString, minVal, medVal)
  anon$5 := f$quickSortRec$TF$T$String$T$Char$T$Char(greaterString, medVal,
    maxVal)
  ret$0 := sp$addStrings(sp$addStrings(anon$4, eqString), anon$5)
  goto lbl$ret$0
  label lbl$ret$0
}
