/merge_sort_of_string.kt:(72,76): info: Generated Viper text for subs:
method f$plus$TF$T$String$NT$Any(this$dispatch: Ref, other: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$stringType())


method f$subs$TF$T$String$T$Int$T$Int(this$extension: Ref, lo: Ref, hi: Ref)
  returns (ret$0: Ref)
  requires 0 <= df$intFromRef(lo) && df$intFromRef(lo) <= df$intFromRef(hi) &&
    df$intFromRef(hi) <= |df$stringFromRef(this$extension)|
  ensures df$isSubtype(df$typeOf(ret$0), df$stringType())
  ensures |df$stringFromRef(ret$0)| ==
    df$intFromRef(hi) - df$intFromRef(lo)
  ensures (forall anon$builtin$2: Int ::0 <= anon$builtin$2 &&
      anon$builtin$2 < |df$stringFromRef(ret$0)| ==>
      df$stringFromRef(ret$0)[anon$builtin$2] ==
      df$stringFromRef(this$extension)[anon$builtin$2 + df$intFromRef(lo)])
{
  var res: Ref
  var i: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(this$extension), df$stringType())
  inhale df$isSubtype(df$typeOf(lo), df$intType())
  inhale df$isSubtype(df$typeOf(hi), df$intType())
  res := df$stringToRef(Seq[Int]())
  i := lo
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(res), df$stringType())
    invariant df$isSubtype(df$typeOf(i), df$intType())
    invariant df$isSubtype(df$typeOf(lo), df$intType())
    invariant df$isSubtype(df$typeOf(hi), df$intType())
    invariant 0 <= df$intFromRef(i) &&
      df$intFromRef(i) <= df$intFromRef(hi)
    invariant |df$stringFromRef(res)| ==
      df$intFromRef(i) - df$intFromRef(lo)
    invariant (forall anon$builtin$1: Int ::0 <= anon$builtin$1 &&
        anon$builtin$1 < |df$stringFromRef(res)| ==>
        df$stringFromRef(res)[anon$builtin$1] ==
        df$stringFromRef(this$extension)[anon$builtin$1 + df$intFromRef(lo)])
  anon$1 := sp$ltInts(i, hi)
  if (df$boolFromRef(anon$1)) {
    var anon$2: Ref
    var anon$0: Ref
    anon$0 := i
    i := sp$plusInts(anon$0, df$intToRef(1))
    anon$2 := anon$0
    res := sp$addStringChar(res, sp$stringGet(this$extension, anon$2))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(res), df$stringType())
  assert df$isSubtype(df$typeOf(i), df$intType())
  assert df$isSubtype(df$typeOf(lo), df$intType())
  assert df$isSubtype(df$typeOf(hi), df$intType())
  assert 0 <= df$intFromRef(i) && df$intFromRef(i) <= df$intFromRef(hi)
  assert |df$stringFromRef(res)| == df$intFromRef(i) - df$intFromRef(lo)
  assert (forall anon$builtin$1: Int ::0 <= anon$builtin$1 &&
      anon$builtin$1 < |df$stringFromRef(res)| ==>
      df$stringFromRef(res)[anon$builtin$1] ==
      df$stringFromRef(this$extension)[anon$builtin$1 + df$intFromRef(lo)])
  ret$0 := res
  goto lbl$ret$0
  label lbl$ret$0
}

/merge_sort_of_string.kt:(705,717): info: Generated Viper text for mergeStrings:
method f$mergeStrings$TF$T$String$T$String(a: Ref, b: Ref)
  returns (ret$0: Ref)
  requires (forall anon$builtin$3: Int ::(1 <= anon$builtin$3 &&
      anon$builtin$3 < |df$stringFromRef(a)| ==>
      df$stringFromRef(a)[anon$builtin$3 - 1] <=
      df$stringFromRef(a)[anon$builtin$3]) &&
      (1 <= anon$builtin$3 && anon$builtin$3 < |df$stringFromRef(b)| ==>
      df$stringFromRef(b)[anon$builtin$3 - 1] <=
      df$stringFromRef(b)[anon$builtin$3]))
  ensures df$isSubtype(df$typeOf(ret$0), df$stringType())
  ensures |df$stringFromRef(ret$0)| ==
    |df$stringFromRef(a)| + |df$stringFromRef(b)|
  ensures (forall anon$builtin$4: Int ::1 <= anon$builtin$4 &&
      anon$builtin$4 < |df$stringFromRef(ret$0)| ==>
      df$stringFromRef(ret$0)[anon$builtin$4 - 1] <=
      df$stringFromRef(ret$0)[anon$builtin$4])
{
  var pa: Ref
  var pb: Ref
  var res: Ref
  var n: Ref
  var anon$4: Ref
  inhale df$isSubtype(df$typeOf(a), df$stringType())
  inhale df$isSubtype(df$typeOf(b), df$stringType())
  pa := df$intToRef(0)
  pb := df$intToRef(0)
  res := df$stringToRef(Seq[Int]())
  n := sp$plusInts(sp$stringLength(a), sp$stringLength(b))
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(pa), df$intType())
    invariant df$isSubtype(df$typeOf(pb), df$intType())
    invariant df$isSubtype(df$typeOf(res), df$stringType())
    invariant df$isSubtype(df$typeOf(n), df$intType())
    invariant df$isSubtype(df$typeOf(a), df$stringType())
    invariant df$isSubtype(df$typeOf(b), df$stringType())
    invariant 0 <= df$intFromRef(pa) &&
      df$intFromRef(pa) <= |df$stringFromRef(a)|
    invariant 0 <= df$intFromRef(pb) &&
      df$intFromRef(pb) <= |df$stringFromRef(b)|
    invariant |df$stringFromRef(res)| ==
      df$intFromRef(pa) + df$intFromRef(pb)
    invariant (forall anon$builtin$2: Int ::1 <= anon$builtin$2 &&
        anon$builtin$2 < |df$stringFromRef(res)| ==>
        df$stringFromRef(res)[anon$builtin$2 - 1] <=
        df$stringFromRef(res)[anon$builtin$2])
    invariant |df$stringFromRef(res)| == 0 ||
      df$intFromRef(pa) == |df$stringFromRef(a)| ||
      df$stringFromRef(res)[|df$stringFromRef(res)| - 1] <=
      df$stringFromRef(a)[df$intFromRef(pa)]
    invariant |df$stringFromRef(res)| == 0 ||
      df$intFromRef(pb) == |df$stringFromRef(b)| ||
      df$stringFromRef(res)[|df$stringFromRef(res)| - 1] <=
      df$stringFromRef(b)[df$intFromRef(pb)]
  anon$4 := sp$ltInts(sp$plusInts(pa, pb), n)
  if (df$boolFromRef(anon$4)) {
    var anon$5: Ref
    if (df$intFromRef(pa) == |df$stringFromRef(a)|) {
      var anon$6: Ref
      var anon$0: Ref
      anon$0 := pb
      pb := sp$plusInts(anon$0, df$intToRef(1))
      anon$6 := anon$0
      anon$5 := sp$stringGet(b, anon$6)
    } elseif (df$intFromRef(pb) == |df$stringFromRef(b)|) {
      var anon$7: Ref
      var anon$1: Ref
      anon$1 := pa
      pa := sp$plusInts(anon$1, df$intToRef(1))
      anon$7 := anon$1
      anon$5 := sp$stringGet(a, anon$7)
    } elseif (df$stringFromRef(a)[df$intFromRef(pa)] <
    df$stringFromRef(b)[df$intFromRef(pb)]) {
      var anon$8: Ref
      var anon$2: Ref
      anon$2 := pa
      pa := sp$plusInts(anon$2, df$intToRef(1))
      anon$8 := anon$2
      anon$5 := sp$stringGet(a, anon$8)
    } else {
      var anon$9: Ref
      var anon$3: Ref
      anon$3 := pb
      pb := sp$plusInts(anon$3, df$intToRef(1))
      anon$9 := anon$3
      anon$5 := sp$stringGet(b, anon$9)
    }
    res := sp$addStringChar(res, anon$5)
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(pa), df$intType())
  assert df$isSubtype(df$typeOf(pb), df$intType())
  assert df$isSubtype(df$typeOf(res), df$stringType())
  assert df$isSubtype(df$typeOf(n), df$intType())
  assert df$isSubtype(df$typeOf(a), df$stringType())
  assert df$isSubtype(df$typeOf(b), df$stringType())
  assert 0 <= df$intFromRef(pa) &&
    df$intFromRef(pa) <= |df$stringFromRef(a)|
  assert 0 <= df$intFromRef(pb) &&
    df$intFromRef(pb) <= |df$stringFromRef(b)|
  assert |df$stringFromRef(res)| == df$intFromRef(pa) + df$intFromRef(pb)
  assert (forall anon$builtin$2: Int ::1 <= anon$builtin$2 &&
      anon$builtin$2 < |df$stringFromRef(res)| ==>
      df$stringFromRef(res)[anon$builtin$2 - 1] <=
      df$stringFromRef(res)[anon$builtin$2])
  assert |df$stringFromRef(res)| == 0 ||
    df$intFromRef(pa) == |df$stringFromRef(a)| ||
    df$stringFromRef(res)[|df$stringFromRef(res)| - 1] <=
    df$stringFromRef(a)[df$intFromRef(pa)]
  assert |df$stringFromRef(res)| == 0 ||
    df$intFromRef(pb) == |df$stringFromRef(b)| ||
    df$stringFromRef(res)[|df$stringFromRef(res)| - 1] <=
    df$stringFromRef(b)[df$intFromRef(pb)]
  ret$0 := res
  goto lbl$ret$0
  label lbl$ret$0
}

method f$plus$TF$T$String$NT$Any(this$dispatch: Ref, other: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$stringType())


/merge_sort_of_string.kt:(1883,1894): info: Generated Viper text for mergeSorted:
method f$mergeSorted$TF$T$String(this$extension: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$stringType())
  ensures |df$stringFromRef(ret$0)| == |df$stringFromRef(this$extension)|
  ensures (forall anon$builtin$4: Int ::1 <= anon$builtin$4 &&
      anon$builtin$4 < |df$stringFromRef(ret$0)| ==>
      df$stringFromRef(ret$0)[anon$builtin$4 - 1] <=
      df$stringFromRef(ret$0)[anon$builtin$4])
{
  inhale df$isSubtype(df$typeOf(this$extension), df$stringType())
  if (|df$stringFromRef(this$extension)| <= 1) {
    ret$0 := this$extension
  } else {
    var anon$0: Ref
    var anon$1: Ref
    var anon$2: Ref
    var anon$3: Ref
    anon$1 := f$subs$TF$T$String$T$Int$T$Int(this$extension, df$intToRef(0),
      sp$divInts(sp$stringLength(this$extension), df$intToRef(2)))
    anon$0 := f$mergeSorted$TF$T$String(anon$1)
    anon$3 := f$subs$TF$T$String$T$Int$T$Int(this$extension, sp$divInts(sp$stringLength(this$extension),
      df$intToRef(2)), sp$stringLength(this$extension))
    anon$2 := f$mergeSorted$TF$T$String(anon$3)
    ret$0 := f$mergeStrings$TF$T$String$T$String(anon$0, anon$2)
  }
  goto lbl$0
  label lbl$0
}

method f$mergeStrings$TF$T$String$T$String(a: Ref, b: Ref)
  returns (ret: Ref)
  requires (forall anon$builtin$5: Int ::(1 <= anon$builtin$5 &&
      anon$builtin$5 < |df$stringFromRef(a)| ==>
      df$stringFromRef(a)[anon$builtin$5 - 1] <=
      df$stringFromRef(a)[anon$builtin$5]) &&
      (1 <= anon$builtin$5 && anon$builtin$5 < |df$stringFromRef(b)| ==>
      df$stringFromRef(b)[anon$builtin$5 - 1] <=
      df$stringFromRef(b)[anon$builtin$5]))
  ensures df$isSubtype(df$typeOf(ret), df$stringType())
  ensures |df$stringFromRef(ret)| ==
    |df$stringFromRef(a)| + |df$stringFromRef(b)|
  ensures (forall anon$builtin$6: Int ::1 <= anon$builtin$6 &&
      anon$builtin$6 < |df$stringFromRef(ret)| ==>
      df$stringFromRef(ret)[anon$builtin$6 - 1] <=
      df$stringFromRef(ret)[anon$builtin$6])


method f$subs$TF$T$String$T$Int$T$Int(this$extension: Ref, lo: Ref, hi: Ref)
  returns (ret: Ref)
  requires 0 <= df$intFromRef(lo) && df$intFromRef(lo) <= df$intFromRef(hi) &&
    df$intFromRef(hi) <= |df$stringFromRef(this$extension)|
  ensures df$isSubtype(df$typeOf(ret), df$stringType())
  ensures |df$stringFromRef(ret)| == df$intFromRef(hi) - df$intFromRef(lo)
  ensures (forall anon$builtin$7: Int ::0 <= anon$builtin$7 &&
      anon$builtin$7 < |df$stringFromRef(ret)| ==>
      df$stringFromRef(ret)[anon$builtin$7] ==
      df$stringFromRef(this$extension)[anon$builtin$7 + df$intFromRef(lo)])
