/simple_forall.kt:(64,92): info: Generated Viper text for anyIntegerSquaredAtLeastZero:
method f$anyIntegerSquaredAtLeastZero$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
  ensures (forall anon$builtin$1: Int ::anon$builtin$1 * anon$builtin$1 >=
      0 &&
      anon$builtin$1 * anon$builtin$1 >= df$intFromRef(ret$0))
{
  ret$0 := df$intToRef(0)
  goto lbl$0
  label lbl$0
}

/simple_forall.kt:(259,298): info: Generated Viper text for anyIntegerSquaredIsAtLeastOneExceptZero:
method f$anyIntegerSquaredIsAtLeastOneExceptZero$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
  ensures (forall anon$builtin$1: Int ::!(anon$builtin$1 == 0) ==>
      anon$builtin$1 * anon$builtin$1 >= df$intFromRef(ret$0))
{
  ret$0 := df$intToRef(1)
  goto lbl$0
  label lbl$0
}

/simple_forall.kt:(460,503): info: Generated Viper text for anyIntegerSquaredIsAtLeastZeroStringVersion:
method f$anyIntegerSquaredIsAtLeastZeroStringVersion$TF$T$String(str: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  var res: Ref
  var i: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(str), df$stringType())
  res := df$intToRef(0)
  i := df$intToRef(10)
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(res), df$intType())
    invariant df$isSubtype(df$typeOf(i), df$intType())
    invariant df$isSubtype(df$typeOf(str), df$stringType())
    invariant (forall anon$builtin$0: Int ::0 <= anon$builtin$0 &&
        anon$builtin$0 < |df$stringFromRef(str)| ==>
        (df$stringFromRef(str)[anon$builtin$0] - 97) *
        (df$stringFromRef(str)[anon$builtin$0] - 97) >=
        df$intFromRef(res))
  anon$1 := sp$gtInts(i, df$intToRef(0))
  if (df$boolFromRef(anon$1)) {
    var anon$0: Ref
    anon$0 := i
    i := sp$minusInts(anon$0, df$intToRef(1))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(res), df$intType())
  assert df$isSubtype(df$typeOf(i), df$intType())
  assert df$isSubtype(df$typeOf(str), df$stringType())
  assert (forall anon$builtin$0: Int ::0 <= anon$builtin$0 &&
      anon$builtin$0 < |df$stringFromRef(str)| ==>
      (df$stringFromRef(str)[anon$builtin$0] - 97) *
      (df$stringFromRef(str)[anon$builtin$0] - 97) >=
      df$intFromRef(res))
  ret$0 := res
  goto lbl$ret$0
  label lbl$ret$0
}
