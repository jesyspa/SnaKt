/sum_of_1_to_n.kt:(64,91): info: Generated Viper text for recursiveSumOfIntegersUpToN:
method f$recursiveSumOfIntegersUpToN$TF$T$Int(n: Ref) returns (ret$0: Ref)
  requires df$intFromRef(n) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
  ensures df$intFromRef(ret$0) ==
    df$intFromRef(n) * (df$intFromRef(n) + 1) / 2
{
  inhale df$isSubtype(df$typeOf(n), df$intType())
  if (df$intFromRef(n) == 0) {
    ret$0 := df$intToRef(0)
    goto lbl$0
  } else {
    var anon$0: Ref
    anon$0 := f$recursiveSumOfIntegersUpToN$TF$T$Int(sp$minusInts(n, df$intToRef(1)))
    ret$0 := sp$plusInts(n, anon$0)
    goto lbl$0
  }
  label lbl$0
}

/sum_of_1_to_n.kt:(296,314): info: Generated Viper text for sumOfIntegersUpToN:
method f$sumOfIntegersUpToN$TF$T$Int(n: Ref) returns (ret$0: Ref)
  requires df$intFromRef(n) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
  ensures df$intFromRef(ret$0) ==
    df$intFromRef(n) * (df$intFromRef(n) + 1) / 2
{
  var sum: Ref
  var i: Ref
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(n), df$intType())
  sum := df$intToRef(0)
  i := df$intToRef(0)
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(sum), df$intType())
    invariant df$isSubtype(df$typeOf(i), df$intType())
    invariant df$isSubtype(df$typeOf(n), df$intType())
    invariant df$intFromRef(i) <= df$intFromRef(n)
    invariant df$intFromRef(sum) ==
      df$intFromRef(i) * (df$intFromRef(i) + 1) / 2
  anon$0 := sp$ltInts(i, n)
  if (df$boolFromRef(anon$0)) {
    sum := sp$plusInts(sum, sp$plusInts(i, df$intToRef(1)))
    i := sp$plusInts(i, df$intToRef(1))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(sum), df$intType())
  assert df$isSubtype(df$typeOf(i), df$intType())
  assert df$isSubtype(df$typeOf(n), df$intType())
  assert df$intFromRef(i) <= df$intFromRef(n)
  assert df$intFromRef(sum) ==
    df$intFromRef(i) * (df$intFromRef(i) + 1) / 2
  ret$0 := sum
  goto lbl$ret$0
  label lbl$ret$0
}
