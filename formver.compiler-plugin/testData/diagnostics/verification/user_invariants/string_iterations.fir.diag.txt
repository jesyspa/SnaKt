/string_iterations.kt:(71,83): info: Generated Viper text for firstAtLeast:
method f$firstAtLeast$TF$T$String$T$Char(this$extension: Ref, c: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
  ensures 0 <= df$intFromRef(ret$0) &&
    df$intFromRef(ret$0) <= |df$stringFromRef(this$extension)|
  ensures (forall anon$builtin$2: Int ::0 <= anon$builtin$2 &&
      anon$builtin$2 < df$intFromRef(ret$0) ==>
      df$stringFromRef(this$extension)[anon$builtin$2] < df$charFromRef(c))
  ensures !(df$intFromRef(ret$0) == |df$stringFromRef(this$extension)|) ==>
    df$stringFromRef(this$extension)[df$intFromRef(ret$0)] >=
    df$charFromRef(c)
{
  var i: Ref
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(this$extension), df$stringType())
  inhale df$isSubtype(df$typeOf(c), df$charType())
  i := df$intToRef(0)
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(i), df$intType())
    invariant df$isSubtype(df$typeOf(c), df$charType())
    invariant 0 <= df$intFromRef(i) &&
      df$intFromRef(i) <= |df$stringFromRef(this$extension)|
    invariant (forall anon$builtin$1: Int ::0 <= anon$builtin$1 &&
        anon$builtin$1 < df$intFromRef(i) ==>
        df$stringFromRef(this$extension)[anon$builtin$1] <
        df$charFromRef(c))
  anon$0 := sp$ltInts(i, sp$stringLength(this$extension))
  if (df$boolFromRef(anon$0)) {
    if (df$stringFromRef(this$extension)[df$intFromRef(i)] >=
    df$charFromRef(c)) {
      goto lbl$break$0
    }
    i := sp$plusInts(i, df$intToRef(1))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(i), df$intType())
  assert df$isSubtype(df$typeOf(c), df$charType())
  assert 0 <= df$intFromRef(i) &&
    df$intFromRef(i) <= |df$stringFromRef(this$extension)|
  assert (forall anon$builtin$1: Int ::0 <= anon$builtin$1 &&
      anon$builtin$1 < df$intFromRef(i) ==>
      df$stringFromRef(this$extension)[anon$builtin$1] < df$charFromRef(c))
  ret$0 := i
  goto lbl$ret$0
  label lbl$ret$0
}

/string_iterations.kt:(606,614): info: Generated Viper text for lastLess:
method f$lastLess$TF$T$String$T$Char(this$extension: Ref, c: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
  ensures -1 <= df$intFromRef(ret$0) &&
    df$intFromRef(ret$0) <= |df$stringFromRef(this$extension)| - 1
  ensures (forall anon$builtin$2: Int ::df$intFromRef(ret$0) <
      anon$builtin$2 &&
      anon$builtin$2 < |df$stringFromRef(this$extension)| ==>
      df$stringFromRef(this$extension)[anon$builtin$2] >= df$charFromRef(c))
  ensures !(df$intFromRef(ret$0) == -1) ==>
    df$stringFromRef(this$extension)[df$intFromRef(ret$0)] <
    df$charFromRef(c)
{
  var i: Ref
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(this$extension), df$stringType())
  inhale df$isSubtype(df$typeOf(c), df$charType())
  i := sp$minusInts(sp$stringLength(this$extension), df$intToRef(1))
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(i), df$intType())
    invariant df$isSubtype(df$typeOf(c), df$charType())
    invariant -1 <= df$intFromRef(i) &&
      df$intFromRef(i) < |df$stringFromRef(this$extension)|
    invariant (forall anon$builtin$1: Int ::df$intFromRef(i) <
        anon$builtin$1 &&
        anon$builtin$1 < |df$stringFromRef(this$extension)| ==>
        df$stringFromRef(this$extension)[anon$builtin$1] >=
        df$charFromRef(c))
  anon$0 := sp$gtInts(i, df$intToRef(-1))
  if (df$boolFromRef(anon$0)) {
    if (df$stringFromRef(this$extension)[df$intFromRef(i)] <
    df$charFromRef(c)) {
      goto lbl$break$0
    }
    i := sp$minusInts(i, df$intToRef(1))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(i), df$intType())
  assert df$isSubtype(df$typeOf(c), df$charType())
  assert -1 <= df$intFromRef(i) &&
    df$intFromRef(i) < |df$stringFromRef(this$extension)|
  assert (forall anon$builtin$1: Int ::df$intFromRef(i) < anon$builtin$1 &&
      anon$builtin$1 < |df$stringFromRef(this$extension)| ==>
      df$stringFromRef(this$extension)[anon$builtin$1] >= df$charFromRef(c))
  ret$0 := i
  goto lbl$ret$0
  label lbl$ret$0
}
