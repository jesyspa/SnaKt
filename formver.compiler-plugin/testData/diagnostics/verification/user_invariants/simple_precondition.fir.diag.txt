/simple_precondition.kt:(238,242): info: Generated Viper text for test:
field bf$size: Ref

method f$test$TF$T$Int(idx: Ref) returns (ret$0: Ref)
  requires 0 <= df$intFromRef(idx)
  requires df$intFromRef(idx) < 3
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(idx), df$intType())
  assert 0 <= df$intFromRef(idx)
  assert df$intFromRef(idx) < 3
  assert !(df$intFromRef(idx) == 100)
  assert Seq(97, 97, 97)[df$intFromRef(idx)] == 97
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/simple_precondition.kt:(446,469): info: Generated Viper text for inlineWithSpecification:
method f$inlineWithSpecification$TF$T$Boolean(bool: Ref)
  returns (ret$0: Ref)
  requires true
  requires df$boolFromRef(bool)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(bool), df$boolType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/simple_precondition.kt:(560,569): info: Generated Viper text for good_call:
method f$good_call$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$2: Ref
  var ret$1: Ref
  var anon$0: Ref
  var ret$2: Ref
  var anon$1: Ref
  anon$2 := f$test$TF$T$Int(df$intToRef(2))
  anon$0 := df$boolToRef(true)
  label lbl$1
  inhale df$isSubtype(df$typeOf(ret$1), df$unitType())
  anon$1 := df$boolToRef(false)
  label lbl$2
  inhale df$isSubtype(df$typeOf(ret$2), df$unitType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method f$test$TF$T$Int(idx: Ref) returns (ret: Ref)
  requires 0 <= df$intFromRef(idx)
  requires df$intFromRef(idx) < 3
  ensures df$isSubtype(df$typeOf(ret), df$unitType())
