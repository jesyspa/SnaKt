/simple_loop.kt:(239,243): info: Generated Viper text for test:
field bf$size: Ref

method f$test$TF$T$Int(n: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var it: Ref
  var holds: Ref
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(n), df$intType())
  it := df$intToRef(0)
  holds := df$boolToRef(true)
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(it), df$intType())
    invariant df$isSubtype(df$typeOf(holds), df$boolType())
    invariant df$isSubtype(df$typeOf(n), df$intType())
    invariant df$intFromRef(it) <= 10
    invariant df$boolFromRef(holds)
  anon$0 := sp$ltInts(it, df$intToRef(10))
  if (df$boolFromRef(anon$0)) {
    it := sp$plusInts(it, df$intToRef(1))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(it), df$intType())
  assert df$isSubtype(df$typeOf(holds), df$boolType())
  assert df$isSubtype(df$typeOf(n), df$intType())
  assert df$intFromRef(it) <= 10
  assert df$boolFromRef(holds)
  assert df$intFromRef(it) == 10
  if (df$intFromRef(it) <= df$intFromRef(n)) {
    var anon$1: Ref
    label lbl$continue$1
      invariant df$isSubtype(df$typeOf(it), df$intType())
      invariant df$isSubtype(df$typeOf(holds), df$boolType())
      invariant df$isSubtype(df$typeOf(n), df$intType())
      invariant df$intFromRef(it) <= df$intFromRef(n)
      invariant df$boolFromRef(holds)
    anon$1 := sp$ltInts(it, n)
    if (df$boolFromRef(anon$1)) {
      it := sp$plusInts(it, df$intToRef(1))
      goto lbl$continue$1
    }
    label lbl$break$1
    assert df$isSubtype(df$typeOf(it), df$intType())
    assert df$isSubtype(df$typeOf(holds), df$boolType())
    assert df$isSubtype(df$typeOf(n), df$intType())
    assert df$intFromRef(it) <= df$intFromRef(n)
    assert df$boolFromRef(holds)
    assert df$intFromRef(it) == df$intFromRef(n)
  }
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/simple_loop.kt:(652,666): info: Generated Viper text for loopInsideLoop:
method f$loopInsideLoop$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var i: Ref
  var anon$0: Ref
  i := df$intToRef(0)
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(i), df$intType())
    invariant df$intFromRef(i) <= 10
  anon$0 := sp$ltInts(i, df$intToRef(10))
  if (df$boolFromRef(anon$0)) {
    var j: Ref
    var anon$1: Ref
    j := sp$plusInts(i, df$intToRef(1))
    label lbl$continue$1
      invariant df$isSubtype(df$typeOf(j), df$intType())
      invariant df$isSubtype(df$typeOf(i), df$intType())
      invariant df$intFromRef(i) < df$intFromRef(j)
      invariant df$intFromRef(j) <= 10
    anon$1 := sp$ltInts(j, df$intToRef(10))
    if (df$boolFromRef(anon$1)) {
      j := sp$plusInts(j, df$intToRef(1))
      goto lbl$continue$1
    }
    label lbl$break$1
    assert df$isSubtype(df$typeOf(j), df$intType())
    assert df$isSubtype(df$typeOf(i), df$intType())
    assert df$intFromRef(i) < df$intFromRef(j)
    assert df$intFromRef(j) <= 10
    i := sp$plusInts(i, df$intToRef(1))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(i), df$intType())
  assert df$intFromRef(i) <= 10
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/simple_loop.kt:(974,983): info: Generated Viper text for withBreak:
field bf$size: Ref

method f$withBreak$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var i: Ref
  var anon$0: Ref
  i := df$intToRef(0)
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(i), df$intType())
    invariant df$intFromRef(i) <= 10
  anon$0 := df$boolToRef(true)
  if (df$boolFromRef(anon$0)) {
    if (df$intFromRef(i) >= 10) {
      goto lbl$break$0
    }
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(i), df$intType())
  assert df$intFromRef(i) <= 10
  assert df$intFromRef(i) == 10
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/simple_loop.kt:(1230,1256): info: Generated Viper text for test_boolean_postcondition:
field bf$e: Ref

field bf$size: Ref

method con$T$Int(e: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$WithVar())
  ensures acc(p$c$WithVar$shared(ret), wildcard)
  ensures acc(p$c$WithVar$unique(ret), write)


method f$doSomething$TF$T$WithVar(this$dispatch: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$boolType())


method f$test_boolean_postcondition$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var withVar: Ref
  var boolean: Ref
  var anon$0: Ref
  withVar := con$T$Int(df$intToRef(42))
  boolean := df$boolToRef(true)
  label lbl$continue$0
    invariant acc(p$c$WithVar$shared(withVar), wildcard)
    invariant df$isSubtype(df$typeOf(withVar), df$c$WithVar())
    invariant df$isSubtype(df$typeOf(boolean), df$boolType())
  anon$0 := boolean
  if (df$boolFromRef(anon$0)) {
    boolean := f$doSomething$TF$T$WithVar(withVar)
    goto lbl$continue$0
  }
  label lbl$break$0
  assert acc(p$c$WithVar$shared(withVar), wildcard)
  assert df$isSubtype(df$typeOf(withVar), df$c$WithVar())
  assert df$isSubtype(df$typeOf(boolean), df$boolType())
  assert !df$boolFromRef(boolean)
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}
