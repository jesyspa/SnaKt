/multiple_receivers.kt:(236,246): info: Generated Viper text for applyDelta:
field bf_delta: Ref

field bf_size: Ref

method f_applyDelta_TF_T_ClassWithExtension_T_Int(this$dispatch: Ref, this$extension: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var withoutLabels: Ref
  var anon_0: Ref
  var withLabels: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(this$dispatch), df_c_ClassWithExtension())
  inhale acc(p_c_ClassWithExtension_shared(this$dispatch), wildcard)
  inhale df_isSubtype(df_typeOf(this$extension), df_intType())
  unfold acc(p_c_ClassWithExtension_shared(this$dispatch), wildcard)
  anon_0 := this$dispatch.bf_delta
  withoutLabels := sp_plusInts(this$extension, anon_0)
  unfold acc(p_c_ClassWithExtension_shared(this$dispatch), wildcard)
  anon_1 := this$dispatch.bf_delta
  withLabels := sp_plusInts(anon_1, this$extension)
  assert df_intFromRef(withoutLabels) == df_intFromRef(withLabels)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/multiple_receivers.kt:(531,542): info: Generated Viper text for returnDelta:
field bf_delta: Ref

method f_returnDelta_TF_T_ClassWithExtension(this$dispatch: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  inhale df_isSubtype(df_typeOf(this$dispatch), df_c_ClassWithExtension())
  inhale acc(p_shared(this$dispatch), wildcard)
  unfold acc(p_shared(this$dispatch), wildcard)
  ret_0 := this$dispatch.bf_delta
  goto lbl_0
  label lbl_0
}

/multiple_receivers.kt:(579,599): info: Generated Viper text for extensionReturnDelta:
field bf_delta: Ref

method f_extensionReturnDelta_TF_T_ClassWithExtension(this$extension: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  inhale df_isSubtype(df_typeOf(this$extension), df_c_ClassWithExtension())
  inhale acc(p_shared(this$extension), wildcard)
  unfold acc(p_shared(this$extension), wildcard)
  ret_0 := this$extension.bf_delta
  goto lbl_0
  label lbl_0
}

/multiple_receivers.kt:(712,735): info: Generated Viper text for checkClassWithExtension:
field bf_delta: Ref

field bf_size: Ref

method con_T_Int(delta: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_ClassWithExtension())
  ensures acc(p_c_ClassWithExtension_shared(ret), wildcard)
  ensures acc(p_c_ClassWithExtension_unique(ret), write)
  ensures df_intFromRef((unfolding acc(p_c_ClassWithExtension_shared(ret), wildcard) in
      ret.bf_delta)) ==
    df_intFromRef(delta)


method f_applyDelta_TF_T_ClassWithExtension_T_Int(this$dispatch: Ref, this$extension: Ref)
  returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_unitType())


method f_checkClassWithExtension_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_3: Ref
  var anon_4: Ref
  var ret_1: Ref
  var anon_0: Ref
  var anon_5: Ref
  var anon_6: Ref
  var ret_2: Ref
  var anon_1: Ref
  var anon_7: Ref
  var anon_8: Ref
  var anon_9: Ref
  var anon_10: Ref
  var ret_3: Ref
  var anon_2: Ref
  var anon_11: Ref
  anon_5 := con_T_Int(df_intToRef(42))
  anon_0 := anon_5
  inhale df_isSubtype(df_typeOf(anon_0), df_nullable(df_anyType()))
  inhale df_isSubtype(df_typeOf(anon_0), df_c_ClassWithExtension())
  inhale acc(p_c_ClassWithExtension_shared(anon_0), wildcard)
  anon_1 := anon_0
  anon_7 := f_applyDelta_TF_T_ClassWithExtension_T_Int(anon_1, df_intToRef(42))
  anon_8 := f_returnDelta_TF_T_ClassWithExtension(anon_1)
  anon_9 := f_extensionReturnDelta_TF_T_ClassWithExtension(anon_1)
  anon_2 := df_intToRef(42)
  unfold acc(p_c_ClassWithExtension_shared(anon_1), wildcard)
  anon_11 := anon_1.bf_delta
  ret_3 := sp_plusInts(anon_2, anon_11)
  goto lbl_3
  label lbl_3
  anon_10 := ret_3
  assert df_intFromRef(anon_10) == 84
  label lbl_2
  inhale df_isSubtype(df_typeOf(ret_2), df_unitType())
  anon_6 := ret_2
  ret_1 := anon_6
  inhale df_isSubtype(df_typeOf(ret_1), df_nullable(df_anyType()))
  goto lbl_1
  label lbl_1
  anon_4 := ret_1
  anon_3 := anon_4
  inhale df_isSubtype(df_typeOf(anon_3), df_unitType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method f_extensionReturnDelta_TF_T_ClassWithExtension(this$extension: Ref)
  returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_intType())


method f_returnDelta_TF_T_ClassWithExtension(this$dispatch: Ref)
  returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_intType())
