/multiple_receivers.kt:(236,246): info: Generated Viper text for applyDelta:
field bf$delta: Ref

field bf$size: Ref

method f$applyDelta$TF$T$ClassWithExtension$T$Int(this$dispatch: Ref, this$extension: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var withoutLabels: Ref
  var anon$0: Ref
  var withLabels: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(this$dispatch), df$c$ClassWithExtension())
  inhale acc(p$c$ClassWithExtension$shared(this$dispatch), wildcard)
  inhale df$isSubtype(df$typeOf(this$extension), df$intType())
  unfold acc(p$c$ClassWithExtension$shared(this$dispatch), wildcard)
  anon$0 := this$dispatch.bf$delta
  withoutLabels := sp$plusInts(this$extension, anon$0)
  unfold acc(p$c$ClassWithExtension$shared(this$dispatch), wildcard)
  anon$1 := this$dispatch.bf$delta
  withLabels := sp$plusInts(anon$1, this$extension)
  assert df$intFromRef(withoutLabels) == df$intFromRef(withLabels)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/multiple_receivers.kt:(531,542): info: Generated Viper text for returnDelta:
field bf$delta: Ref

method f$returnDelta$TF$T$ClassWithExtension(this$dispatch: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  inhale df$isSubtype(df$typeOf(this$dispatch), df$c$ClassWithExtension())
  inhale acc(p$shared(this$dispatch), wildcard)
  unfold acc(p$shared(this$dispatch), wildcard)
  ret$0 := this$dispatch.bf$delta
  goto lbl$0
  label lbl$0
}

/multiple_receivers.kt:(579,599): info: Generated Viper text for extensionReturnDelta:
field bf$delta: Ref

method f$extensionReturnDelta$TF$T$ClassWithExtension(this$extension: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  inhale df$isSubtype(df$typeOf(this$extension), df$c$ClassWithExtension())
  inhale acc(p$shared(this$extension), wildcard)
  unfold acc(p$shared(this$extension), wildcard)
  ret$0 := this$extension.bf$delta
  goto lbl$0
  label lbl$0
}

/multiple_receivers.kt:(712,735): info: Generated Viper text for checkClassWithExtension:
field bf$delta: Ref

field bf$size: Ref

method con$T$Int(delta: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$ClassWithExtension())
  ensures acc(p$c$ClassWithExtension$shared(ret), wildcard)
  ensures acc(p$c$ClassWithExtension$unique(ret), write)
  ensures df$intFromRef((unfolding acc(p$c$ClassWithExtension$shared(ret), wildcard) in
      ret.bf$delta)) ==
    df$intFromRef(delta)


method f$applyDelta$TF$T$ClassWithExtension$T$Int(this$dispatch: Ref, this$extension: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$checkClassWithExtension$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$3: Ref
  var anon$4: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$5: Ref
  var anon$6: Ref
  var ret$2: Ref
  var anon$1: Ref
  var anon$7: Ref
  var anon$8: Ref
  var anon$9: Ref
  var anon$10: Ref
  var ret$3: Ref
  var anon$2: Ref
  var anon$11: Ref
  anon$5 := con$T$Int(df$intToRef(42))
  anon$0 := anon$5
  inhale df$isSubtype(df$typeOf(anon$0), df$nullable(df$anyType()))
  inhale df$isSubtype(df$typeOf(anon$0), df$c$ClassWithExtension())
  inhale acc(p$c$ClassWithExtension$shared(anon$0), wildcard)
  anon$1 := anon$0
  anon$7 := f$applyDelta$TF$T$ClassWithExtension$T$Int(anon$1, df$intToRef(42))
  anon$8 := f$returnDelta$TF$T$ClassWithExtension(anon$1)
  anon$9 := f$extensionReturnDelta$TF$T$ClassWithExtension(anon$1)
  anon$2 := df$intToRef(42)
  unfold acc(p$c$ClassWithExtension$shared(anon$1), wildcard)
  anon$11 := anon$1.bf$delta
  ret$3 := sp$plusInts(anon$2, anon$11)
  goto lbl$3
  label lbl$3
  anon$10 := ret$3
  assert df$intFromRef(anon$10) == 84
  label lbl$2
  inhale df$isSubtype(df$typeOf(ret$2), df$unitType())
  anon$6 := ret$2
  ret$1 := anon$6
  inhale df$isSubtype(df$typeOf(ret$1), df$nullable(df$anyType()))
  goto lbl$1
  label lbl$1
  anon$4 := ret$1
  anon$3 := anon$4
  inhale df$isSubtype(df$typeOf(anon$3), df$unitType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method f$extensionReturnDelta$TF$T$ClassWithExtension(this$extension: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$intType())


method f$returnDelta$TF$T$ClassWithExtension(this$dispatch: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$intType())
