/while.kt:(254,264): info: Generated Viper text for test_while:
field bf_field: Ref

field bf_size: Ref

method con_T_Int(p_field: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_ClassWithField())
  ensures acc(p_c_ClassWithField_shared(ret), wildcard)
  ensures acc(p_c_ClassWithField_unique(ret), write)
  ensures df_intFromRef((unfolding acc(p_c_ClassWithField_shared(ret), wildcard) in
      ret.bf_field)) ==
    df_intFromRef(p_field)


method f_test_while_TF_T_ClassWithField(p_param: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var l0_c: Ref
  var l0_initParamField: Ref
  var l0_iteration: Ref
  var anon_1: Ref
  var l0_cond1: Ref
  var anon_2: Ref
  var l0_cond2: Ref
  var anon_3: Ref
  inhale df_isSubtype(df_typeOf(p_param), df_c_ClassWithField())
  inhale acc(p_c_ClassWithField_shared(p_param), wildcard)
  l0_c := con_T_Int(df_intToRef(13))
  unfold acc(p_c_ClassWithField_shared(p_param), wildcard)
  l0_initParamField := p_param.bf_field
  if (df_intFromRef(l0_initParamField) > 0) {
    l0_iteration := df_intToRef(0)
  } else {
    var l3_intermediate: Ref
    var anon_0: Ref
    anon_0 := f_unaryMinus_TF_T_Int(l0_initParamField)
    l3_intermediate := sp_plusInts(anon_0, df_intToRef(1))
    l0_iteration := sp_timesInts(l3_intermediate, l3_intermediate)
  }
  label lbl_continue_0
    invariant acc(p_c_ClassWithField_shared(l0_c), wildcard)
    invariant df_isSubtype(df_typeOf(l0_c), df_c_ClassWithField())
    invariant df_isSubtype(df_typeOf(l0_initParamField), df_intType())
    invariant df_isSubtype(df_typeOf(l0_iteration), df_intType())
    invariant acc(p_c_ClassWithField_shared(p_param), wildcard)
    invariant df_isSubtype(df_typeOf(p_param), df_c_ClassWithField())
  anon_1 := sp_ltInts(l0_iteration, df_intToRef(10))
  if (df_boolFromRef(anon_1)) {
    var l4_field: Ref
    var l4_paramField: Ref
    unfold acc(p_c_ClassWithField_shared(l0_c), wildcard)
    l4_field := l0_c.bf_field
    unfold acc(p_c_ClassWithField_shared(p_param), wildcard)
    l4_paramField := p_param.bf_field
    l0_iteration := sp_plusInts(l0_iteration, df_intToRef(1))
    goto lbl_continue_0
  }
  label lbl_break_0
  assert acc(p_c_ClassWithField_shared(l0_c), wildcard)
  assert df_isSubtype(df_typeOf(l0_c), df_c_ClassWithField())
  assert df_isSubtype(df_typeOf(l0_initParamField), df_intType())
  assert df_isSubtype(df_typeOf(l0_iteration), df_intType())
  assert acc(p_c_ClassWithField_shared(p_param), wildcard)
  assert df_isSubtype(df_typeOf(p_param), df_c_ClassWithField())
  unfold acc(p_c_ClassWithField_shared(l0_c), wildcard)
  anon_2 := l0_c.bf_field
  l0_cond1 := df_boolToRef(df_intFromRef(anon_2) == 13)
  unfold acc(p_c_ClassWithField_shared(p_param), wildcard)
  anon_3 := p_param.bf_field
  l0_cond2 := df_boolToRef(df_intFromRef(l0_initParamField) ==
    df_intFromRef(anon_3))
  assert df_boolFromRef(l0_cond1)
  assert df_boolFromRef(l0_cond2)
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method f_unaryMinus_TF_T_Int(this$dispatch: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_intType())


/while.kt:(899,923): info: Generated Viper text for test_while_with_inlining:
field bf_field: Ref

field bf_size: Ref

method con_T_Int(fieldValue: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_ClassWithField())
  ensures acc(p_c_ClassWithField_shared(ret), wildcard)
  ensures acc(p_c_ClassWithField_unique(ret), write)
  ensures df_intFromRef((unfolding acc(p_c_ClassWithField_shared(ret), wildcard) in
      ret.bf_field)) ==
    df_intFromRef(fieldValue)


method f_test_while_with_inlining_TF_T_ClassWithField(param: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var local: Ref
  var anon_2: Ref
  var anon_3: Ref
  var ret_1: Ref
  var anon_0: Ref
  var anon_4: Ref
  var anon_5: Ref
  var ret_2: Ref
  var anon_1: Ref
  var iteration: Ref
  var anon_6: Ref
  var anon_7: Ref
  var anon_8: Ref
  inhale df_isSubtype(df_typeOf(param), df_c_ClassWithField())
  inhale acc(p_c_ClassWithField_shared(param), wildcard)
  local := con_T_Int(df_intToRef(13))
  anon_4 := con_T_Int(df_intToRef(42))
  anon_0 := anon_4
  inhale df_isSubtype(df_typeOf(anon_0), df_nullable(df_anyType()))
  inhale df_isSubtype(df_typeOf(anon_0), df_c_ClassWithField())
  inhale acc(p_c_ClassWithField_shared(anon_0), wildcard)
  anon_1 := anon_0
  iteration := df_intToRef(0)
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(iteration), df_intType())
    invariant acc(p_c_ClassWithField_shared(anon_1), wildcard)
    invariant df_isSubtype(df_typeOf(anon_1), df_c_ClassWithField())
    invariant acc(p_c_ClassWithField_shared(local), wildcard)
    invariant df_isSubtype(df_typeOf(local), df_c_ClassWithField())
    invariant acc(p_c_ClassWithField_shared(param), wildcard)
    invariant df_isSubtype(df_typeOf(param), df_c_ClassWithField())
  anon_6 := sp_ltInts(iteration, df_intToRef(10))
  if (df_boolFromRef(anon_6)) {
    var paramField: Ref
    var localField: Ref
    var thisField: Ref
    unfold acc(p_c_ClassWithField_shared(param), wildcard)
    paramField := param.bf_field
    unfold acc(p_c_ClassWithField_shared(local), wildcard)
    localField := local.bf_field
    unfold acc(p_c_ClassWithField_shared(anon_1), wildcard)
    thisField := anon_1.bf_field
    iteration := sp_plusInts(iteration, df_intToRef(1))
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(iteration), df_intType())
  assert acc(p_c_ClassWithField_shared(anon_1), wildcard)
  assert df_isSubtype(df_typeOf(anon_1), df_c_ClassWithField())
  assert acc(p_c_ClassWithField_shared(local), wildcard)
  assert df_isSubtype(df_typeOf(local), df_c_ClassWithField())
  assert acc(p_c_ClassWithField_shared(param), wildcard)
  assert df_isSubtype(df_typeOf(param), df_c_ClassWithField())
  unfold acc(p_c_ClassWithField_shared(anon_1), wildcard)
  anon_7 := anon_1.bf_field
  assert df_intFromRef(anon_7) == 42
  unfold acc(p_c_ClassWithField_shared(local), wildcard)
  anon_8 := local.bf_field
  assert df_intFromRef(anon_8) == 13
  label lbl_ret_2
  inhale df_isSubtype(df_typeOf(ret_2), df_unitType())
  anon_5 := ret_2
  ret_1 := anon_5
  inhale df_isSubtype(df_typeOf(ret_1), df_nullable(df_anyType()))
  goto lbl_ret_1
  label lbl_ret_1
  anon_3 := ret_1
  anon_2 := anon_3
  inhale df_isSubtype(df_typeOf(anon_2), df_unitType())
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/while.kt:(1311,1336): info: Generated Viper text for test_while_with_smartcast:
field bf_field: Ref

method f_test_while_with_smartcast_TF_T_Any_T_Any(param: Ref, innerParam: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  inhale df_isSubtype(df_typeOf(param), df_anyType())
  inhale df_isSubtype(df_typeOf(innerParam), df_anyType())
  if (df_isSubtype(df_typeOf(param), df_c_ClassWithField())) {
    var iteration: Ref
    var anon_0: Ref
    iteration := df_intToRef(0)
    label lbl_continue_0
      invariant df_isSubtype(df_typeOf(iteration), df_intType())
      invariant df_isSubtype(df_typeOf(param), df_anyType())
      invariant df_isSubtype(df_typeOf(innerParam), df_anyType())
    anon_0 := sp_ltInts(iteration, df_intToRef(10))
    if (df_boolFromRef(anon_0)) {
      var paramField: Ref
      inhale acc(p_shared(param), wildcard)
      unfold acc(p_shared(param), wildcard)
      paramField := param.bf_field
      if (df_isSubtype(df_typeOf(innerParam), df_c_ClassWithField())) {
        var innerParamField: Ref
        inhale acc(p_shared(innerParam), wildcard)
        unfold acc(p_shared(innerParam), wildcard)
        innerParamField := innerParam.bf_field
      }
      iteration := sp_plusInts(iteration, df_intToRef(1))
      goto lbl_continue_0
    }
    label lbl_break_0
    assert df_isSubtype(df_typeOf(iteration), df_intType())
    assert df_isSubtype(df_typeOf(param), df_anyType())
    assert df_isSubtype(df_typeOf(innerParam), df_anyType())
  }
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
