/while.kt:(254,264): info: Generated Viper text for test_while:
field bf$field: Ref

field bf$size: Ref

method con$T$Int(p$field: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$ClassWithField())
  ensures acc(p$c$ClassWithField$shared(ret), wildcard)
  ensures acc(p$c$ClassWithField$unique(ret), write)
  ensures df$intFromRef((unfolding acc(p$c$ClassWithField$shared(ret), wildcard) in
      ret.bf$field)) ==
    df$intFromRef(p$field)


method f$test_while$TF$T$ClassWithField(p$param: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var l0$c: Ref
  var l0$initParamField: Ref
  var l0$iteration: Ref
  var anon$1: Ref
  var l0$cond1: Ref
  var anon$2: Ref
  var l0$cond2: Ref
  var anon$3: Ref
  inhale df$isSubtype(df$typeOf(p$param), df$c$ClassWithField())
  inhale acc(p$c$ClassWithField$shared(p$param), wildcard)
  l0$c := con$T$Int(df$intToRef(13))
  unfold acc(p$c$ClassWithField$shared(p$param), wildcard)
  l0$initParamField := p$param.bf$field
  if (df$intFromRef(l0$initParamField) > 0) {
    l0$iteration := df$intToRef(0)
  } else {
    var l3$intermediate: Ref
    var anon$0: Ref
    anon$0 := f$unaryMinus$TF$T$Int(l0$initParamField)
    l3$intermediate := sp$plusInts(anon$0, df$intToRef(1))
    l0$iteration := sp$timesInts(l3$intermediate, l3$intermediate)
  }
  label lbl$continue$0
    invariant acc(p$c$ClassWithField$shared(l0$c), wildcard)
    invariant df$isSubtype(df$typeOf(l0$c), df$c$ClassWithField())
    invariant df$isSubtype(df$typeOf(l0$initParamField), df$intType())
    invariant df$isSubtype(df$typeOf(l0$iteration), df$intType())
    invariant acc(p$c$ClassWithField$shared(p$param), wildcard)
    invariant df$isSubtype(df$typeOf(p$param), df$c$ClassWithField())
  anon$1 := sp$ltInts(l0$iteration, df$intToRef(10))
  if (df$boolFromRef(anon$1)) {
    var l4$field: Ref
    var l4$paramField: Ref
    unfold acc(p$c$ClassWithField$shared(l0$c), wildcard)
    l4$field := l0$c.bf$field
    unfold acc(p$c$ClassWithField$shared(p$param), wildcard)
    l4$paramField := p$param.bf$field
    l0$iteration := sp$plusInts(l0$iteration, df$intToRef(1))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert acc(p$c$ClassWithField$shared(l0$c), wildcard)
  assert df$isSubtype(df$typeOf(l0$c), df$c$ClassWithField())
  assert df$isSubtype(df$typeOf(l0$initParamField), df$intType())
  assert df$isSubtype(df$typeOf(l0$iteration), df$intType())
  assert acc(p$c$ClassWithField$shared(p$param), wildcard)
  assert df$isSubtype(df$typeOf(p$param), df$c$ClassWithField())
  unfold acc(p$c$ClassWithField$shared(l0$c), wildcard)
  anon$2 := l0$c.bf$field
  l0$cond1 := df$boolToRef(df$intFromRef(anon$2) == 13)
  unfold acc(p$c$ClassWithField$shared(p$param), wildcard)
  anon$3 := p$param.bf$field
  l0$cond2 := df$boolToRef(df$intFromRef(l0$initParamField) ==
    df$intFromRef(anon$3))
  assert df$boolFromRef(l0$cond1)
  assert df$boolFromRef(l0$cond2)
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method f$unaryMinus$TF$T$Int(this$dispatch: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$intType())


/while.kt:(899,923): info: Generated Viper text for test_while_with_inlining:
field bf$field: Ref

field bf$size: Ref

method con$T$Int(fieldValue: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$ClassWithField())
  ensures acc(p$c$ClassWithField$shared(ret), wildcard)
  ensures acc(p$c$ClassWithField$unique(ret), write)
  ensures df$intFromRef((unfolding acc(p$c$ClassWithField$shared(ret), wildcard) in
      ret.bf$field)) ==
    df$intFromRef(fieldValue)


method f$test_while_with_inlining$TF$T$ClassWithField(param: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var local: Ref
  var anon$2: Ref
  var anon$3: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$4: Ref
  var anon$5: Ref
  var ret$2: Ref
  var anon$1: Ref
  var iteration: Ref
  var anon$6: Ref
  var anon$7: Ref
  var anon$8: Ref
  inhale df$isSubtype(df$typeOf(param), df$c$ClassWithField())
  inhale acc(p$c$ClassWithField$shared(param), wildcard)
  local := con$T$Int(df$intToRef(13))
  anon$4 := con$T$Int(df$intToRef(42))
  anon$0 := anon$4
  inhale df$isSubtype(df$typeOf(anon$0), df$nullable(df$anyType()))
  inhale df$isSubtype(df$typeOf(anon$0), df$c$ClassWithField())
  inhale acc(p$c$ClassWithField$shared(anon$0), wildcard)
  anon$1 := anon$0
  iteration := df$intToRef(0)
  label lbl$continue$0
    invariant df$isSubtype(df$typeOf(iteration), df$intType())
    invariant acc(p$c$ClassWithField$shared(anon$1), wildcard)
    invariant df$isSubtype(df$typeOf(anon$1), df$c$ClassWithField())
    invariant acc(p$c$ClassWithField$shared(local), wildcard)
    invariant df$isSubtype(df$typeOf(local), df$c$ClassWithField())
    invariant acc(p$c$ClassWithField$shared(param), wildcard)
    invariant df$isSubtype(df$typeOf(param), df$c$ClassWithField())
  anon$6 := sp$ltInts(iteration, df$intToRef(10))
  if (df$boolFromRef(anon$6)) {
    var paramField: Ref
    var localField: Ref
    var thisField: Ref
    unfold acc(p$c$ClassWithField$shared(param), wildcard)
    paramField := param.bf$field
    unfold acc(p$c$ClassWithField$shared(local), wildcard)
    localField := local.bf$field
    unfold acc(p$c$ClassWithField$shared(anon$1), wildcard)
    thisField := anon$1.bf$field
    iteration := sp$plusInts(iteration, df$intToRef(1))
    goto lbl$continue$0
  }
  label lbl$break$0
  assert df$isSubtype(df$typeOf(iteration), df$intType())
  assert acc(p$c$ClassWithField$shared(anon$1), wildcard)
  assert df$isSubtype(df$typeOf(anon$1), df$c$ClassWithField())
  assert acc(p$c$ClassWithField$shared(local), wildcard)
  assert df$isSubtype(df$typeOf(local), df$c$ClassWithField())
  assert acc(p$c$ClassWithField$shared(param), wildcard)
  assert df$isSubtype(df$typeOf(param), df$c$ClassWithField())
  unfold acc(p$c$ClassWithField$shared(anon$1), wildcard)
  anon$7 := anon$1.bf$field
  assert df$intFromRef(anon$7) == 42
  unfold acc(p$c$ClassWithField$shared(local), wildcard)
  anon$8 := local.bf$field
  assert df$intFromRef(anon$8) == 13
  label lbl$ret$2
  inhale df$isSubtype(df$typeOf(ret$2), df$unitType())
  anon$5 := ret$2
  ret$1 := anon$5
  inhale df$isSubtype(df$typeOf(ret$1), df$nullable(df$anyType()))
  goto lbl$ret$1
  label lbl$ret$1
  anon$3 := ret$1
  anon$2 := anon$3
  inhale df$isSubtype(df$typeOf(anon$2), df$unitType())
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/while.kt:(1311,1336): info: Generated Viper text for test_while_with_smartcast:
field bf$field: Ref

method f$test_while_with_smartcast$TF$T$Any$T$Any(param: Ref, innerParam: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(param), df$anyType())
  inhale df$isSubtype(df$typeOf(innerParam), df$anyType())
  if (df$isSubtype(df$typeOf(param), df$c$ClassWithField())) {
    var iteration: Ref
    var anon$0: Ref
    iteration := df$intToRef(0)
    label lbl$continue$0
      invariant df$isSubtype(df$typeOf(iteration), df$intType())
      invariant df$isSubtype(df$typeOf(param), df$anyType())
      invariant df$isSubtype(df$typeOf(innerParam), df$anyType())
    anon$0 := sp$ltInts(iteration, df$intToRef(10))
    if (df$boolFromRef(anon$0)) {
      var paramField: Ref
      inhale acc(p$shared(param), wildcard)
      unfold acc(p$shared(param), wildcard)
      paramField := param.bf$field
      if (df$isSubtype(df$typeOf(innerParam), df$c$ClassWithField())) {
        var innerParamField: Ref
        inhale acc(p$shared(innerParam), wildcard)
        unfold acc(p$shared(innerParam), wildcard)
        innerParamField := innerParam.bf$field
      }
      iteration := sp$plusInts(iteration, df$intToRef(1))
      goto lbl$continue$0
    }
    label lbl$break$0
    assert df$isSubtype(df$typeOf(iteration), df$intType())
    assert df$isSubtype(df$typeOf(param), df$anyType())
    assert df$isSubtype(df$typeOf(innerParam), df$anyType())
  }
  label lbl$ret$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}
