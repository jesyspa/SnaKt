/list.kt:(77,88): info: Generated Viper text for declaration:
field sp_size: Ref

method f_declaration_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var l1: Ref
  var l2: Ref
  var l3: Ref
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/list.kt:(187,201): info: Generated Viper text for initialization:
field sp_size: Ref

method f_emptyList_TF_() returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_pkg$kotlin_collections_List())
  ensures acc(ret.sp_size, write)
  ensures df_intFromRef(ret.sp_size) >= 0
  ensures acc(p_pkg$kotlin_collections$c_List_shared(ret), wildcard)
  ensures df_intFromRef(ret.sp_size) == 0


method f_initialization_TF_T_List(l: Ref) returns (ret_0: Ref)
  requires acc(l.sp_size, write)
  requires df_intFromRef(l.sp_size) >= 0
  ensures acc(l.sp_size, write)
  ensures df_intFromRef(l.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var myList: Ref
  var myEmptyList: Ref
  inhale df_isSubtype(df_typeOf(l), df_c_pkg$kotlin_collections_List())
  inhale acc(p_pkg$kotlin_collections$c_List_shared(l), wildcard)
  myList := l
  myEmptyList := f_emptyList_TF_()
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/list.kt:(297,304): info: Generated Viper text for add_get:
field sp_size: Ref

method f_add_TF_T_MutableList_T_Int(this$dispatch: Ref, element: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_boolType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size)) + 1


method f_add_get_TF_T_MutableList(l: Ref) returns (ret_0: Ref)
  requires acc(l.sp_size, write)
  requires df_intFromRef(l.sp_size) >= 0
  ensures acc(l.sp_size, write)
  ensures df_intFromRef(l.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  var n: Ref
  inhale df_isSubtype(df_typeOf(l), df_c_pkg$kotlin_collections_MutableList())
  inhale acc(p_pkg$kotlin_collections$c_MutableList_shared(l), wildcard)
  anon_0 := f_add_TF_T_MutableList_T_Int(l, df_intToRef(1))
  n := f_get_TF_T_MutableList_T_Int(l, df_intToRef(0))
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method f_get_TF_T_MutableList_T_Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(index) >= 0
  requires df_intFromRef(this$dispatch.sp_size) > df_intFromRef(index)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_intType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))


/list.kt:(379,391): info: Generated Viper text for last_or_null:
field sp_size: Ref

method f_get_TF_T_List_T_Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(index) >= 0
  requires df_intFromRef(this$dispatch.sp_size) > df_intFromRef(index)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_intType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))


method f_last_or_null_TF_T_List(l: Ref) returns (ret_0: Ref)
  requires acc(l.sp_size, write)
  requires df_intFromRef(l.sp_size) >= 0
  ensures acc(l.sp_size, write)
  ensures df_intFromRef(l.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_nullable(df_intType()))
{
  var size: Ref
  inhale df_isSubtype(df_typeOf(l), df_c_pkg$kotlin_collections_List())
  inhale acc(p_pkg$kotlin_collections$c_List_shared(l), wildcard)
  size := l.sp_size
  inhale df_isSubtype(df_typeOf(size), df_intType())
  if (!(df_intFromRef(size) == 0)) {
    var anon_0: Ref
    anon_0 := f_get_TF_T_List_T_Int(l, sp_minusInts(size, df_intToRef(1)))
    ret_0 := anon_0
    goto lbl_0
  } else {
    ret_0 := df_nullValue()
    goto lbl_0
  }
  label lbl_0
}

/list.kt:(545,553): info: Generated Viper text for is_empty:
field sp_size: Ref

method f_get_TF_T_List_T_Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(index) >= 0
  requires df_intFromRef(this$dispatch.sp_size) > df_intFromRef(index)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_intType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))


method f_isEmpty_TF_T_List(this$dispatch: Ref) returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_boolType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))
  ensures df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) == 0
  ensures !df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) > 0


method f_is_empty_TF_T_List(l: Ref) returns (ret_0: Ref)
  requires acc(l.sp_size, write)
  requires df_intFromRef(l.sp_size) >= 0
  ensures acc(l.sp_size, write)
  ensures df_intFromRef(l.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(l), df_c_pkg$kotlin_collections_List())
  inhale acc(p_pkg$kotlin_collections$c_List_shared(l), wildcard)
  anon_0 := f_isEmpty_TF_T_List(l)
  if (!df_boolFromRef(anon_0)) {
    ret_0 := f_get_TF_T_List_T_Int(l, df_intToRef(0))
  } else {
    ret_0 := df_intToRef(1)}
  goto lbl_0
  label lbl_0
}

/list.kt:(670,683): info: Generated Viper text for nullable_list:
field sp_size: Ref

method f_get_TF_T_List_T_Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  requires df_intFromRef(index) >= 0
  requires df_intFromRef(this$dispatch.sp_size) > df_intFromRef(index)
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_intType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))


method f_isEmpty_TF_T_List(this$dispatch: Ref) returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_boolType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))
  ensures df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) == 0
  ensures !df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) > 0


method f_nullable_list_TF_NT_List(l: Ref) returns (ret_0: Ref)
  requires l != df_nullValue() ==> acc(l.sp_size, write)
  requires l != df_nullValue() ==> df_intFromRef(l.sp_size) >= 0
  ensures l != df_nullValue() ==> acc(l.sp_size, write)
  ensures l != df_nullValue() ==> df_intFromRef(l.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(l), df_nullable(df_c_pkg$kotlin_collections_List()))
  inhale l != df_nullValue() ==>
    acc(p_pkg$kotlin_collections$c_List_shared(l), wildcard)
  if (!(l == df_nullValue())) {
    var anon_1: Ref
    anon_1 := f_isEmpty_TF_T_List(l)
    anon_0 := sp_notBool(anon_1)
  } else {
    anon_0 := df_boolToRef(false)}
  if (df_boolFromRef(anon_0)) {
    var x: Ref
    var anon_2: Ref
    anon_2 := l.sp_size
    inhale df_isSubtype(df_typeOf(anon_2), df_intType())
    x := f_get_TF_T_List_T_Int(l, sp_minusInts(anon_2, df_intToRef(1)))
  }
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
