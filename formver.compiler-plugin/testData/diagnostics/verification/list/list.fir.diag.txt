/list.kt:(77,88): info: Generated Viper text for declaration:
field sp$size: Ref

method f$declaration$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var l1: Ref
  var l2: Ref
  var l3: Ref
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/list.kt:(187,201): info: Generated Viper text for initialization:
field sp$size: Ref

method f$emptyList$TF$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$pkg$kotlin_collections$List())
  ensures acc(ret.sp$size, write)
  ensures df$intFromRef(ret.sp$size) >= 0
  ensures acc(p$pkg$kotlin_collections$c$List$shared(ret), wildcard)
  ensures df$intFromRef(ret.sp$size) == 0


method f$initialization$TF$T$List(l: Ref) returns (ret$0: Ref)
  requires acc(l.sp$size, write)
  requires df$intFromRef(l.sp$size) >= 0
  ensures acc(l.sp$size, write)
  ensures df$intFromRef(l.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var myList: Ref
  var myEmptyList: Ref
  inhale df$isSubtype(df$typeOf(l), df$c$pkg$kotlin_collections$List())
  inhale acc(p$pkg$kotlin_collections$c$List$shared(l), wildcard)
  myList := l
  myEmptyList := f$emptyList$TF$()
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/list.kt:(297,304): info: Generated Viper text for add_get:
field sp$size: Ref

method f$add$TF$T$MutableList$T$Int(this$dispatch: Ref, element: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$boolType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size)) + 1


method f$add_get$TF$T$MutableList(l: Ref) returns (ret$0: Ref)
  requires acc(l.sp$size, write)
  requires df$intFromRef(l.sp$size) >= 0
  ensures acc(l.sp$size, write)
  ensures df$intFromRef(l.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  var n: Ref
  inhale df$isSubtype(df$typeOf(l), df$c$pkg$kotlin_collections$MutableList())
  inhale acc(p$pkg$kotlin_collections$c$MutableList$shared(l), wildcard)
  anon$0 := f$add$TF$T$MutableList$T$Int(l, df$intToRef(1))
  n := f$get$TF$T$MutableList$T$Int(l, df$intToRef(0))
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method f$get$TF$T$MutableList$T$Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  requires df$intFromRef(index) >= 0
  requires df$intFromRef(this$dispatch.sp$size) > df$intFromRef(index)
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$intType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))


/list.kt:(379,391): info: Generated Viper text for last_or_null:
field sp$size: Ref

method f$get$TF$T$List$T$Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  requires df$intFromRef(index) >= 0
  requires df$intFromRef(this$dispatch.sp$size) > df$intFromRef(index)
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$intType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))


method f$last_or_null$TF$T$List(l: Ref) returns (ret$0: Ref)
  requires acc(l.sp$size, write)
  requires df$intFromRef(l.sp$size) >= 0
  ensures acc(l.sp$size, write)
  ensures df$intFromRef(l.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$intType()))
{
  var size: Ref
  inhale df$isSubtype(df$typeOf(l), df$c$pkg$kotlin_collections$List())
  inhale acc(p$pkg$kotlin_collections$c$List$shared(l), wildcard)
  size := l.sp$size
  inhale df$isSubtype(df$typeOf(size), df$intType())
  if (!(df$intFromRef(size) == 0)) {
    var anon$0: Ref
    anon$0 := f$get$TF$T$List$T$Int(l, sp$minusInts(size, df$intToRef(1)))
    ret$0 := anon$0
    goto lbl$0
  } else {
    ret$0 := df$nullValue()
    goto lbl$0
  }
  label lbl$0
}

/list.kt:(545,553): info: Generated Viper text for is_empty:
field sp$size: Ref

method f$get$TF$T$List$T$Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  requires df$intFromRef(index) >= 0
  requires df$intFromRef(this$dispatch.sp$size) > df$intFromRef(index)
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$intType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))


method f$isEmpty$TF$T$List(this$dispatch: Ref) returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$boolType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))
  ensures df$boolFromRef(ret) ==> df$intFromRef(this$dispatch.sp$size) == 0
  ensures !df$boolFromRef(ret) ==> df$intFromRef(this$dispatch.sp$size) > 0


method f$is_empty$TF$T$List(l: Ref) returns (ret$0: Ref)
  requires acc(l.sp$size, write)
  requires df$intFromRef(l.sp$size) >= 0
  ensures acc(l.sp$size, write)
  ensures df$intFromRef(l.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$intType())
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(l), df$c$pkg$kotlin_collections$List())
  inhale acc(p$pkg$kotlin_collections$c$List$shared(l), wildcard)
  anon$0 := f$isEmpty$TF$T$List(l)
  if (!df$boolFromRef(anon$0)) {
    ret$0 := f$get$TF$T$List$T$Int(l, df$intToRef(0))
  } else {
    ret$0 := df$intToRef(1)}
  goto lbl$0
  label lbl$0
}

/list.kt:(670,683): info: Generated Viper text for nullable_list:
field sp$size: Ref

method f$get$TF$T$List$T$Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  requires df$intFromRef(index) >= 0
  requires df$intFromRef(this$dispatch.sp$size) > df$intFromRef(index)
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$intType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))


method f$isEmpty$TF$T$List(this$dispatch: Ref) returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$boolType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))
  ensures df$boolFromRef(ret) ==> df$intFromRef(this$dispatch.sp$size) == 0
  ensures !df$boolFromRef(ret) ==> df$intFromRef(this$dispatch.sp$size) > 0


method f$nullable_list$TF$NT$List(l: Ref) returns (ret$0: Ref)
  requires l != df$nullValue() ==> acc(l.sp$size, write)
  requires l != df$nullValue() ==> df$intFromRef(l.sp$size) >= 0
  ensures l != df$nullValue() ==> acc(l.sp$size, write)
  ensures l != df$nullValue() ==> df$intFromRef(l.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(l), df$nullable(df$c$pkg$kotlin_collections$List()))
  inhale l != df$nullValue() ==>
    acc(p$pkg$kotlin_collections$c$List$shared(l), wildcard)
  if (!(l == df$nullValue())) {
    var anon$1: Ref
    anon$1 := f$isEmpty$TF$T$List(l)
    anon$0 := sp$notBool(anon$1)
  } else {
    anon$0 := df$boolToRef(false)}
  if (df$boolFromRef(anon$0)) {
    var x: Ref
    var anon$2: Ref
    anon$2 := l.sp$size
    inhale df$isSubtype(df$typeOf(anon$2), df$intType())
    x := f$get$TF$T$List$T$Int(l, sp$minusInts(anon$2, df$intToRef(1)))
  }
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}
