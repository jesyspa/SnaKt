/binary_search.kt:(90,108): info: Generated Viper text for safe_binary_search:
field sp$size: Ref

method f$get$TF$T$List$T$Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  requires df$intFromRef(index) >= 0
  requires df$intFromRef(this$dispatch.sp$size) > df$intFromRef(index)
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$intType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))


method f$isEmpty$TF$T$List(this$dispatch: Ref) returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$boolType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))
  ensures df$boolFromRef(ret) ==> df$intFromRef(this$dispatch.sp$size) == 0
  ensures !df$boolFromRef(ret) ==> df$intFromRef(this$dispatch.sp$size) > 0


method f$safe_binary_search$TF$T$List$T$Int(arr: Ref, target: Ref)
  returns (ret$0: Ref)
  requires acc(arr.sp$size, write)
  requires df$intFromRef(arr.sp$size) >= 0
  ensures acc(arr.sp$size, write)
  ensures df$intFromRef(arr.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
{
  var size: Ref
  var mid: Ref
  var anon$0: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(arr), df$c$pkg$kotlin_collections$List())
  inhale acc(p$pkg$kotlin_collections$c$List$shared(arr), wildcard)
  inhale df$isSubtype(df$typeOf(target), df$intType())
  size := arr.sp$size
  inhale df$isSubtype(df$typeOf(size), df$intType())
  anon$0 := arr.sp$size
  inhale df$isSubtype(df$typeOf(anon$0), df$intType())
  mid := sp$divInts(anon$0, df$intToRef(2))
  anon$1 := f$isEmpty$TF$T$List(arr)
  if (df$boolFromRef(anon$1)) {
    ret$0 := df$boolToRef(false)
  } else {
    var anon$2: Ref
    anon$2 := f$get$TF$T$List$T$Int(arr, mid)
    if (df$intFromRef(anon$2) == df$intFromRef(target)) {
      ret$0 := df$boolToRef(true)
    } else {
      var anon$3: Ref
      anon$3 := f$get$TF$T$List$T$Int(arr, mid)
      if (df$intFromRef(anon$3) < df$intFromRef(target)) {
        var anon$4: Ref
        anon$4 := f$subList$TF$T$List$T$Int$T$Int(arr, sp$plusInts(mid, df$intToRef(1)),
          size)
        ret$0 := f$safe_binary_search$TF$T$List$T$Int(anon$4, target)
      } else {
        var anon$5: Ref
        anon$5 := f$subList$TF$T$List$T$Int$T$Int(arr, df$intToRef(0), mid)
        ret$0 := f$safe_binary_search$TF$T$List$T$Int(anon$5, target)
      }
    }
  }
  goto lbl$0
  label lbl$0
}

method f$subList$TF$T$List$T$Int$T$Int(this$dispatch: Ref, fromIndex: Ref, toIndex: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  requires df$intFromRef(fromIndex) <= df$intFromRef(toIndex)
  requires df$intFromRef(fromIndex) >= 0
  requires df$intFromRef(toIndex) <= df$intFromRef(this$dispatch.sp$size)
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$c$pkg$kotlin_collections$List())
  ensures acc(ret.sp$size, write)
  ensures df$intFromRef(ret.sp$size) >= 0
  ensures acc(p$pkg$kotlin_collections$c$List$shared(ret), wildcard)
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))
  ensures df$intFromRef(ret.sp$size) ==
    df$intFromRef(toIndex) - df$intFromRef(fromIndex)


/binary_search.kt:(537,563): info: Generated Viper text for unsafe_binary_search_fixed:
field sp$size: Ref

method f$get$TF$T$List$T$Int(this$dispatch: Ref, index: Ref)
  returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  requires df$intFromRef(index) >= 0
  requires df$intFromRef(this$dispatch.sp$size) > df$intFromRef(index)
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$intType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))


method f$unsafe_binary_search_fixed$TF$T$List$T$Int$T$Int$T$Int(arr: Ref, target: Ref,
  left: Ref, right: Ref)
  returns (ret$0: Ref)
  requires acc(arr.sp$size, write)
  requires df$intFromRef(arr.sp$size) >= 0
  ensures acc(arr.sp$size, write)
  ensures df$intFromRef(arr.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
{
  var anon$0: Ref
  var anon$1: Ref
  var mid: Ref
  var anon$3: Ref
  inhale df$isSubtype(df$typeOf(arr), df$c$pkg$kotlin_collections$List())
  inhale acc(p$pkg$kotlin_collections$c$List$shared(arr), wildcard)
  inhale df$isSubtype(df$typeOf(target), df$intType())
  inhale df$isSubtype(df$typeOf(left), df$intType())
  inhale df$isSubtype(df$typeOf(right), df$intType())
  if (df$intFromRef(left) > df$intFromRef(right)) {
    anon$1 := df$boolToRef(true)
  } else {
    anon$1 := sp$ltInts(left, df$intToRef(0))}
  if (df$boolFromRef(anon$1)) {
    anon$0 := df$boolToRef(true)
  } else {
    var anon$2: Ref
    anon$2 := arr.sp$size
    inhale df$isSubtype(df$typeOf(anon$2), df$intType())
    anon$0 := sp$geInts(right, anon$2)
  }
  if (df$boolFromRef(anon$0)) {
    ret$0 := df$boolToRef(false)
    goto lbl$0
  }
  mid := sp$plusInts(left, sp$divInts(sp$minusInts(right, left), df$intToRef(2)))
  anon$3 := f$get$TF$T$List$T$Int(arr, mid)
  if (df$intFromRef(anon$3) == df$intFromRef(target)) {
    ret$0 := df$boolToRef(true)
  } else {
    var anon$4: Ref
    anon$4 := f$get$TF$T$List$T$Int(arr, mid)
    if (df$intFromRef(anon$4) < df$intFromRef(target)) {
      ret$0 := f$unsafe_binary_search_fixed$TF$T$List$T$Int$T$Int$T$Int(arr,
        target, sp$plusInts(mid, df$intToRef(1)), right)
    } else {
      ret$0 := f$unsafe_binary_search_fixed$TF$T$List$T$Int$T$Int$T$Int(arr,
        target, left, sp$minusInts(mid, df$intToRef(1)))}
  }
  goto lbl$0
  label lbl$0
}
