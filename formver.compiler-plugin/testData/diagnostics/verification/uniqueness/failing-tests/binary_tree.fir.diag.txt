/binary_tree.kt:(261,273): info: Generated Viper text for get_left_val:
field bf_data: Ref

field bf_left: Ref

field bf_right: Ref

predicate p_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_left, wildcard) &&
  (this$dispatch.bf_left != df_nullValue() ==>
  acc(p_shared(this$dispatch.bf_left), wildcard)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_left), df_nullable(df_c_Node())) &&
  acc(this$dispatch.bf_right, wildcard) &&
  (this$dispatch.bf_right != df_nullValue() ==>
  acc(p_shared(this$dispatch.bf_right), wildcard)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_right), df_nullable(df_c_Node()))
}

predicate p_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_data, write) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_data), df_intType()) &&
  acc(this$dispatch.bf_left, wildcard) &&
  (this$dispatch.bf_left != df_nullValue() ==>
  acc(p_shared(this$dispatch.bf_left), wildcard)) &&
  (this$dispatch.bf_left != df_nullValue() ==>
  acc(p_unique(this$dispatch.bf_left), write)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_left), df_nullable(df_c_Node())) &&
  acc(this$dispatch.bf_right, wildcard) &&
  (this$dispatch.bf_right != df_nullValue() ==>
  acc(p_shared(this$dispatch.bf_right), wildcard)) &&
  (this$dispatch.bf_right != df_nullValue() ==>
  acc(p_unique(this$dispatch.bf_right), write)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_right), df_nullable(df_c_Node()))
}

method f_get_left_val_TF_T_Node(n: Ref) returns (ret_0: Ref)
  requires acc(p_unique(n), write)
  ensures df_isSubtype(df_typeOf(ret_0), df_nullable(df_intType()))
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(n), df_c_Node())
  inhale acc(p_shared(n), wildcard)
  unfold acc(p_shared(n), wildcard)
  anon_0 := n.bf_left
  if (anon_0 != df_nullValue()) {
    var anon_1: Ref
    inhale acc(anon_0.bf_data, write)
    anon_1 := anon_0.bf_data
    exhale acc(anon_0.bf_data, write)
    inhale df_isSubtype(df_typeOf(anon_1), df_intType())
    ret_0 := anon_1
  } else {
    ret_0 := df_nullValue()}
  goto lbl_0
  label lbl_0
}

/binary_tree.kt:(445,449): info: Generated Viper text for test:
field bf_data: Ref

field bf_left: Ref

field bf_right: Ref

field bf_size: Ref

predicate p_c_Node_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_left, wildcard) &&
  (this$dispatch.bf_left != df_nullValue() ==>
  acc(p_c_Node_shared(this$dispatch.bf_left), wildcard)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_left), df_nullable(df_c_Node())) &&
  acc(this$dispatch.bf_right, wildcard) &&
  (this$dispatch.bf_right != df_nullValue() ==>
  acc(p_c_Node_shared(this$dispatch.bf_right), wildcard)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_right), df_nullable(df_c_Node()))
}

predicate p_c_Node_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_data, write) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_data), df_intType()) &&
  acc(this$dispatch.bf_left, wildcard) &&
  (this$dispatch.bf_left != df_nullValue() ==>
  acc(p_c_Node_shared(this$dispatch.bf_left), wildcard)) &&
  (this$dispatch.bf_left != df_nullValue() ==>
  acc(p_c_Node_unique(this$dispatch.bf_left), write)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_left), df_nullable(df_c_Node())) &&
  acc(this$dispatch.bf_right, wildcard) &&
  (this$dispatch.bf_right != df_nullValue() ==>
  acc(p_c_Node_shared(this$dispatch.bf_right), wildcard)) &&
  (this$dispatch.bf_right != df_nullValue() ==>
  acc(p_c_Node_unique(this$dispatch.bf_right), write)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_right), df_nullable(df_c_Node()))
}

predicate p_pkg$java_io$c_Serializable_shared(this$dispatch: Ref) {
  true
}

predicate p_pkg$java_io$c_Serializable_unique(this$dispatch: Ref) {
  true
}

predicate p_pkg$kotlin$c_BooleanArray_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_size, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_size), df_intType()) &&
  acc(p_pkg$kotlin$c_Cloneable_shared(this$dispatch), wildcard) &&
  acc(p_pkg$java_io$c_Serializable_shared(this$dispatch), wildcard)
}

predicate p_pkg$kotlin$c_BooleanArray_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_size, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_size), df_intType()) &&
  acc(p_pkg$kotlin$c_Cloneable_unique(this$dispatch), write) &&
  acc(p_pkg$java_io$c_Serializable_unique(this$dispatch), write)
}

predicate p_pkg$kotlin$c_Cloneable_shared(this$dispatch: Ref) {
  true
}

predicate p_pkg$kotlin$c_Cloneable_unique(this$dispatch: Ref) {
  true
}

method con_T_Int_NT_Node_NT_Node(data: Ref, left: Ref, right: Ref)
  returns (ret: Ref)
  requires left != df_nullValue() ==> acc(p_c_Node_unique(left), write)
  requires right != df_nullValue() ==> acc(p_c_Node_unique(right), write)
  ensures df_isSubtype(df_typeOf(ret), df_c_Node())
  ensures acc(p_c_Node_shared(ret), wildcard)
  ensures acc(p_c_Node_unique(ret), write)
  ensures (unfolding acc(p_c_Node_shared(ret), wildcard) in ret.bf_left) ==
    left &&
    (unfolding acc(p_c_Node_shared(ret), wildcard) in ret.bf_right) ==
    right


method f_test_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var n: Ref
  var anon_0: Ref
  var anon_1: Ref
  var anon_2: Ref
  var anon_3: Ref
  var expr1: Ref
  var anon_4: Ref
  var expr2: Ref
  var anon_5: Ref
  var anon_6: Ref
  anon_0 := con_T_Int_NT_Node_NT_Node(df_intToRef(4), df_nullValue(), df_nullValue())
  anon_2 := con_T_Int_NT_Node_NT_Node(df_intToRef(2), df_nullValue(), df_nullValue())
  anon_3 := con_T_Int_NT_Node_NT_Node(df_intToRef(1), df_nullValue(), df_nullValue())
  anon_1 := con_T_Int_NT_Node_NT_Node(df_intToRef(3), anon_2, anon_3)
  n := con_T_Int_NT_Node_NT_Node(df_intToRef(5), anon_0, anon_1)
  inhale acc(n.bf_data, write)
  anon_4 := n.bf_data
  exhale acc(n.bf_data, write)
  inhale df_isSubtype(df_typeOf(anon_4), df_intType())
  expr1 := df_boolToRef(df_intFromRef(anon_4) == 5)
  assert df_boolFromRef(expr1)
  unfold acc(p_c_Node_shared(n), wildcard)
  anon_6 := n.bf_left
  if (anon_6 != df_nullValue()) {
    var anon_7: Ref
    inhale acc(anon_6.bf_data, write)
    anon_7 := anon_6.bf_data
    exhale acc(anon_6.bf_data, write)
    inhale df_isSubtype(df_typeOf(anon_7), df_intType())
    anon_5 := anon_7
  } else {
    anon_5 := df_nullValue()}
  expr2 := df_boolToRef(anon_5 == df_intToRef(4))
  assert df_boolFromRef(expr2)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/binary_tree.kt:(585,590): warning: Viper verification error: Assert might fail. Assertion df_boolFromRef(expr1) might not hold.
