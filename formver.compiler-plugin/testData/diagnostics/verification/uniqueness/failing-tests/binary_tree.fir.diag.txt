/binary_tree.kt:(261,273): info: Generated Viper text for get_left_val:
field bf$data: Ref

field bf$left: Ref

field bf$right: Ref

predicate p$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$left, wildcard) &&
  (this$dispatch.bf$left != df$nullValue() ==>
  acc(p$shared(this$dispatch.bf$left), wildcard)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$left), df$nullable(df$c$Node())) &&
  acc(this$dispatch.bf$right, wildcard) &&
  (this$dispatch.bf$right != df$nullValue() ==>
  acc(p$shared(this$dispatch.bf$right), wildcard)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$right), df$nullable(df$c$Node()))
}

predicate p$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$data, write) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$data), df$intType()) &&
  acc(this$dispatch.bf$left, wildcard) &&
  (this$dispatch.bf$left != df$nullValue() ==>
  acc(p$shared(this$dispatch.bf$left), wildcard)) &&
  (this$dispatch.bf$left != df$nullValue() ==>
  acc(p$unique(this$dispatch.bf$left), write)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$left), df$nullable(df$c$Node())) &&
  acc(this$dispatch.bf$right, wildcard) &&
  (this$dispatch.bf$right != df$nullValue() ==>
  acc(p$shared(this$dispatch.bf$right), wildcard)) &&
  (this$dispatch.bf$right != df$nullValue() ==>
  acc(p$unique(this$dispatch.bf$right), write)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$right), df$nullable(df$c$Node()))
}

method f$get_left_val$TF$T$Node(n: Ref) returns (ret$0: Ref)
  requires acc(p$unique(n), write)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$intType()))
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(n), df$c$Node())
  inhale acc(p$shared(n), wildcard)
  unfold acc(p$shared(n), wildcard)
  anon$0 := n.bf$left
  if (anon$0 != df$nullValue()) {
    var anon$1: Ref
    inhale acc(anon$0.bf$data, write)
    anon$1 := anon$0.bf$data
    exhale acc(anon$0.bf$data, write)
    inhale df$isSubtype(df$typeOf(anon$1), df$intType())
    ret$0 := anon$1
  } else {
    ret$0 := df$nullValue()}
  goto lbl$0
  label lbl$0
}

/binary_tree.kt:(445,449): info: Generated Viper text for test:
field bf$data: Ref

field bf$left: Ref

field bf$right: Ref

field bf$size: Ref

predicate p$c$Node$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$left, wildcard) &&
  (this$dispatch.bf$left != df$nullValue() ==>
  acc(p$c$Node$shared(this$dispatch.bf$left), wildcard)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$left), df$nullable(df$c$Node())) &&
  acc(this$dispatch.bf$right, wildcard) &&
  (this$dispatch.bf$right != df$nullValue() ==>
  acc(p$c$Node$shared(this$dispatch.bf$right), wildcard)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$right), df$nullable(df$c$Node()))
}

predicate p$c$Node$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$data, write) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$data), df$intType()) &&
  acc(this$dispatch.bf$left, wildcard) &&
  (this$dispatch.bf$left != df$nullValue() ==>
  acc(p$c$Node$shared(this$dispatch.bf$left), wildcard)) &&
  (this$dispatch.bf$left != df$nullValue() ==>
  acc(p$c$Node$unique(this$dispatch.bf$left), write)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$left), df$nullable(df$c$Node())) &&
  acc(this$dispatch.bf$right, wildcard) &&
  (this$dispatch.bf$right != df$nullValue() ==>
  acc(p$c$Node$shared(this$dispatch.bf$right), wildcard)) &&
  (this$dispatch.bf$right != df$nullValue() ==>
  acc(p$c$Node$unique(this$dispatch.bf$right), write)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$right), df$nullable(df$c$Node()))
}

predicate p$pkg$java_io$c$Serializable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$java_io$c$Serializable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$BooleanArray$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$size), df$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin$c$BooleanArray$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$size), df$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin$c$Cloneable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$unique(this$dispatch: Ref) {
  true
}

method con$T$Int$NT$Node$NT$Node(data: Ref, left: Ref, right: Ref)
  returns (ret: Ref)
  requires left != df$nullValue() ==> acc(p$c$Node$unique(left), write)
  requires right != df$nullValue() ==> acc(p$c$Node$unique(right), write)
  ensures df$isSubtype(df$typeOf(ret), df$c$Node())
  ensures acc(p$c$Node$shared(ret), wildcard)
  ensures acc(p$c$Node$unique(ret), write)
  ensures (unfolding acc(p$c$Node$shared(ret), wildcard) in ret.bf$left) ==
    left &&
    (unfolding acc(p$c$Node$shared(ret), wildcard) in ret.bf$right) ==
    right


method f$test$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var n: Ref
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  var expr1: Ref
  var anon$4: Ref
  var expr2: Ref
  var anon$5: Ref
  var anon$6: Ref
  anon$0 := con$T$Int$NT$Node$NT$Node(df$intToRef(4), df$nullValue(), df$nullValue())
  anon$2 := con$T$Int$NT$Node$NT$Node(df$intToRef(2), df$nullValue(), df$nullValue())
  anon$3 := con$T$Int$NT$Node$NT$Node(df$intToRef(1), df$nullValue(), df$nullValue())
  anon$1 := con$T$Int$NT$Node$NT$Node(df$intToRef(3), anon$2, anon$3)
  n := con$T$Int$NT$Node$NT$Node(df$intToRef(5), anon$0, anon$1)
  inhale acc(n.bf$data, write)
  anon$4 := n.bf$data
  exhale acc(n.bf$data, write)
  inhale df$isSubtype(df$typeOf(anon$4), df$intType())
  expr1 := df$boolToRef(df$intFromRef(anon$4) == 5)
  assert df$boolFromRef(expr1)
  unfold acc(p$c$Node$shared(n), wildcard)
  anon$6 := n.bf$left
  if (anon$6 != df$nullValue()) {
    var anon$7: Ref
    inhale acc(anon$6.bf$data, write)
    anon$7 := anon$6.bf$data
    exhale acc(anon$6.bf$data, write)
    inhale df$isSubtype(df$typeOf(anon$7), df$intType())
    anon$5 := anon$7
  } else {
    anon$5 := df$nullValue()}
  expr2 := df$boolToRef(anon$5 == df$intToRef(4))
  assert df$boolFromRef(expr2)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/binary_tree.kt:(585,590): warning: Viper verification error: Assert might fail. Assertion df$boolFromRef(expr1) might not hold.
