/linked_list.kt:(249,255): info: Generated Viper text for getVal:
field bf_data: Ref

field bf_next: Ref

predicate p_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_next, wildcard) &&
  (this$dispatch.bf_next != df_nullValue() ==>
  acc(p_shared(this$dispatch.bf_next), wildcard)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_next), df_nullable(df_c_Link()))
}

predicate p_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_data, write) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_data), df_intType()) &&
  acc(this$dispatch.bf_next, wildcard) &&
  (this$dispatch.bf_next != df_nullValue() ==>
  acc(p_shared(this$dispatch.bf_next), wildcard)) &&
  (this$dispatch.bf_next != df_nullValue() ==>
  acc(p_unique(this$dispatch.bf_next), write)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_next), df_nullable(df_c_Link()))
}

method f_getVal_TF_T_Link(l: Ref) returns (ret_0: Ref)
  requires acc(p_unique(l), write)
  ensures df_isSubtype(df_typeOf(ret_0), df_nullable(df_intType()))
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(l), df_c_Link())
  inhale acc(p_shared(l), wildcard)
  unfold acc(p_shared(l), wildcard)
  anon_0 := l.bf_next
  if (anon_0 != df_nullValue()) {
    var anon_1: Ref
    inhale acc(anon_0.bf_data, write)
    anon_1 := anon_0.bf_data
    exhale acc(anon_0.bf_data, write)
    inhale df_isSubtype(df_typeOf(anon_1), df_intType())
    ret_0 := anon_1
  } else {
    ret_0 := df_nullValue()}
  goto lbl_0
  label lbl_0
}

/linked_list.kt:(430,434): info: Generated Viper text for test:
field bf_data: Ref

field bf_next: Ref

field bf_size: Ref

predicate p_c_Link_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_next, wildcard) &&
  (this$dispatch.bf_next != df_nullValue() ==>
  acc(p_c_Link_shared(this$dispatch.bf_next), wildcard)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_next), df_nullable(df_c_Link()))
}

predicate p_c_Link_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_data, write) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_data), df_intType()) &&
  acc(this$dispatch.bf_next, wildcard) &&
  (this$dispatch.bf_next != df_nullValue() ==>
  acc(p_c_Link_shared(this$dispatch.bf_next), wildcard)) &&
  (this$dispatch.bf_next != df_nullValue() ==>
  acc(p_c_Link_unique(this$dispatch.bf_next), write)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_next), df_nullable(df_c_Link()))
}

predicate p_pkg$java_io$c_Serializable_shared(this$dispatch: Ref) {
  true
}

predicate p_pkg$java_io$c_Serializable_unique(this$dispatch: Ref) {
  true
}

predicate p_pkg$kotlin$c_BooleanArray_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_size, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_size), df_intType()) &&
  acc(p_pkg$kotlin$c_Cloneable_shared(this$dispatch), wildcard) &&
  acc(p_pkg$java_io$c_Serializable_shared(this$dispatch), wildcard)
}

predicate p_pkg$kotlin$c_BooleanArray_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_size, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_size), df_intType()) &&
  acc(p_pkg$kotlin$c_Cloneable_unique(this$dispatch), write) &&
  acc(p_pkg$java_io$c_Serializable_unique(this$dispatch), write)
}

predicate p_pkg$kotlin$c_Cloneable_shared(this$dispatch: Ref) {
  true
}

predicate p_pkg$kotlin$c_Cloneable_unique(this$dispatch: Ref) {
  true
}

method con_T_Int_NT_Link(data: Ref, next: Ref) returns (ret: Ref)
  requires next != df_nullValue() ==> acc(p_c_Link_unique(next), write)
  ensures df_isSubtype(df_typeOf(ret), df_c_Link())
  ensures acc(p_c_Link_shared(ret), wildcard)
  ensures acc(p_c_Link_unique(ret), write)
  ensures (unfolding acc(p_c_Link_shared(ret), wildcard) in ret.bf_next) ==
    next


method f_test_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var l: Ref
  var anon_0: Ref
  var expr1: Ref
  var anon_1: Ref
  var expr2: Ref
  var anon_2: Ref
  var anon_3: Ref
  anon_0 := con_T_Int_NT_Link(df_intToRef(3), df_nullValue())
  l := con_T_Int_NT_Link(df_intToRef(5), anon_0)
  inhale acc(l.bf_data, write)
  anon_1 := l.bf_data
  exhale acc(l.bf_data, write)
  inhale df_isSubtype(df_typeOf(anon_1), df_intType())
  expr1 := df_boolToRef(df_intFromRef(anon_1) == 5)
  assert df_boolFromRef(expr1)
  unfold acc(p_c_Link_shared(l), wildcard)
  anon_3 := l.bf_next
  if (anon_3 != df_nullValue()) {
    var anon_4: Ref
    inhale acc(anon_3.bf_data, write)
    anon_4 := anon_3.bf_data
    exhale acc(anon_3.bf_data, write)
    inhale df_isSubtype(df_typeOf(anon_4), df_intType())
    anon_2 := anon_4
  } else {
    anon_2 := df_nullValue()}
  expr2 := df_boolToRef(anon_2 == df_intToRef(3))
  assert df_boolFromRef(expr2)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/linked_list.kt:(513,518): warning: Viper verification error: Assert might fail. Assertion df_boolFromRef(expr1) might not hold.
