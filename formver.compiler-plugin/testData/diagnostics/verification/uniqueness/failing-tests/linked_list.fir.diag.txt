/linked_list.kt:(249,255): info: Generated Viper text for getVal:
field bf$data: Ref

field bf$next: Ref

predicate p$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$next, wildcard) &&
  (this$dispatch.bf$next != df$nullValue() ==>
  acc(p$shared(this$dispatch.bf$next), wildcard)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$next), df$nullable(df$c$Link()))
}

predicate p$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$data, write) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$data), df$intType()) &&
  acc(this$dispatch.bf$next, wildcard) &&
  (this$dispatch.bf$next != df$nullValue() ==>
  acc(p$shared(this$dispatch.bf$next), wildcard)) &&
  (this$dispatch.bf$next != df$nullValue() ==>
  acc(p$unique(this$dispatch.bf$next), write)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$next), df$nullable(df$c$Link()))
}

method f$getVal$TF$T$Link(l: Ref) returns (ret$0: Ref)
  requires acc(p$unique(l), write)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$intType()))
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(l), df$c$Link())
  inhale acc(p$shared(l), wildcard)
  unfold acc(p$shared(l), wildcard)
  anon$0 := l.bf$next
  if (anon$0 != df$nullValue()) {
    var anon$1: Ref
    inhale acc(anon$0.bf$data, write)
    anon$1 := anon$0.bf$data
    exhale acc(anon$0.bf$data, write)
    inhale df$isSubtype(df$typeOf(anon$1), df$intType())
    ret$0 := anon$1
  } else {
    ret$0 := df$nullValue()}
  goto lbl$0
  label lbl$0
}

/linked_list.kt:(430,434): info: Generated Viper text for test:
field bf$data: Ref

field bf$next: Ref

field bf$size: Ref

predicate p$c$Link$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$next, wildcard) &&
  (this$dispatch.bf$next != df$nullValue() ==>
  acc(p$c$Link$shared(this$dispatch.bf$next), wildcard)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$next), df$nullable(df$c$Link()))
}

predicate p$c$Link$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$data, write) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$data), df$intType()) &&
  acc(this$dispatch.bf$next, wildcard) &&
  (this$dispatch.bf$next != df$nullValue() ==>
  acc(p$c$Link$shared(this$dispatch.bf$next), wildcard)) &&
  (this$dispatch.bf$next != df$nullValue() ==>
  acc(p$c$Link$unique(this$dispatch.bf$next), write)) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$next), df$nullable(df$c$Link()))
}

predicate p$pkg$java_io$c$Serializable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$java_io$c$Serializable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$BooleanArray$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$size), df$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin$c$BooleanArray$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$size), df$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin$c$Cloneable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$unique(this$dispatch: Ref) {
  true
}

method con$T$Int$NT$Link(data: Ref, next: Ref) returns (ret: Ref)
  requires next != df$nullValue() ==> acc(p$c$Link$unique(next), write)
  ensures df$isSubtype(df$typeOf(ret), df$c$Link())
  ensures acc(p$c$Link$shared(ret), wildcard)
  ensures acc(p$c$Link$unique(ret), write)
  ensures (unfolding acc(p$c$Link$shared(ret), wildcard) in ret.bf$next) ==
    next


method f$test$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var l: Ref
  var anon$0: Ref
  var expr1: Ref
  var anon$1: Ref
  var expr2: Ref
  var anon$2: Ref
  var anon$3: Ref
  anon$0 := con$T$Int$NT$Link(df$intToRef(3), df$nullValue())
  l := con$T$Int$NT$Link(df$intToRef(5), anon$0)
  inhale acc(l.bf$data, write)
  anon$1 := l.bf$data
  exhale acc(l.bf$data, write)
  inhale df$isSubtype(df$typeOf(anon$1), df$intType())
  expr1 := df$boolToRef(df$intFromRef(anon$1) == 5)
  assert df$boolFromRef(expr1)
  unfold acc(p$c$Link$shared(l), wildcard)
  anon$3 := l.bf$next
  if (anon$3 != df$nullValue()) {
    var anon$4: Ref
    inhale acc(anon$3.bf$data, write)
    anon$4 := anon$3.bf$data
    exhale acc(anon$3.bf$data, write)
    inhale df$isSubtype(df$typeOf(anon$4), df$intType())
    anon$2 := anon$4
  } else {
    anon$2 := df$nullValue()}
  expr2 := df$boolToRef(anon$2 == df$intToRef(3))
  assert df$boolFromRef(expr2)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/linked_list.kt:(513,518): warning: Viper verification error: Assert might fail. Assertion df$boolFromRef(expr1) might not hold.
