/backing_field_getters.kt:(270,280): info: Generated Viper text for cascadeGet:
field bf$y: Ref

field bf$z: Ref

method f$cascadeGet$TF$T$X(x: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$c$Z())
  ensures acc(p$c$Z$shared(ret$0), wildcard)
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(x), df$c$X())
  inhale acc(p$c$X$shared(x), wildcard)
  unfold acc(p$c$X$shared(x), wildcard)
  anon$0 := x.bf$y
  unfold acc(p$c$Y$shared(anon$0), wildcard)
  ret$0 := anon$0.bf$z
  goto lbl$0
  label lbl$0
}

/backing_field_getters.kt:(353,374): info: Generated Viper text for receiverNotNullProved:
field bf$y: Ref

field bf$z: Ref

method f$receiverNotNullProved$TF$NT$X(x: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
  ensures df$boolFromRef(ret$0) == true ==> x != df$nullValue()
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(x), df$nullable(df$c$X()))
  inhale x != df$nullValue() ==> acc(p$c$X$shared(x), wildcard)
  if (x != df$nullValue()) {
    var anon$1: Ref
    unfold acc(p$c$X$shared(x), wildcard)
    anon$1 := x.bf$y
    anon$0 := anon$1
  } else {
    anon$0 := df$nullValue()}
  ret$0 := sp$notBool(df$boolToRef(anon$0 == df$nullValue()))
  goto lbl$0
  label lbl$0
}

/backing_field_getters.kt:(622,640): info: Generated Viper text for cascadeNullableGet:
field bf$y: Ref

field bf$z: Ref

method f$cascadeNullableGet$TF$NT$NullableX(x: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$c$Z()))
  ensures ret$0 != df$nullValue() ==> acc(p$c$Z$shared(ret$0), wildcard)
  ensures ret$0 != df$nullValue() ==> x != df$nullValue()
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(x), df$nullable(df$c$NullableX()))
  inhale x != df$nullValue() ==> acc(p$c$NullableX$shared(x), wildcard)
  if (x != df$nullValue()) {
    unfold acc(p$c$NullableX$shared(x), wildcard)
    anon$0 := x.bf$y
  } else {
    anon$0 := df$nullValue()}
  if (anon$0 != df$nullValue()) {
    unfold acc(p$c$NullableY$shared(anon$0), wildcard)
    ret$0 := anon$0.bf$z
  } else {
    ret$0 := df$nullValue()}
  goto lbl$0
  label lbl$0
}

/backing_field_getters.kt:(791,818): info: Generated Viper text for cascadeNullableSmartcastGet:
field bf$y: Ref

field bf$z: Ref

method f$cascadeNullableSmartcastGet$TF$NT$NullableX(x: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$nullable(df$c$Z()))
  ensures ret$0 != df$nullValue() ==> acc(p$c$Z$shared(ret$0), wildcard)
  ensures ret$0 != df$nullValue() ==> x != df$nullValue()
{
  inhale df$isSubtype(df$typeOf(x), df$nullable(df$c$NullableX()))
  inhale x != df$nullValue() ==> acc(p$c$NullableX$shared(x), wildcard)
  if (x == df$nullValue()) {
    var anon$0: Ref
    anon$0 := df$nullValue()
    ret$0 := anon$0
  } else {
    var anon$1: Ref
    unfold acc(p$c$NullableX$shared(x), wildcard)
    anon$1 := x.bf$y
    if (anon$1 == df$nullValue()) {
      var anon$2: Ref
      anon$2 := df$nullValue()
      ret$0 := anon$2
    } else {
      var anon$3: Ref
      unfold acc(p$c$NullableX$shared(x), wildcard)
      anon$3 := x.bf$y
      unfold acc(p$c$NullableY$shared(anon$3), wildcard)
      ret$0 := anon$3.bf$z
    }
  }
  goto lbl$0
  label lbl$0
}

/backing_field_getters.kt:(1030,1060): info: Generated Viper text for nullableReceiverNotNullSafeGet:
field bf$size: Ref

field bf$x: Ref

method con$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Baz())
  ensures acc(p$c$Baz$shared(ret), wildcard)
  ensures acc(p$c$Baz$unique(ret), write)


method f$nullableReceiverNotNullSafeGet$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var f: Ref
  var anon$0: Ref
  var cond1: Ref
  var anon$1: Ref
  anon$0 := con$()
  f := anon$0
  if (f != df$nullValue()) {
    var anon$2: Ref
    unfold acc(p$c$Baz$shared(f), wildcard)
    anon$2 := f.bf$x
    anon$1 := anon$2
  } else {
    anon$1 := df$nullValue()}
  cond1 := sp$notBool(df$boolToRef(anon$1 == df$nullValue()))
  assert df$boolFromRef(cond1)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/backing_field_getters.kt:(1157,1184): info: Generated Viper text for nullableReceiverNullSafeGet:
field bf$size: Ref

field bf$x: Ref

method f$nullableReceiverNullSafeGet$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var f: Ref
  var cond1: Ref
  var anon$0: Ref
  f := df$nullValue()
  if (f != df$nullValue()) {
    var anon$1: Ref
    unfold acc(p$c$Baz$shared(f), wildcard)
    anon$1 := f.bf$x
    anon$0 := anon$1
  } else {
    anon$0 := df$nullValue()}
  cond1 := df$boolToRef(anon$0 == df$nullValue())
  assert df$boolFromRef(cond1)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/backing_field_getters.kt:(1315,1341): info: Generated Viper text for nonNullableReceiverSafeGet:
field bf$size: Ref

field bf$x: Ref

method con$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Baz())
  ensures acc(p$c$Baz$shared(ret), wildcard)
  ensures acc(p$c$Baz$unique(ret), write)


method f$nonNullableReceiverSafeGet$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var f: Ref
  var cond1: Ref
  var anon$0: Ref
  f := con$()
  if (f != df$nullValue()) {
    var anon$1: Ref
    unfold acc(p$c$Baz$shared(f), wildcard)
    anon$1 := f.bf$x
    anon$0 := anon$1
  } else {
    anon$0 := df$nullValue()}
  cond1 := sp$notBool(df$boolToRef(anon$0 == df$nullValue()))
  assert df$boolFromRef(cond1)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/backing_field_getters.kt:(1565,1577): info: Generated Viper text for checkPrimary:
field bf$size: Ref

field bf$x: Ref

field bf$y: Ref

field bf$z: Ref

method con$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Z())
  ensures acc(p$c$Z$shared(ret), wildcard)
  ensures acc(p$c$Z$unique(ret), write)


method con$T$Int$T$Int(p$x: Ref, p$y: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$ClassI())
  ensures acc(p$c$ClassI$shared(ret), wildcard)
  ensures acc(p$c$ClassI$unique(ret), write)
  ensures df$intFromRef((unfolding acc(p$c$ClassI$shared(ret), wildcard) in
      ret.bf$x)) ==
    df$intFromRef(p$x) &&
    df$intFromRef((unfolding acc(p$c$ClassI$shared(ret), wildcard) in
      ret.bf$y)) ==
    df$intFromRef(p$y)


method con$T$Z(p$z: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$ClassII())
  ensures acc(p$c$ClassII$shared(ret), wildcard)
  ensures acc(p$c$ClassII$unique(ret), write)
  ensures (unfolding acc(p$c$ClassII$shared(ret), wildcard) in ret.bf$z) ==
    p$z


method f$checkPrimary$TF$T$Int$T$Int(p$x: Ref, p$y: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var l0$classI: Ref
  var l0$z: Ref
  var l0$cond1: Ref
  var l0$cond2: Ref
  var anon$2: Ref
  var anon$3: Ref
  inhale df$isSubtype(df$typeOf(p$x), df$intType())
  inhale df$isSubtype(df$typeOf(p$y), df$intType())
  l0$classI := con$T$Int$T$Int(p$x, p$y)
  l0$z := con$()
  if (!(df$intFromRef(p$x) == df$intFromRef(p$y))) {
    l0$cond1 := df$boolToRef(true)
  } else {
    var anon$0: Ref
    var anon$1: Ref
    unfold acc(p$c$ClassI$shared(l0$classI), wildcard)
    anon$0 := l0$classI.bf$x
    unfold acc(p$c$ClassI$shared(l0$classI), wildcard)
    anon$1 := l0$classI.bf$y
    l0$cond1 := df$boolToRef(df$intFromRef(anon$0) == df$intFromRef(anon$1))
  }
  anon$3 := con$T$Z(l0$z)
  unfold acc(p$c$ClassII$shared(anon$3), wildcard)
  anon$2 := anon$3.bf$z
  l0$cond2 := df$boolToRef(anon$2 == l0$z)
  assert df$boolFromRef(l0$cond1)
  assert df$boolFromRef(l0$cond2)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$z(this$dispatch: Ref) returns (ret: Ref)
