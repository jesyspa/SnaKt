/multiple_interfaces.kt:(799,804): info: Generated Viper text for take1:
method f$take1$TF$T$InterfaceWithImplementation1(obj: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(obj), df$c$InterfaceWithImplementation1())
  inhale acc(p$shared(obj), wildcard)
  anon$1 := pg$field(obj)
  anon$0 := anon$1
  inhale df$isSubtype(df$typeOf(anon$0), df$intType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$field(this$dispatch: Ref) returns (ret: Ref)


/multiple_interfaces.kt:(863,868): info: Generated Viper text for take2:
method f$take2$TF$T$InterfaceWithoutImplementation2(obj: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(obj), df$c$InterfaceWithoutImplementation2())
  inhale acc(p$shared(obj), wildcard)
  anon$1 := pg$field(obj)
  anon$0 := anon$1
  inhale df$isSubtype(df$typeOf(anon$0), df$intType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$field(this$dispatch: Ref) returns (ret: Ref)


/multiple_interfaces.kt:(930,935): info: Generated Viper text for take3:
field bf$field: Ref

method f$take3$TF$T$AbstractWithFinalImplementation3(obj: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  inhale df$isSubtype(df$typeOf(obj), df$c$AbstractWithFinalImplementation3())
  inhale acc(p$shared(obj), wildcard)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/multiple_interfaces.kt:(998,1003): info: Generated Viper text for take4:
method f$take4$TF$T$AbstractWithOpenImplementation4(obj: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(obj), df$c$AbstractWithOpenImplementation4())
  inhale acc(p$shared(obj), wildcard)
  anon$1 := pg$field(obj)
  anon$0 := anon$1
  inhale df$isSubtype(df$typeOf(anon$0), df$intType())
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$field(this$dispatch: Ref) returns (ret: Ref)


/multiple_interfaces.kt:(1683,1694): info: Generated Viper text for createImpls:
field bf$field: Ref

field bf$size: Ref

method con$c$Impl12$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Impl12())
  ensures acc(p$c$Impl12$shared(ret), wildcard)
  ensures acc(p$c$Impl12$unique(ret), write)


method con$c$Impl14$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Impl14())
  ensures acc(p$c$Impl14$shared(ret), wildcard)
  ensures acc(p$c$Impl14$unique(ret), write)


method con$c$Impl23$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Impl23())
  ensures acc(p$c$Impl23$shared(ret), wildcard)
  ensures acc(p$c$Impl23$unique(ret), write)


method con$c$Impl24$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Impl24())
  ensures acc(p$c$Impl24$shared(ret), wildcard)
  ensures acc(p$c$Impl24$unique(ret), write)


method con$c$Impl3$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$Impl3())
  ensures acc(p$c$Impl3$shared(ret), wildcard)
  ensures acc(p$c$Impl3$unique(ret), write)


method f$create6$TF$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$InheritingInterfaceWithoutImplementation6())
  ensures acc(p$c$InheritingInterfaceWithoutImplementation6$shared(ret), wildcard)


method f$createImpls$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var impl12: Ref
  var start12: Ref
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var impl23: Ref
  var start23: Ref
  var anon$3: Ref
  var anon$4: Ref
  var anon$5: Ref
  var impl3: Ref
  var start3: Ref
  var anon$6: Ref
  var anon$7: Ref
  var impl24: Ref
  var start24: Ref
  var anon$8: Ref
  var anon$9: Ref
  var anon$10: Ref
  var anon$11: Ref
  var impl14: Ref
  var start14: Ref
  var anon$12: Ref
  var anon$13: Ref
  var anon$14: Ref
  var impl6: Ref
  var start6: Ref
  var anon$15: Ref
  var anon$16: Ref
  var cond1: Ref
  var anon$17: Ref
  var cond2: Ref
  var anon$18: Ref
  var cond3: Ref
  var anon$19: Ref
  var cond4: Ref
  var anon$20: Ref
  var cond5: Ref
  impl12 := con$c$Impl12$()
  unfold acc(p$c$Impl12$shared(impl12), wildcard)
  anon$0 := impl12.bf$field
  start12 := sp$minusInts(sp$plusInts(anon$0, df$intToRef(1)), df$intToRef(1))
  anon$1 := f$take1$TF$T$InterfaceWithImplementation1(impl12)
  anon$2 := f$take2$TF$T$InterfaceWithoutImplementation2(impl12)
  impl23 := con$c$Impl23$()
  unfold acc(p$c$Impl23$shared(impl23), wildcard)
  unfold acc(p$c$AbstractWithFinalImplementation3$shared(impl23), wildcard)
  anon$3 := impl23.bf$field
  start23 := sp$minusInts(sp$plusInts(anon$3, df$intToRef(1)), df$intToRef(1))
  anon$4 := f$take2$TF$T$InterfaceWithoutImplementation2(impl23)
  anon$5 := f$take3$TF$T$AbstractWithFinalImplementation3(impl23)
  impl3 := con$c$Impl3$()
  unfold acc(p$c$Impl3$shared(impl3), wildcard)
  unfold acc(p$c$AbstractWithFinalImplementation3$shared(impl3), wildcard)
  anon$6 := impl3.bf$field
  start3 := sp$minusInts(sp$plusInts(anon$6, df$intToRef(1)), df$intToRef(1))
  anon$7 := f$take3$TF$T$AbstractWithFinalImplementation3(impl3)
  impl24 := con$c$Impl24$()
  anon$9 := pg$public$field(impl24)
  anon$8 := anon$9
  inhale df$isSubtype(df$typeOf(anon$8), df$intType())
  start24 := sp$minusInts(sp$plusInts(anon$8, df$intToRef(1)), df$intToRef(1))
  anon$10 := f$take2$TF$T$InterfaceWithoutImplementation2(impl24)
  anon$11 := f$take4$TF$T$AbstractWithOpenImplementation4(impl24)
  impl14 := con$c$Impl14$()
  unfold acc(p$c$Impl14$shared(impl14), wildcard)
  anon$12 := impl14.bf$field
  start14 := sp$minusInts(sp$plusInts(anon$12, df$intToRef(1)), df$intToRef(1))
  anon$13 := f$take1$TF$T$InterfaceWithImplementation1(impl14)
  anon$14 := f$take4$TF$T$AbstractWithOpenImplementation4(impl14)
  impl6 := f$create6$TF$()
  anon$16 := pg$public$field(impl6)
  anon$15 := anon$16
  inhale df$isSubtype(df$typeOf(anon$15), df$intType())
  start6 := sp$minusInts(sp$plusInts(anon$15, df$intToRef(1)), df$intToRef(1))
  unfold acc(p$c$Impl12$shared(impl12), wildcard)
  anon$17 := impl12.bf$field
  cond1 := df$boolToRef(df$intFromRef(start12) == df$intFromRef(anon$17))
  unfold acc(p$c$Impl23$shared(impl23), wildcard)
  unfold acc(p$c$AbstractWithFinalImplementation3$shared(impl23), wildcard)
  anon$18 := impl23.bf$field
  cond2 := df$boolToRef(df$intFromRef(start23) == df$intFromRef(anon$18))
  unfold acc(p$c$Impl3$shared(impl3), wildcard)
  unfold acc(p$c$AbstractWithFinalImplementation3$shared(impl3), wildcard)
  anon$19 := impl3.bf$field
  cond3 := df$boolToRef(df$intFromRef(start3) == df$intFromRef(anon$19))
  unfold acc(p$c$Impl14$shared(impl14), wildcard)
  anon$20 := impl14.bf$field
  cond4 := df$boolToRef(df$intFromRef(start14) == df$intFromRef(anon$20))
  cond5 := df$boolToRef(df$isSubtype(df$typeOf(start6), df$intType()))
  assert df$boolFromRef(cond1)
  assert df$boolFromRef(cond2)
  assert df$boolFromRef(cond3)
  assert df$boolFromRef(cond4)
  assert df$boolFromRef(cond5)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method f$take1$TF$T$InterfaceWithImplementation1(obj: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$take2$TF$T$InterfaceWithoutImplementation2(obj: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$take3$TF$T$AbstractWithFinalImplementation3(obj: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method f$take4$TF$T$AbstractWithOpenImplementation4(obj: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$unitType())


method pg$public$field(this$dispatch: Ref) returns (ret: Ref)
