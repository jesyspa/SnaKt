/private_properties.kt:(222,237): info: Generated Viper text for getBooleanField:
method f$getBooleanField$TF$T$A(this$dispatch: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
{
  var anon$0: Ref
  inhale df$isSubtype(df$typeOf(this$dispatch), df$c$A())
  inhale acc(p$shared(this$dispatch), wildcard)
  anon$0 := pg$field(this$dispatch)
  ret$0 := anon$0
  inhale df$isSubtype(df$typeOf(ret$0), df$boolType())
  goto lbl$0
  label lbl$0
}

method pg$field(this$dispatch: Ref) returns (ret: Ref)


method ps$field(this$dispatch: Ref, anon$0: Ref) returns (ret: Ref)


/private_properties.kt:(316,330): info: Generated Viper text for getStringField:
field bf$field: Ref

method f$getStringField$TF$T$B(this$dispatch: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$stringType())
{
  inhale df$isSubtype(df$typeOf(this$dispatch), df$c$B())
  inhale acc(p$c$B$shared(this$dispatch), wildcard)
  unfold acc(p$c$B$shared(this$dispatch), wildcard)
  ret$0 := this$dispatch.bf$field
  goto lbl$0
  label lbl$0
}

method pg$field(this$dispatch: Ref) returns (ret: Ref)


method ps$field(this$dispatch: Ref, anon$0: Ref) returns (ret: Ref)


/private_properties.kt:(475,488): info: Generated Viper text for extractPublic:
field bf$c$B$private$field: Ref

field bf$field: Ref

field bf$size: Ref

method con$c$C$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$C())
  ensures acc(p$c$C$shared(ret), wildcard)
  ensures acc(p$c$C$unique(ret), write)


method con$c$D$() returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$D())
  ensures acc(p$c$D$shared(ret), wildcard)
  ensures acc(p$c$D$unique(ret), write)


method f$extractPublic$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var cond1: Ref
  var anon$0: Ref
  var anon$1: Ref
  var cond2: Ref
  var anon$2: Ref
  var anon$3: Ref
  anon$1 := con$c$C$()
  inhale acc(anon$1.bf$field, write)
  anon$0 := anon$1.bf$field
  exhale acc(anon$1.bf$field, write)
  inhale df$isSubtype(df$typeOf(anon$0), df$intType())
  cond1 := df$boolToRef(df$isSubtype(df$typeOf(anon$0), df$intType()))
  anon$3 := con$c$D$()
  unfold acc(p$c$D$shared(anon$3), wildcard)
  anon$2 := anon$3.bf$field
  cond2 := df$boolToRef(df$isSubtype(df$typeOf(anon$2), df$intType()))
  assert df$boolFromRef(cond1)
  assert df$boolFromRef(cond2)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

method pg$field(this$dispatch: Ref) returns (ret: Ref)


method ps$field(this$dispatch: Ref, anon$0: Ref) returns (ret: Ref)
