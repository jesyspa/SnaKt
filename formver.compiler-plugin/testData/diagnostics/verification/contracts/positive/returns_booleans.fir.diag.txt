/returns_booleans.kt:(121,133): info: Generated Viper text for returns_true:
method f$returns_true$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
  ensures true
  ensures df$boolFromRef(ret$0) == true
{
  ret$0 := df$boolToRef(true)
  goto lbl$0
  label lbl$0
}

/returns_booleans.kt:(268,281): info: Generated Viper text for returns_false:
method f$returns_false$TF$() returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
  ensures true
  ensures df$boolFromRef(ret$0) == false
{
  ret$0 := df$boolToRef(false)
  goto lbl$0
  label lbl$0
}

/returns_booleans.kt:(418,435): info: Generated Viper text for conditional_basic:
method f$conditional_basic$TF$T$Boolean(b: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
  ensures df$boolFromRef(ret$0) == true ==> true
  ensures df$boolFromRef(ret$0) == false ==> df$boolFromRef(b)
{
  inhale df$isSubtype(df$typeOf(b), df$boolType())
  ret$0 := df$boolToRef(true)
  goto lbl$0
  label lbl$0
}

/returns_booleans.kt:(612,636): info: Generated Viper text for binary_logic_expressions:
method f$binary_logic_expressions$TF$T$Boolean$T$Boolean(a: Ref, b: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
  ensures df$boolFromRef(ret$0) == false ==> df$boolFromRef(b) && false
  ensures df$boolFromRef(ret$0) == true ==>
    (true || df$boolFromRef(a)) && (df$boolFromRef(b) || true)
{
  inhale df$isSubtype(df$typeOf(a), df$boolType())
  inhale df$isSubtype(df$typeOf(b), df$boolType())
  ret$0 := df$boolToRef(true)
  goto lbl$0
  label lbl$0
}

/returns_booleans.kt:(855,866): info: Generated Viper text for logical_not:
method f$logical_not$TF$T$Boolean(b: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
  ensures df$boolFromRef(ret$0) == true ==>
    !df$boolFromRef(b) && df$boolFromRef(b)
  ensures df$boolFromRef(ret$0) == false ==>
    df$boolFromRef(b) || !df$boolFromRef(b)
{
  inhale df$isSubtype(df$typeOf(b), df$boolType())
  ret$0 := df$boolToRef(false)
  goto lbl$0
  label lbl$0
}

/returns_booleans.kt:(1052,1075): info: Generated Viper text for call_fun_with_contracts:
method f$binary_logic_expressions$TF$T$Boolean$T$Boolean(p$a: Ref, p$b: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$boolType())
  ensures df$boolFromRef(ret) == false ==> df$boolFromRef(p$b) && false
  ensures df$boolFromRef(ret) == true ==>
    (true || df$boolFromRef(p$a)) && (df$boolFromRef(p$b) || true)


method f$call_fun_with_contracts$TF$T$Boolean(p$b: Ref)
  returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
  ensures df$boolFromRef(ret$0) == true
{
  var l0$a: Ref
  inhale df$isSubtype(df$typeOf(p$b), df$boolType())
  l0$a := f$binary_logic_expressions$TF$T$Boolean$T$Boolean(p$b, p$b)
  ret$0 := l0$a
  goto lbl$0
  label lbl$0
}

/returns_booleans.kt:(1268,1281): info: Generated Viper text for isNullOrEmpty:
field sp$size: Ref

method f$isEmpty$TF$T$Collection(this$dispatch: Ref) returns (ret: Ref)
  requires acc(this$dispatch.sp$size, write)
  requires df$intFromRef(this$dispatch.sp$size) >= 0
  ensures acc(this$dispatch.sp$size, write)
  ensures df$intFromRef(this$dispatch.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret), df$boolType())
  ensures df$intFromRef(this$dispatch.sp$size) ==
    old(df$intFromRef(this$dispatch.sp$size))
  ensures df$boolFromRef(ret) ==> df$intFromRef(this$dispatch.sp$size) == 0
  ensures !df$boolFromRef(ret) ==> df$intFromRef(this$dispatch.sp$size) > 0


method f$isNullOrEmpty$TF$NT$Collection(this$extension: Ref)
  returns (ret$0: Ref)
  requires this$extension != df$nullValue() ==>
    acc(this$extension.sp$size, write)
  requires this$extension != df$nullValue() ==>
    df$intFromRef(this$extension.sp$size) >= 0
  ensures this$extension != df$nullValue() ==>
    acc(this$extension.sp$size, write)
  ensures this$extension != df$nullValue() ==>
    df$intFromRef(this$extension.sp$size) >= 0
  ensures df$isSubtype(df$typeOf(ret$0), df$boolType())
  ensures df$boolFromRef(ret$0) == false ==>
    this$extension != df$nullValue()
{
  inhale df$isSubtype(df$typeOf(this$extension), df$nullable(df$c$pkg$kotlin_collections$Collection()))
  inhale this$extension != df$nullValue() ==>
    acc(p$pkg$kotlin_collections$c$Collection$shared(this$extension), wildcard)
  if (this$extension == df$nullValue()) {
    ret$0 := df$boolToRef(true)
  } else {
    ret$0 := f$isEmpty$TF$T$Collection(this$extension)}
  goto lbl$0
  label lbl$0
}
