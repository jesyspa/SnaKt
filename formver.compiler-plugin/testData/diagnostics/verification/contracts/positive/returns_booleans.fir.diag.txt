/returns_booleans.kt:(121,133): info: Generated Viper text for returns_true:
method f_returns_true_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
  ensures true
  ensures df_boolFromRef(ret_0) == true
{
  ret_0 := df_boolToRef(true)
  goto lbl_0
  label lbl_0
}

/returns_booleans.kt:(268,281): info: Generated Viper text for returns_false:
method f_returns_false_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
  ensures true
  ensures df_boolFromRef(ret_0) == false
{
  ret_0 := df_boolToRef(false)
  goto lbl_0
  label lbl_0
}

/returns_booleans.kt:(418,435): info: Generated Viper text for conditional_basic:
method f_conditional_basic_TF_T_Boolean(b: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
  ensures df_boolFromRef(ret_0) == true ==> true
  ensures df_boolFromRef(ret_0) == false ==> df_boolFromRef(b)
{
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  ret_0 := df_boolToRef(true)
  goto lbl_0
  label lbl_0
}

/returns_booleans.kt:(612,636): info: Generated Viper text for binary_logic_expressions:
method f_binary_logic_expressions_TF_T_Boolean_T_Boolean(a: Ref, b: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
  ensures df_boolFromRef(ret_0) == false ==> df_boolFromRef(b) && false
  ensures df_boolFromRef(ret_0) == true ==>
    (true || df_boolFromRef(a)) && (df_boolFromRef(b) || true)
{
  inhale df_isSubtype(df_typeOf(a), df_boolType())
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  ret_0 := df_boolToRef(true)
  goto lbl_0
  label lbl_0
}

/returns_booleans.kt:(855,866): info: Generated Viper text for logical_not:
method f_logical_not_TF_T_Boolean(b: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
  ensures df_boolFromRef(ret_0) == true ==>
    !df_boolFromRef(b) && df_boolFromRef(b)
  ensures df_boolFromRef(ret_0) == false ==>
    df_boolFromRef(b) || !df_boolFromRef(b)
{
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  ret_0 := df_boolToRef(false)
  goto lbl_0
  label lbl_0
}

/returns_booleans.kt:(1052,1075): info: Generated Viper text for call_fun_with_contracts:
method f_binary_logic_expressions_TF_T_Boolean_T_Boolean(p_a: Ref, p_b: Ref)
  returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_boolType())
  ensures df_boolFromRef(ret) == false ==> df_boolFromRef(p_b) && false
  ensures df_boolFromRef(ret) == true ==>
    (true || df_boolFromRef(p_a)) && (df_boolFromRef(p_b) || true)


method f_call_fun_with_contracts_TF_T_Boolean(p_b: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
  ensures df_boolFromRef(ret_0) == true
{
  var l0_a: Ref
  inhale df_isSubtype(df_typeOf(p_b), df_boolType())
  l0_a := f_binary_logic_expressions_TF_T_Boolean_T_Boolean(p_b, p_b)
  ret_0 := l0_a
  goto lbl_0
  label lbl_0
}

/returns_booleans.kt:(1268,1281): info: Generated Viper text for isNullOrEmpty:
field sp_size: Ref

method f_isEmpty_TF_T_Collection(this$dispatch: Ref) returns (ret: Ref)
  requires acc(this$dispatch.sp_size, write)
  requires df_intFromRef(this$dispatch.sp_size) >= 0
  ensures acc(this$dispatch.sp_size, write)
  ensures df_intFromRef(this$dispatch.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret), df_boolType())
  ensures df_intFromRef(this$dispatch.sp_size) ==
    old(df_intFromRef(this$dispatch.sp_size))
  ensures df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) == 0
  ensures !df_boolFromRef(ret) ==> df_intFromRef(this$dispatch.sp_size) > 0


method f_isNullOrEmpty_TF_NT_Collection(this$extension: Ref)
  returns (ret_0: Ref)
  requires this$extension != df_nullValue() ==>
    acc(this$extension.sp_size, write)
  requires this$extension != df_nullValue() ==>
    df_intFromRef(this$extension.sp_size) >= 0
  ensures this$extension != df_nullValue() ==>
    acc(this$extension.sp_size, write)
  ensures this$extension != df_nullValue() ==>
    df_intFromRef(this$extension.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
  ensures df_boolFromRef(ret_0) == false ==>
    this$extension != df_nullValue()
{
  inhale df_isSubtype(df_typeOf(this$extension), df_nullable(df_c_pkg$kotlin_collections_Collection()))
  inhale this$extension != df_nullValue() ==>
    acc(p_pkg$kotlin_collections$c_Collection_shared(this$extension), wildcard)
  if (this$extension == df_nullValue()) {
    ret_0 := df_boolToRef(true)
  } else {
    ret_0 := f_isEmpty_TF_T_Collection(this$extension)}
  goto lbl_0
  label lbl_0
}
