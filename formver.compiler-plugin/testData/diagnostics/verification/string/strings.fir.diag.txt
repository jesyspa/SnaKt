/strings.kt:(237,245): info: Generated Viper text for testType:
field bf$size: Ref

field bf$str: Ref

predicate p$c$StringBox$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$str, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$str), df$stringType())
}

predicate p$c$StringBox$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$str, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$str), df$stringType())
}

predicate p$pkg$java_io$c$Serializable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$java_io$c$Serializable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$BooleanArray$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$size), df$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin$c$BooleanArray$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$size), df$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin$c$Cloneable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$unique(this$dispatch: Ref) {
  true
}

method con$T$String(str: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$StringBox())
  ensures acc(p$c$StringBox$shared(ret), wildcard)
  ensures acc(p$c$StringBox$unique(ret), write)
  ensures df$stringFromRef((unfolding acc(p$c$StringBox$shared(ret), wildcard) in
      ret.bf$str)) ==
    df$stringFromRef(str)


method f$testType$TF$T$String(s: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var cond1: Ref
  var anon$0: Ref
  var anon$1: Ref
  var cond2: Ref
  var anon$2: Ref
  var anon$3: Ref
  inhale df$isSubtype(df$typeOf(s), df$stringType())
  anon$1 := con$T$String(s)
  unfold acc(p$c$StringBox$shared(anon$1), wildcard)
  anon$0 := anon$1.bf$str
  cond1 := df$boolToRef(df$stringFromRef(anon$0) == df$stringFromRef(s))
  anon$3 := con$T$String(df$stringToRef(Seq(115, 116, 114)))
  unfold acc(p$c$StringBox$shared(anon$3), wildcard)
  anon$2 := anon$3.bf$str
  cond2 := df$boolToRef(df$stringFromRef(anon$2) == Seq(115, 116, 114))
  assert df$boolFromRef(cond1)
  assert df$boolFromRef(cond2)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/strings.kt:(412,427): info: Generated Viper text for testLengthField:
field bf$size: Ref

field bf$str: Ref

predicate p$c$StringBox$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$str, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$str), df$stringType())
}

predicate p$c$StringBox$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$str, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$str), df$stringType())
}

predicate p$pkg$java_io$c$Serializable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$java_io$c$Serializable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$BooleanArray$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$size), df$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin$c$BooleanArray$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$size), df$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin$c$Cloneable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$unique(this$dispatch: Ref) {
  true
}

method con$T$String(str: Ref) returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$c$StringBox())
  ensures acc(p$c$StringBox$shared(ret), wildcard)
  ensures acc(p$c$StringBox$unique(ret), write)
  ensures df$stringFromRef((unfolding acc(p$c$StringBox$shared(ret), wildcard) in
      ret.bf$str)) ==
    df$stringFromRef(str)


method f$testLengthField$TF$T$String(s: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var len: Ref
  var cond1: Ref
  var anon$0: Ref
  var anon$1: Ref
  inhale df$isSubtype(df$typeOf(s), df$stringType())
  len := sp$stringLength(s)
  anon$1 := con$T$String(df$stringToRef(Seq(115, 116, 114)))
  unfold acc(p$c$StringBox$shared(anon$1), wildcard)
  anon$0 := anon$1.bf$str
  cond1 := df$boolToRef(|df$stringFromRef(anon$0)| == 3)
  assert df$boolFromRef(cond1)
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}

/strings.kt:(552,559): info: Generated Viper text for testOps:
field bf$size: Ref

predicate p$pkg$java_io$c$Serializable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$java_io$c$Serializable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$BooleanArray$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$size), df$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin$c$BooleanArray$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$isSubtype(df$typeOf(this$dispatch.bf$size), df$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin$c$Cloneable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$unique(this$dispatch: Ref) {
  true
}

method f$plus$TF$T$String$NT$Any(this$dispatch: Ref, other: Ref)
  returns (ret: Ref)
  ensures df$isSubtype(df$typeOf(ret), df$stringType())


method f$testOps$TF$T$String(s: Ref) returns (ret$0: Ref)
  ensures df$isSubtype(df$typeOf(ret$0), df$unitType())
{
  var c: Ref
  var anon$0: Ref
  var str: Ref
  var helloWorld: Ref
  var stringPlusInteger: Ref
  inhale df$isSubtype(df$typeOf(s), df$stringType())
  if (|df$stringFromRef(s)| > 0) {
    c := sp$stringGet(s, df$intToRef(0))
  } else {
    c := df$charToRef(97)}
  if (df$charFromRef(c) == 97) {
    anon$0 := df$boolToRef(true)
  } else {
    anon$0 := sp$gtInts(sp$stringLength(s), df$intToRef(0))}
  assert df$boolFromRef(anon$0)
  str := df$stringToRef(Seq(97, 98, 97))
  assert df$stringFromRef(str)[0] == df$stringFromRef(str)[2]
  assert !(df$stringFromRef(str)[1] == df$stringFromRef(str)[0])
  assert df$stringFromRef(str)[1] == 98
  assert Seq(75, 111, 116, 108, 105, 110, 46, 83, 116, 114, 105, 110, 103) ==
    Seq(75, 111, 116, 108, 105, 110, 46, 83, 116, 114, 105, 110, 103)
  helloWorld := sp$addStringChar(df$stringToRef(Seq(72, 101, 108, 108, 111,
    32, 87, 111, 114, 108, 100)), df$charToRef(33))
  assert df$stringFromRef(helloWorld) ==
    Seq(72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33)
  stringPlusInteger := f$plus$TF$T$String$NT$Any(df$stringToRef(Seq(52, 50)),
    df$intToRef(42))
  label lbl$0
  inhale df$isSubtype(df$typeOf(ret$0), df$unitType())
}
