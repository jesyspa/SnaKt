/stdlib_replacement_tests.kt:(104,113): info: Generated Viper text for useChecks:
method f_useChecks_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var ret_1: Ref
  var anon_0: Ref
  var ret_2: Ref
  var anon_1: Ref
  anon_0 := df_boolToRef(true)
  label lbl_1
  inhale df_isSubtype(df_typeOf(ret_1), df_unitType())
  anon_1 := df_boolToRef(true)
  label lbl_2
  inhale df_isSubtype(df_typeOf(ret_2), df_unitType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/stdlib_replacement_tests.kt:(298,305): info: Generated Viper text for useRuns:
field bf_size: Ref

method f_useRuns_TF_T_Int(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var cond1: Ref
  var anon_2: Ref
  var anon_3: Ref
  var ret_1: Ref
  var anon_4: Ref
  var ret_2: Ref
  var cond2: Ref
  var anon_5: Ref
  var anon_6: Ref
  var ret_3: Ref
  var anon_0: Ref
  var anon_7: Ref
  var ret_4: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(x), df_intType())
  ret_2 := sp_plusInts(x, df_intToRef(1))
  goto lbl_2
  label lbl_2
  anon_4 := ret_2
  ret_1 := anon_4
  inhale df_isSubtype(df_typeOf(ret_1), df_nullable(df_anyType()))
  goto lbl_1
  label lbl_1
  anon_3 := ret_1
  anon_2 := anon_3
  inhale df_isSubtype(df_typeOf(anon_2), df_intType())
  cond1 := df_boolToRef(df_intFromRef(anon_2) == 1 + df_intFromRef(x))
  inhale df_isSubtype(df_typeOf(x), df_nullable(df_anyType()))
  anon_0 := x
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  anon_1 := anon_0
  ret_4 := sp_plusInts(anon_1, df_intToRef(1))
  goto lbl_4
  label lbl_4
  anon_7 := ret_4
  ret_3 := anon_7
  inhale df_isSubtype(df_typeOf(ret_3), df_nullable(df_anyType()))
  goto lbl_3
  label lbl_3
  anon_6 := ret_3
  anon_5 := anon_6
  inhale df_isSubtype(df_typeOf(anon_5), df_intType())
  cond2 := df_boolToRef(df_intFromRef(anon_5) == 1 + df_intFromRef(x))
  assert df_boolFromRef(cond1)
  assert df_boolFromRef(cond2)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/stdlib_replacement_tests.kt:(459,466): info: Generated Viper text for useAlso:
field bf_size: Ref

method f_useAlso_TF_T_Int(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_2: Ref
  var anon_3: Ref
  var ret_1: Ref
  var anon_0: Ref
  var ret_2: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(x), df_intType())
  anon_0 := sp_plusInts(x, df_intToRef(1))
  inhale df_isSubtype(df_typeOf(anon_0), df_nullable(df_anyType()))
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  anon_1 := anon_0
  assert df_intFromRef(anon_1) == 1 + df_intFromRef(x)
  label lbl_2
  inhale df_isSubtype(df_typeOf(ret_2), df_unitType())
  ret_1 := anon_0
  goto lbl_1
  label lbl_1
  anon_3 := ret_1
  anon_2 := anon_3
  inhale df_isSubtype(df_typeOf(anon_2), df_intType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/stdlib_replacement_tests.kt:(531,537): info: Generated Viper text for useLet:
field bf_size: Ref

method f_useLet_TF_T_Int(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var cond1: Ref
  var anon_2: Ref
  var anon_3: Ref
  var ret_1: Ref
  var anon_0: Ref
  var anon_4: Ref
  var ret_2: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(x), df_intType())
  inhale df_isSubtype(df_typeOf(x), df_nullable(df_anyType()))
  anon_0 := x
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  anon_1 := anon_0
  ret_2 := sp_plusInts(anon_1, df_intToRef(1))
  goto lbl_2
  label lbl_2
  anon_4 := ret_2
  ret_1 := anon_4
  inhale df_isSubtype(df_typeOf(ret_1), df_nullable(df_anyType()))
  goto lbl_1
  label lbl_1
  anon_3 := ret_1
  anon_2 := anon_3
  inhale df_isSubtype(df_typeOf(anon_2), df_intType())
  cond1 := df_boolToRef(df_intFromRef(anon_2) == 1 + df_intFromRef(x))
  assert df_boolFromRef(cond1)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/stdlib_replacement_tests.kt:(621,628): info: Generated Viper text for useWith:
field bf_size: Ref

method f_useWith_TF_T_Int(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_2: Ref
  var anon_3: Ref
  var ret_1: Ref
  var anon_0: Ref
  var anon_4: Ref
  var ret_2: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(x), df_intType())
  anon_0 := sp_plusInts(x, df_intToRef(1))
  inhale df_isSubtype(df_typeOf(anon_0), df_nullable(df_anyType()))
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  anon_1 := anon_0
  assert df_intFromRef(anon_1) == 1 + df_intFromRef(x)
  label lbl_2
  inhale df_isSubtype(df_typeOf(ret_2), df_unitType())
  anon_4 := ret_2
  ret_1 := anon_4
  inhale df_isSubtype(df_typeOf(ret_1), df_nullable(df_anyType()))
  goto lbl_1
  label lbl_1
  anon_3 := ret_1
  anon_2 := anon_3
  inhale df_isSubtype(df_typeOf(anon_2), df_unitType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/stdlib_replacement_tests.kt:(694,702): info: Generated Viper text for useApply:
field bf_size: Ref

method f_useApply_TF_T_Int(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_2: Ref
  var anon_3: Ref
  var ret_1: Ref
  var anon_0: Ref
  var ret_2: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(x), df_intType())
  anon_0 := sp_plusInts(x, df_intToRef(1))
  inhale df_isSubtype(df_typeOf(anon_0), df_nullable(df_anyType()))
  inhale df_isSubtype(df_typeOf(anon_0), df_intType())
  anon_1 := anon_0
  assert df_intFromRef(anon_1) == 1 + df_intFromRef(x)
  label lbl_2
  inhale df_isSubtype(df_typeOf(ret_2), df_unitType())
  ret_1 := anon_0
  goto lbl_1
  label lbl_1
  anon_3 := ret_1
  anon_2 := anon_3
  inhale df_isSubtype(df_typeOf(anon_2), df_intType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
