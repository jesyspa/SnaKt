/try_catch.kt:(158,166): info: Generated Viper text for tryCatch:
method f_call_TF_T_Int(x: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_unitType())


method f_tryCatch_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  var anon_1: Ref
  var anon_2: Ref
  var anon_3: Ref
  var e: Ref
  var anon_4: Ref
  if (df_boolFromRef(anon_0)) {
    goto lbl_catch_0
  }
  anon_1 := f_call_TF_T_Int(df_intToRef(0))
  anon_2 := f_call_TF_T_Int(df_intToRef(1))
  if (df_boolFromRef(anon_3)) {
    goto lbl_catch_0
  }
  goto lbl_try_exit_0
  label lbl_catch_0
  anon_4 := f_call_TF_T_Int(df_intToRef(2))
  goto lbl_try_exit_0
  label lbl_try_exit_0
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_cause(this$dispatch: Ref) returns (ret: Ref)


method pg_message(this$dispatch: Ref) returns (ret: Ref)


/try_catch.kt:(271,285): info: Generated Viper text for nestedTryCatch:
method f_call_TF_T_Int(p_x: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_unitType())


method f_nestedTryCatch_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  var anon_1: Ref
  var anon_2: Ref
  var anon_3: Ref
  var anon_4: Ref
  var l3_e: Ref
  var anon_5: Ref
  var anon_6: Ref
  var l4_e: Ref
  if (df_boolFromRef(anon_0)) {
    goto lbl_catch_0
  }
  anon_1 := f_call_TF_T_Int(df_intToRef(0))
  if (df_boolFromRef(anon_2)) {
    goto lbl_catch_1
  }
  anon_3 := f_call_TF_T_Int(df_intToRef(1))
  if (df_boolFromRef(anon_4)) {
    goto lbl_catch_1
  }
  goto lbl_try_exit_1
  label lbl_catch_1
  anon_5 := f_call_TF_T_Int(df_intToRef(2))
  goto lbl_try_exit_1
  label lbl_try_exit_1
  if (df_boolFromRef(anon_6)) {
    goto lbl_catch_0
  }
  goto lbl_try_exit_0
  label lbl_catch_0
  goto lbl_try_exit_0
  label lbl_try_exit_0
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_cause(this$dispatch: Ref) returns (ret: Ref)


method pg_message(this$dispatch: Ref) returns (ret: Ref)


/try_catch.kt:(574,592): info: Generated Viper text for tryCatchWithInline:
method f_call_TF_T_Int(x: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_unitType())


method f_tryCatchWithInline_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  var ret_1: Ref
  var anon_1: Ref
  var anon_2: Ref
  var anon_3: Ref
  var e: Ref
  var anon_4: Ref
  if (df_boolFromRef(anon_0)) {
    goto lbl_catch_0
  }
  anon_1 := f_call_TF_T_Int(df_intToRef(0))
  anon_2 := f_call_TF_T_Int(df_intToRef(1))
  label lbl_ret_1
  inhale df_isSubtype(df_typeOf(ret_1), df_unitType())
  if (df_boolFromRef(anon_3)) {
    goto lbl_catch_0
  }
  goto lbl_try_exit_0
  label lbl_catch_0
  anon_4 := f_call_TF_T_Int(df_intToRef(2))
  goto lbl_try_exit_0
  label lbl_try_exit_0
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_cause(this$dispatch: Ref) returns (ret: Ref)


method pg_message(this$dispatch: Ref) returns (ret: Ref)


/try_catch.kt:(685,702): info: Generated Viper text for tryCatchShadowing:
method f_tryCatchShadowing_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var l0_x: Ref
  var anon_0: Ref
  var l1_x: Ref
  var anon_1: Ref
  var l2_e: Ref
  var l2_x: Ref
  l0_x := df_intToRef(0)
  if (df_boolFromRef(anon_0)) {
    goto lbl_catch_0
  }
  l1_x := df_intToRef(1)
  if (df_boolFromRef(anon_1)) {
    goto lbl_catch_0
  }
  goto lbl_try_exit_0
  label lbl_catch_0
  l2_x := df_intToRef(2)
  goto lbl_try_exit_0
  label lbl_try_exit_0
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_cause(this$dispatch: Ref) returns (ret: Ref)


method pg_message(this$dispatch: Ref) returns (ret: Ref)


/try_catch.kt:(813,828): info: Generated Viper text for multipleCatches:
method f_call_TF_T_Int(p_x: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_unitType())


method f_multipleCatches_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  var anon_1: Ref
  var anon_2: Ref
  var anon_3: Ref
  var anon_4: Ref
  var anon_5: Ref
  var l2_e: Ref
  var anon_6: Ref
  var l3_e: Ref
  var anon_7: Ref
  if (df_boolFromRef(anon_0)) {
    goto lbl_catch_0
  }
  if (df_boolFromRef(anon_1)) {
    goto lbl_catch_1
  }
  anon_2 := f_call_TF_T_Int(df_intToRef(0))
  anon_3 := f_call_TF_T_Int(df_intToRef(1))
  if (df_boolFromRef(anon_4)) {
    goto lbl_catch_0
  }
  if (df_boolFromRef(anon_5)) {
    goto lbl_catch_1
  }
  goto lbl_try_exit_0
  label lbl_catch_0
  anon_6 := f_call_TF_T_Int(df_intToRef(2))
  goto lbl_try_exit_0
  label lbl_catch_1
  anon_7 := f_call_TF_T_Int(df_intToRef(3))
  goto lbl_try_exit_0
  label lbl_try_exit_0
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_cause(this$dispatch: Ref) returns (ret: Ref)


method pg_message(this$dispatch: Ref) returns (ret: Ref)


/try_catch.kt:(1044,1056): info: Generated Viper text for useException:
method f_call_TF_T_Int(p_x: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_unitType())


method f_ignore_TF_T_Exception(p_e: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_unitType())


method f_useException_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  var anon_1: Ref
  var anon_2: Ref
  var l2_e: Ref
  var anon_3: Ref
  if (df_boolFromRef(anon_0)) {
    goto lbl_catch_0
  }
  anon_1 := f_call_TF_T_Int(df_intToRef(0))
  if (df_boolFromRef(anon_2)) {
    goto lbl_catch_0
  }
  goto lbl_try_exit_0
  label lbl_catch_0
  anon_3 := f_ignore_TF_T_Exception(l2_e)
  goto lbl_try_exit_0
  label lbl_try_exit_0
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method pg_cause(this$dispatch: Ref) returns (ret: Ref)


method pg_message(this$dispatch: Ref) returns (ret: Ref)
