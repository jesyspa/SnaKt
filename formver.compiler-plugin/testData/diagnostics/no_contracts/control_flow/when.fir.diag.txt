/when.kt:(23,33): info: Generated Viper text for returnWhen:
method f_returnWhen_TF_T_Boolean$T_Boolean$T_Boolean(a: Ref, b: Ref, c: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  inhale df_isSubtype(df_typeOf(a), df_boolType())
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  inhale df_isSubtype(df_typeOf(c), df_boolType())
  if (df_boolFromRef(a)) {
    ret_0 := df_intToRef(0)
  } elseif (df_boolFromRef(b)) {
    ret_0 := df_intToRef(1)
  } elseif (df_boolFromRef(c)) {
    ret_0 := df_intToRef(2)
  } else {
    ret_0 := df_intToRef(3)}
  goto lbl_0
  label lbl_0
}

/when.kt:(171,181): info: Generated Viper text for whenReturn:
method f_whenReturn_TF_T_Boolean$T_Boolean$T_Boolean(a: Ref, b: Ref, c: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  inhale df_isSubtype(df_typeOf(a), df_boolType())
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  inhale df_isSubtype(df_typeOf(c), df_boolType())
  if (df_boolFromRef(a)) {
    ret_0 := df_intToRef(0)
    goto lbl_0
  } elseif (df_boolFromRef(b)) {
    ret_0 := df_intToRef(1)
    goto lbl_0
  } elseif (df_boolFromRef(c)) {
    ret_0 := df_intToRef(2)
    goto lbl_0
  } else {
    ret_0 := df_intToRef(3)
    goto lbl_0
  }
  label lbl_0
}

/when.kt:(340,356): info: Generated Viper text for singleBranchWhen:
method f_singleBranchWhen_TF_T_Boolean(a: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var x: Ref
  inhale df_isSubtype(df_typeOf(a), df_boolType())
  x := df_intToRef(1)
  if (df_boolFromRef(a)) {
    x := df_intToRef(2)
  }
  ret_0 := x
  goto lbl_0
  label lbl_0
}

/when.kt:(446,456): info: Generated Viper text for noElseWhen:
method f_noElseWhen_TF_T_Boolean$T_Boolean$T_Boolean(a: Ref, b: Ref, c: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var y: Ref
  inhale df_isSubtype(df_typeOf(a), df_boolType())
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  inhale df_isSubtype(df_typeOf(c), df_boolType())
  y := df_intToRef(0)
  if (df_boolFromRef(a)) {
    y := df_intToRef(1)
  } elseif (df_boolFromRef(b)) {
    y := df_intToRef(2)
  } elseif (df_boolFromRef(c)) {
    y := df_intToRef(3)
  }
  ret_0 := y
  goto lbl_0
  label lbl_0
}

/when.kt:(608,626): info: Generated Viper text for whenWithSubjectVar:
method f_whenWithSubjectVar_TF_T_Int(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(x), df_intType())
  anon_0 := x
  if (df_intFromRef(anon_0) == 1) {
    ret_0 := df_intToRef(2)
  } elseif (df_intFromRef(anon_0) == 2) {
    ret_0 := df_intToRef(3)
  } else {
    ret_0 := df_intToRef(42)}
  goto lbl_0
  label lbl_0
}

/when.kt:(726,745): info: Generated Viper text for whenWithSubjectCall:
method f_whenWithSubjectCall_TF_T_Int(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(x), df_intType())
  anon_0 := f_whenWithSubjectVar_TF_T_Int(x)
  if (df_intFromRef(anon_0) == 1) {
    ret_0 := df_intToRef(2)
  } elseif (df_intFromRef(anon_0) == 2) {
    ret_0 := df_intToRef(3)
  } else {
    var anon_1: Ref
    anon_1 := f_whenWithSubjectVar_TF_T_Int(df_intToRef(0))
    if (df_intFromRef(anon_1) == 3) {
      ret_0 := df_intToRef(4)
    } elseif (df_intFromRef(anon_1) == 4) {
      ret_0 := df_intToRef(5)
    } else {
      ret_0 := df_intToRef(42)}
  }
  goto lbl_0
  label lbl_0
}

method f_whenWithSubjectVar_TF_T_Int(x: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_intType())


/when.kt:(963,972): info: Generated Viper text for emptyWhen:
method f_emptyWhen_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  ret_0 := df_intToRef(1)
  goto lbl_0
  label lbl_0
}

/when.kt:(1015,1027): info: Generated Viper text for unusedResult:
method f_unusedResult_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var x: Ref
  x := df_intToRef(0)
  ret_0 := x
  goto lbl_0
  label lbl_0
}

/when.kt:(1221,1227): info: Generated Viper text for whenIs:
method f_whenIs_TF_T_Foo(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(x), df_c_Foo())
  inhale acc(p_c_Foo_shared(x), wildcard)
  anon_0 := x
  if (df_isSubtype(df_typeOf(anon_0), df_c_Bar())) {
    ret_0 := df_boolToRef(true)
  } else {
    ret_0 := df_boolToRef(false)}
  goto lbl_0
  label lbl_0
}

/when.kt:(1301,1315): info: Generated Viper text for whenSubjectVal:
method f_whenSubjectVal_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var x: Ref
  x := df_intToRef(0)
  if (df_intFromRef(x) == 1) {
    ret_0 := df_intToRef(1)
  } else {
    ret_0 := x}
  goto lbl_0
  label lbl_0
}

/when.kt:(1392,1412): info: Generated Viper text for whenSubjectValNested:
method f_whenSubjectValNested_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var x: Ref
  x := df_intToRef(1)
  if (df_intFromRef(x) == 0) {
  } else {
    var anon_0: Ref
    var y: Ref
    y := df_intToRef(1)
    if (df_intFromRef(y) == 1) {
      anon_0 := df_intToRef(1)
    } else {
      var z: Ref
      z := df_intToRef(1)
      if (df_intFromRef(z) == df_intFromRef(y)) {
        anon_0 := df_intToRef(2)
      } elseif (df_intFromRef(z) == df_intFromRef(x) + 1) {
        anon_0 := df_intToRef(3)
      } else {
        anon_0 := df_intToRef(4)}
    }
    if (df_intFromRef(x) == df_intFromRef(anon_0)) {
    }
  }
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/when.kt:(1674,1697): info: Generated Viper text for whenSubjectVarShadowing:
method f_whenSubjectVarShadowing_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var l0_x: Ref
  var l1_x: Ref
  l0_x := df_intToRef(0)
  l1_x := df_intToRef(1)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
