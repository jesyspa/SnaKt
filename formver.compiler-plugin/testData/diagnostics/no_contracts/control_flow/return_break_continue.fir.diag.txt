/return_break_continue.kt:(23,33): info: Generated Viper text for testReturn:
method f_testReturn_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  ret_0 := df_intToRef(0)
  goto lbl_0
  ret_0 := df_intToRef(1)
  goto lbl_0
  label lbl_0
}

/return_break_continue.kt:(76,90): info: Generated Viper text for returnFromLoop:
method f_returnFromLoop_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var anon_0: Ref
  label lbl_continue_0
  anon_0 := df_boolToRef(true)
  if (df_boolFromRef(anon_0)) {
    ret_0 := df_intToRef(0)
    goto lbl_ret_0
    goto lbl_continue_0
  }
  label lbl_break_0
  ret_0 := df_intToRef(1)
  goto lbl_ret_0
  label lbl_ret_0
}

/return_break_continue.kt:(162,172): info: Generated Viper text for whileBreak:
method f_whileBreak_TF_T_Boolean(b: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var i: Ref
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  i := df_intToRef(0)
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(i), df_intType())
    invariant df_isSubtype(df_typeOf(b), df_boolType())
  anon_0 := b
  if (df_boolFromRef(anon_0)) {
    i := df_intToRef(1)
    goto lbl_break_0
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(i), df_intType())
  assert df_isSubtype(df_typeOf(b), df_boolType())
  ret_0 := i
  goto lbl_ret_0
  label lbl_ret_0
}

/return_break_continue.kt:(276,289): info: Generated Viper text for whileContinue:
method f_whileContinue_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var b: Ref
  var anon_0: Ref
  b := df_boolToRef(true)
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(b), df_boolType())
  anon_0 := b
  if (df_boolFromRef(anon_0)) {
    b := df_boolToRef(false)
    goto lbl_continue_0
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(b), df_boolType())
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/return_break_continue.kt:(375,386): info: Generated Viper text for whileNested:
method f_whileNested_TF_T_Boolean(b: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(b), df_boolType())
  anon_0 := b
  if (df_boolFromRef(anon_0)) {
    var anon_1: Ref
    var anon_2: Ref
    label lbl_continue_1
      invariant df_isSubtype(df_typeOf(b), df_boolType())
    anon_1 := b
    if (df_boolFromRef(anon_1)) {
      goto lbl_break_1
      goto lbl_continue_1
    }
    label lbl_break_1
    assert df_isSubtype(df_typeOf(b), df_boolType())
    goto lbl_continue_0
    label lbl_continue_2
      invariant df_isSubtype(df_typeOf(b), df_boolType())
    anon_2 := b
    if (df_boolFromRef(anon_2)) {
      goto lbl_continue_2
      goto lbl_continue_2
    }
    label lbl_break_2
    assert df_isSubtype(df_typeOf(b), df_boolType())
    goto lbl_break_0
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(b), df_boolType())
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/return_break_continue.kt:(556,569): info: Generated Viper text for labelledBreak:
method f_labelledBreak_TF_T_Boolean(b: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(b), df_boolType())
  anon_0 := b
  if (df_boolFromRef(anon_0)) {
    var anon_1: Ref
    label lbl_continue_1
      invariant df_isSubtype(df_typeOf(b), df_boolType())
    anon_1 := b
    if (df_boolFromRef(anon_1)) {
      goto lbl_break_0
      goto lbl_break_1
      goto lbl_break_1
      goto lbl_continue_1
    }
    label lbl_break_1
    assert df_isSubtype(df_typeOf(b), df_boolType())
    goto lbl_break_0
    goto lbl_break_0
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(b), df_boolType())
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/return_break_continue.kt:(754,770): info: Generated Viper text for labelledContinue:
method f_labelledContinue_TF_T_Boolean(b: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(b), df_boolType())
  anon_0 := b
  if (df_boolFromRef(anon_0)) {
    var anon_1: Ref
    label lbl_continue_1
      invariant df_isSubtype(df_typeOf(b), df_boolType())
    anon_1 := b
    if (df_boolFromRef(anon_1)) {
      goto lbl_continue_0
      goto lbl_continue_1
      goto lbl_continue_1
      goto lbl_continue_1
    }
    label lbl_break_1
    assert df_isSubtype(df_typeOf(b), df_boolType())
    goto lbl_continue_0
    goto lbl_continue_0
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(b), df_boolType())
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/return_break_continue.kt:(970,992): info: Generated Viper text for labelledWhileShadowing:
method f_labelledWhileShadowing_TF_T_Boolean(b: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(b), df_boolType())
  label lbl_continue_0
    invariant df_isSubtype(df_typeOf(b), df_boolType())
  anon_0 := b
  if (df_boolFromRef(anon_0)) {
    var anon_1: Ref
    var anon_2: Ref
    label lbl_continue_1
      invariant df_isSubtype(df_typeOf(b), df_boolType())
    anon_1 := b
    if (df_boolFromRef(anon_1)) {
      goto lbl_break_1
      goto lbl_continue_1
      goto lbl_continue_1
    }
    label lbl_break_1
    assert df_isSubtype(df_typeOf(b), df_boolType())
    label lbl_continue_2
      invariant df_isSubtype(df_typeOf(b), df_boolType())
    anon_2 := b
    if (df_boolFromRef(anon_2)) {
      goto lbl_break_2
      goto lbl_continue_2
      goto lbl_continue_2
    }
    label lbl_break_2
    assert df_isSubtype(df_typeOf(b), df_boolType())
    goto lbl_break_0
    goto lbl_continue_0
    goto lbl_continue_0
  }
  label lbl_break_0
  assert df_isSubtype(df_typeOf(b), df_boolType())
  label lbl_ret_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
