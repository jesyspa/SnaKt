/predicates.kt:(203,213): info: Generated Viper text for useClasses:
field bf_a: Ref

field bf_b: Ref

field bf_next: Ref

field bf_pf: Ref

predicate p_c_Baz_shared(this$dispatch: Ref) {
  true
}

predicate p_c_Baz_unique(this$dispatch: Ref) {
  true
}

predicate p_c_PrimitiveFields_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType())
}

predicate p_c_PrimitiveFields_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_a, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_a), df_intType()) &&
  acc(this$dispatch.bf_b, write) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_b), df_intType())
}

predicate p_c_Recursive_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_next, wildcard) &&
  (this$dispatch.bf_next != df_nullValue() ==>
  acc(p_c_Recursive_shared(this$dispatch.bf_next), wildcard)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_next), df_nullable(df_c_Recursive()))
}

predicate p_c_Recursive_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_next, wildcard) &&
  (this$dispatch.bf_next != df_nullValue() ==>
  acc(p_c_Recursive_shared(this$dispatch.bf_next), wildcard)) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_next), df_nullable(df_c_Recursive()))
}

predicate p_c_ReferenceField_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_pf, wildcard) &&
  acc(p_c_PrimitiveFields_shared(this$dispatch.bf_pf), wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_pf), df_c_PrimitiveFields()) &&
  acc(p_c_Baz_shared(this$dispatch), wildcard)
}

predicate p_c_ReferenceField_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_pf, wildcard) &&
  acc(p_c_PrimitiveFields_shared(this$dispatch.bf_pf), wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_pf), df_c_PrimitiveFields()) &&
  acc(p_c_Baz_unique(this$dispatch), write)
}

method f_useClasses_TF_T_ReferenceField$T_Recursive(rf: Ref, rec: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  inhale df_isSubtype(df_typeOf(rf), df_c_ReferenceField())
  inhale acc(p_c_ReferenceField_shared(rf), wildcard)
  inhale df_isSubtype(df_typeOf(rec), df_c_Recursive())
  inhale acc(p_c_Recursive_shared(rec), wildcard)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/predicates.kt:(354,374): info: Generated Viper text for threeLayersHierarchy:
field bf_x: Ref

field bf_y: Ref

predicate p_c_A_shared(this$dispatch: Ref) {
  acc(this$dispatch.bf_x, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_x), df_intType())
}

predicate p_c_A_unique(this$dispatch: Ref) {
  acc(this$dispatch.bf_x, wildcard) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_x), df_intType()) &&
  acc(this$dispatch.bf_y, write) &&
  df_isSubtype(df_typeOf(this$dispatch.bf_y), df_intType())
}

predicate p_c_B_shared(this$dispatch: Ref) {
  acc(p_c_A_shared(this$dispatch), wildcard)
}

predicate p_c_B_unique(this$dispatch: Ref) {
  acc(p_c_A_unique(this$dispatch), write)
}

predicate p_c_C_shared(this$dispatch: Ref) {
  acc(p_c_B_shared(this$dispatch), wildcard)
}

predicate p_c_C_unique(this$dispatch: Ref) {
  acc(p_c_B_unique(this$dispatch), write)
}

method f_threeLayersHierarchy_TF_T_C(c: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  inhale df_isSubtype(df_typeOf(c), df_c_C())
  inhale acc(p_c_C_shared(c), wildcard)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/predicates.kt:(390,403): info: Generated Viper text for listHierarchy:
field sp_size: Ref

predicate p_pkg$kotlin_collections$c_Collection_shared(this$dispatch: Ref) {
  acc(p_pkg$kotlin_collections$c_Iterable_shared(this$dispatch), wildcard)
}

predicate p_pkg$kotlin_collections$c_Collection_unique(this$dispatch: Ref) {
  acc(p_pkg$kotlin_collections$c_Iterable_unique(this$dispatch), write)
}

predicate p_pkg$kotlin_collections$c_Iterable_shared(this$dispatch: Ref) {
  true
}

predicate p_pkg$kotlin_collections$c_Iterable_unique(this$dispatch: Ref) {
  true
}

predicate p_pkg$kotlin_collections$c_List_shared(this$dispatch: Ref) {
  acc(p_pkg$kotlin_collections$c_Collection_shared(this$dispatch), wildcard)
}

predicate p_pkg$kotlin_collections$c_List_unique(this$dispatch: Ref) {
  acc(p_pkg$kotlin_collections$c_Collection_unique(this$dispatch), write)
}

predicate p_pkg$kotlin_collections$c_MutableCollection_shared(this$dispatch: Ref) {
  acc(p_pkg$kotlin_collections$c_Collection_shared(this$dispatch), wildcard) &&
  acc(p_pkg$kotlin_collections$c_MutableIterable_shared(this$dispatch), wildcard)
}

predicate p_pkg$kotlin_collections$c_MutableCollection_unique(this$dispatch: Ref) {
  acc(p_pkg$kotlin_collections$c_Collection_unique(this$dispatch), write) &&
  acc(p_pkg$kotlin_collections$c_MutableIterable_unique(this$dispatch), write)
}

predicate p_pkg$kotlin_collections$c_MutableIterable_shared(this$dispatch: Ref) {
  acc(p_pkg$kotlin_collections$c_Iterable_shared(this$dispatch), wildcard)
}

predicate p_pkg$kotlin_collections$c_MutableIterable_unique(this$dispatch: Ref) {
  acc(p_pkg$kotlin_collections$c_Iterable_unique(this$dispatch), write)
}

predicate p_pkg$kotlin_collections$c_MutableList_shared(this$dispatch: Ref) {
  acc(p_pkg$kotlin_collections$c_List_shared(this$dispatch), wildcard) &&
  acc(p_pkg$kotlin_collections$c_MutableCollection_shared(this$dispatch), wildcard)
}

predicate p_pkg$kotlin_collections$c_MutableList_unique(this$dispatch: Ref) {
  acc(p_pkg$kotlin_collections$c_List_unique(this$dispatch), write) &&
  acc(p_pkg$kotlin_collections$c_MutableCollection_unique(this$dispatch), write)
}

method f_listHierarchy_TF_T_MutableList(xs: Ref) returns (ret_0: Ref)
  requires acc(xs.sp_size, write)
  requires df_intFromRef(xs.sp_size) >= 0
  ensures acc(xs.sp_size, write)
  ensures df_intFromRef(xs.sp_size) >= 0
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  inhale df_isSubtype(df_typeOf(xs), df_c_pkg$kotlin_collections_MutableList())
  inhale acc(p_pkg$kotlin_collections$c_MutableList_shared(xs), wildcard)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
