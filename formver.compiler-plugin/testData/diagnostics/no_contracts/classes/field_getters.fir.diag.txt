/field_getters.kt:(70,94): info: Generated Viper text for testPrimitiveFieldGetter:
field bf_a: Ref

field bf_b: Ref

method f_testPrimitiveFieldGetter_TF_T_PrimitiveFields(pf: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var a: Ref
  var b: Ref
  inhale df_isSubtype(df_typeOf(pf), df_c_PrimitiveFields())
  inhale acc(p_shared(pf), wildcard)
  unfold acc(p_shared(pf), wildcard)
  a := pf.bf_a
  inhale acc(pf.bf_b, write)
  b := pf.bf_b
  exhale acc(pf.bf_b, write)
  inhale df_isSubtype(df_typeOf(b), df_intType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/field_getters.kt:(230,254): info: Generated Viper text for testReferenceFieldGetter:
field bf_a: Ref

field bf_b: Ref

field bf_f: Ref

field bf_g: Ref

method f_testReferenceFieldGetter_TF_T_ReferenceFields(rf: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var f: Ref
  var g: Ref
  var fa: Ref
  var fb: Ref
  var ga: Ref
  var gb: Ref
  inhale df_isSubtype(df_typeOf(rf), df_c_ReferenceFields())
  inhale acc(p_c_ReferenceFields_shared(rf), wildcard)
  unfold acc(p_c_ReferenceFields_shared(rf), wildcard)
  f := rf.bf_f
  inhale acc(rf.bf_g, write)
  g := rf.bf_g
  exhale acc(rf.bf_g, write)
  inhale df_isSubtype(df_typeOf(g), df_c_PrimitiveFields())
  inhale acc(p_c_PrimitiveFields_shared(g), wildcard)
  unfold acc(p_c_PrimitiveFields_shared(f), wildcard)
  fa := f.bf_a
  inhale acc(f.bf_b, write)
  fb := f.bf_b
  exhale acc(f.bf_b, write)
  inhale df_isSubtype(df_typeOf(fb), df_intType())
  unfold acc(p_c_PrimitiveFields_shared(g), wildcard)
  ga := g.bf_a
  inhale acc(g.bf_b, write)
  gb := g.bf_b
  exhale acc(g.bf_b, write)
  inhale df_isSubtype(df_typeOf(gb), df_intType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/field_getters.kt:(387,411): info: Generated Viper text for testCascadingFieldGetter:
field bf_a: Ref

field bf_b: Ref

field bf_f: Ref

field bf_g: Ref

method f_testCascadingFieldGetter_TF_T_ReferenceFields(rf: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var fa: Ref
  var anon_0: Ref
  var fb: Ref
  var anon_1: Ref
  var ga: Ref
  var anon_2: Ref
  var gb: Ref
  var anon_3: Ref
  inhale df_isSubtype(df_typeOf(rf), df_c_ReferenceFields())
  inhale acc(p_c_ReferenceFields_shared(rf), wildcard)
  unfold acc(p_c_ReferenceFields_shared(rf), wildcard)
  anon_0 := rf.bf_f
  unfold acc(p_c_PrimitiveFields_shared(anon_0), wildcard)
  fa := anon_0.bf_a
  unfold acc(p_c_ReferenceFields_shared(rf), wildcard)
  anon_1 := rf.bf_f
  inhale acc(anon_1.bf_b, write)
  fb := anon_1.bf_b
  exhale acc(anon_1.bf_b, write)
  inhale df_isSubtype(df_typeOf(fb), df_intType())
  inhale acc(rf.bf_g, write)
  anon_2 := rf.bf_g
  exhale acc(rf.bf_g, write)
  inhale df_isSubtype(df_typeOf(anon_2), df_c_PrimitiveFields())
  inhale acc(p_c_PrimitiveFields_shared(anon_2), wildcard)
  unfold acc(p_c_PrimitiveFields_shared(anon_2), wildcard)
  ga := anon_2.bf_a
  inhale acc(rf.bf_g, write)
  anon_3 := rf.bf_g
  exhale acc(rf.bf_g, write)
  inhale df_isSubtype(df_typeOf(anon_3), df_c_PrimitiveFields())
  inhale acc(p_c_PrimitiveFields_shared(anon_3), wildcard)
  inhale acc(anon_3.bf_b, write)
  gb := anon_3.bf_b
  exhale acc(anon_3.bf_b, write)
  inhale df_isSubtype(df_typeOf(gb), df_intType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}
