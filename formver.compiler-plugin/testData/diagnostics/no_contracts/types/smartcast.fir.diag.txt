/smartcast.kt:(23,38): info: Generated Viper text for smartcastReturn:
method f_smartcastReturn_TF_NT_Int(n: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  inhale df_isSubtype(df_typeOf(n), df_nullable(df_intType()))
  if (!(n == df_nullValue())) {
    ret_0 := n
  } else {
    ret_0 := df_intToRef(0)}
  goto lbl_0
  label lbl_0
}

/smartcast.kt:(88,106): info: Generated Viper text for isNullOrEmptyWrong:
method f_isNullOrEmptyWrong_TF_NT_CharSequence(seq: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  inhale df_isSubtype(df_typeOf(seq), df_nullable(df_c_pkg$kotlin_CharSequence()))
  inhale seq != df_nullValue() ==> acc(p_shared(seq), wildcard)
  if (seq == df_nullValue()) {
    var anon_0: Ref
    if (seq != df_nullValue()) {
      var anon_1: Ref
      var anon_2: Ref
      anon_2 := pg_length(seq)
      anon_1 := anon_2
      inhale df_isSubtype(df_typeOf(anon_1), df_intType())
      anon_0 := anon_1
    } else {
      anon_0 := df_nullValue()}
    ret_0 := df_boolToRef(anon_0 == df_intToRef(0))
  } else {
    ret_0 := df_boolToRef(false)}
  goto lbl_0
  label lbl_0
}

method pg_length(this$dispatch: Ref) returns (ret: Ref)
