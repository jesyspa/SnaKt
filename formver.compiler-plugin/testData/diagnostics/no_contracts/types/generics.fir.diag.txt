/generics.kt:(52,65): info: Generated Viper text for genericMethod:
field bf_t: Ref

method f_genericMethod_TF_T_Box$NT_Any(this$dispatch: Ref, x: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_nullable(df_anyType()))
{
  inhale df_isSubtype(df_typeOf(this$dispatch), df_c_Box())
  inhale acc(p_shared(this$dispatch), wildcard)
  inhale df_isSubtype(df_typeOf(x), df_nullable(df_anyType()))
  ret_0 := x
  goto lbl_0
  label lbl_0
}

/generics.kt:(107,116): info: Generated Viper text for createBox:
field bf_t: Ref

method con_NT_Any(p_t: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_Box())
  ensures acc(p_shared(ret), wildcard)
  ensures acc(p_unique(ret), write)


method f_createBox_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var l0_boolBox: Ref
  var l0_b: Ref
  var anon_0: Ref
  var l0_intBox: Ref
  var anon_1: Ref
  l0_boolBox := con_NT_Any(df_boolToRef(true))
  inhale acc(l0_boolBox.bf_t, write)
  anon_0 := l0_boolBox.bf_t
  exhale acc(l0_boolBox.bf_t, write)
  inhale df_isSubtype(df_typeOf(anon_0), df_nullable(df_anyType()))
  l0_b := anon_0
  inhale df_isSubtype(df_typeOf(l0_b), df_boolType())
  l0_intBox := con_NT_Any(df_intToRef(2))
  inhale acc(l0_intBox.bf_t, write)
  anon_1 := l0_intBox.bf_t
  exhale acc(l0_intBox.bf_t, write)
  inhale df_isSubtype(df_typeOf(anon_1), df_nullable(df_anyType()))
  ret_0 := anon_1
  inhale df_isSubtype(df_typeOf(ret_0), df_intType())
  goto lbl_0
  label lbl_0
}

/generics.kt:(227,242): info: Generated Viper text for setGenericField:
field bf_t: Ref

method con_NT_Any(p_t: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_c_Box())
  ensures acc(p_shared(ret), wildcard)
  ensures acc(p_unique(ret), write)


method f_setGenericField_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var l0_box: Ref
  l0_box := con_NT_Any(df_intToRef(3))
  inhale acc(l0_box.bf_t, write)
  l0_box.bf_t := df_intToRef(5)
  exhale acc(l0_box.bf_t, write)
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

/generics.kt:(293,303): info: Generated Viper text for genericFun:
method f_genericFun_TF_NT_Any(p_t: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_nullable(df_anyType()))
{
  inhale df_isSubtype(df_typeOf(p_t), df_nullable(df_anyType()))
  ret_0 := p_t
  goto lbl_0
  label lbl_0
}

/generics.kt:(322,337): info: Generated Viper text for callGenericFunc:
method f_callGenericFunc_TF_() returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_unitType())
{
  var l0_x: Ref
  var anon_0: Ref
  anon_0 := f_genericFun_TF_NT_Any(df_intToRef(3))
  l0_x := anon_0
  inhale df_isSubtype(df_typeOf(l0_x), df_intType())
  label lbl_0
  inhale df_isSubtype(df_typeOf(ret_0), df_unitType())
}

method f_genericFun_TF_NT_Any(p_t: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_nullable(df_anyType()))


/generics.kt:(375,395): info: Generated Viper text for genericAsIfCondition:
field bf_t: Ref

method f_genericAsIfCondition_TF_T_Box(box: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  var anon_0: Ref
  var anon_1: Ref
  inhale df_isSubtype(df_typeOf(box), df_c_Box())
  inhale acc(p_shared(box), wildcard)
  inhale acc(box.bf_t, write)
  anon_1 := box.bf_t
  exhale acc(box.bf_t, write)
  inhale df_isSubtype(df_typeOf(anon_1), df_nullable(df_anyType()))
  anon_0 := anon_1
  inhale df_isSubtype(df_typeOf(anon_0), df_boolType())
  if (df_boolFromRef(anon_0)) {
    ret_0 := df_intToRef(20)
  } else {
    ret_0 := df_intToRef(10)}
  goto lbl_0
  label lbl_0
}
