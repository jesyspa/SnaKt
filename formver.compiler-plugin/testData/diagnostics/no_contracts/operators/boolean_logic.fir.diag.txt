/boolean_logic.kt:(23,31): info: Generated Viper text for negation:
method f_negation_TF_T_Boolean(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  inhale df_isSubtype(df_typeOf(x), df_boolType())
  ret_0 := sp_notBool(x)
  goto lbl_0
  label lbl_0
}

/boolean_logic.kt:(75,86): info: Generated Viper text for conjunction:
method f_conjunction_TF_T_Boolean$T_Boolean(x: Ref, y: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  inhale df_isSubtype(df_typeOf(x), df_boolType())
  inhale df_isSubtype(df_typeOf(y), df_boolType())
  if (df_boolFromRef(x)) {
    ret_0 := y
  } else {
    ret_0 := df_boolToRef(false)}
  goto lbl_0
  label lbl_0
}

/boolean_logic.kt:(146,168): info: Generated Viper text for conjunctionSideEffects:
method f_conjunctionSideEffects_TF_T_Boolean$T_Boolean(x: Ref, y: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  var anon_0: Ref
  inhale df_isSubtype(df_typeOf(x), df_boolType())
  inhale df_isSubtype(df_typeOf(y), df_boolType())
  anon_0 := f_negation_TF_T_Boolean(x)
  if (df_boolFromRef(anon_0)) {
    ret_0 := f_negation_TF_T_Boolean(y)
  } else {
    ret_0 := df_boolToRef(false)}
  goto lbl_0
  label lbl_0
}

method f_negation_TF_T_Boolean(x: Ref) returns (ret: Ref)
  ensures df_isSubtype(df_typeOf(ret), df_boolType())


/boolean_logic.kt:(341,352): info: Generated Viper text for disjunction:
method f_disjunction_TF_T_Boolean$T_Boolean(x: Ref, y: Ref)
  returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  inhale df_isSubtype(df_typeOf(x), df_boolType())
  inhale df_isSubtype(df_typeOf(y), df_boolType())
  if (df_boolFromRef(x)) {
    ret_0 := df_boolToRef(true)
  } else {
    ret_0 := y}
  goto lbl_0
  label lbl_0
}
