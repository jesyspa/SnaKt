/is_operator.kt:(23,36): info: Generated Viper text for isNonNullable:
method f_isNonNullable_TF_NT_Int(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  inhale df_isSubtype(df_typeOf(x), df_nullable(df_intType()))
  ret_0 := df_boolToRef(df_isSubtype(df_typeOf(x), df_intType()))
  goto lbl_0
  label lbl_0
}

/is_operator.kt:(84,97): info: Generated Viper text for notIsNullable:
method f_notIsNullable_TF_NT_Int(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_boolType())
{
  inhale df_isSubtype(df_typeOf(x), df_nullable(df_intType()))
  ret_0 := sp_notBool(df_boolToRef(df_isSubtype(df_typeOf(x), df_nothingType())))
  goto lbl_0
  label lbl_0
}

/is_operator.kt:(150,159): info: Generated Viper text for smartCast:
method f_smartCast_TF_NT_Any(x: Ref) returns (ret_0: Ref)
  ensures df_isSubtype(df_typeOf(ret_0), df_intType())
{
  inhale df_isSubtype(df_typeOf(x), df_nullable(df_anyType()))
  if (df_isSubtype(df_typeOf(x), df_intType())) {
    ret_0 := x
    goto lbl_0
  } else {
    ret_0 := df_intToRef(-1)
    goto lbl_0
  }
  label lbl_0
}
